%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 0.5.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Alan
%%CreationDate: 3/15/2011
%%BoundingBox: 0 0 235 229
%%HiResBoundingBox: 0 0 234.5469 228.3428
%%CropBox: 0 0 234.5469 228.3428
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.1 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 11778 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0FFFA8FD79FFA8527DFFFF7D7DA87D52A8FD28FFA87D83FD0CFF
%A858A8FD0CFF5883FD2DFF52FF7DA8FF7D7DA87DA87DFFFFFF7D7D7DA87D
%7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7D
%A87D522D527D7E7DA87D7E7DA87D7E7D8451522DA87D7E7DA87D7E7DA87D
%8452522D7D7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7D
%A87D7E7D847D7DA8FD0BFF7DA87D7DFFFF7D277D7D7DFFFFA85252FD057D
%597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D52527D7D
%2D27277D7D7D597D7D7D597D7D7D592D272DFD047D597D7D7D597D7D5227
%2D527D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D
%7D537D27A8FD0BFFA87D7DA87DA87DA87D7DA8FFFFFF7DFD21FF7DFFFF7D
%587DFD0BFFA8525852CAFD0AFF835252FD20FF7E7DFD0CFFA8FFFFFFA8FF
%FFFFA8FFFFFFA87DFD23FFA87DFF7DA1FD09FFA152FF7DFF52A8FD09FF7D
%A87DA8FD1FFF7DA8FD19FF52FD23FF52FFFFFF52FD08FFA876FFFFA1FFFF
%52FD09FF7DFF7DA8FD1FFF7D7EFD18FFA87DFD22FF76A8FFFFFFA852FD06
%FFA152FFFFFF7DFFFFA852FD07FF7DA8FFFF52FD1FFF59A8FD19FF52FD21
%FFA87DFD05FF7DA8FD04FFA852FD04FFA8FFFFFFCA7DFD06FF7DCAFFFF7D
%A8FD1EFF7D7EFD18FFA87DFD20FFA87DCAFD05FFA87DFFFFFFA852FD05FF
%7DFD04FFA852FD04FFA87DFFFFFF7D7DFD1EFF7DA8FD19FF52FD20FF7D7D
%FD07FF7DA8FFA852FD06FF7DA8FD04FF7D7DFFFFFF7DA8FD04FF7DFD1EFF
%7D7DFD18FFA87DFD1FFFA876FD08FFA876A852FD07FF7DFD06FF7D7DFFA8
%7DFD05FF7D7DFD1DFF7DA8FD19FF53FD1FFF7DFD0AFF7D52FD08FFA1A8FD
%06FF7DA8A87DFD05FFA8A7FD1DFF7D7DFD18FFA87DFD1EFF52A8FD09FFA8
%527DFD08FF7DFD07FFA87D52FD07FF52FD1DFF7DA8FD19FF52FD1DFF7D7D
%FD09FFA87CFF7DA8FD07FFA8FD08FF7D52FD07FF7DA8FD1CFF7D7EFFFFA8
%FD15FFA87DFD1CFFA87DFD09FFA176FFFFA852FD07FF7DFD08FFA8527DFD
%06FFA87DFD1CFF59A8FFFFFFA87D527DA8FD11FF52FD1CFF7DA8FD08FFA8
%7DFD04FF7DA8FD06FFA8FD08FF7DFF76A8FD06FF7DFD1CFF7D7EFFFFA852
%527D5252A8FD0FFFA87DFD1BFF7D7DFD08FF7D7DFD05FF7D7DFD06FF7DFD
%07FF7D7DFFFF52FD06FF7DA2FD1BFF7DA8FD04FFA8527DA8FD11FF52FD1A
%FFA87DFD08FF7D7DFD07FF7DFD06FF7DA8FD06FF7DA8FFFFA87DFD05FFA8
%A1FD1BFF7D7DFD04FF262727A8FD10FFA87DFD1AFF52FD08FF7D7DFD08FF
%A87DFD05FF7DA8FD06FF52FD04FF7D7DFD05FF76FD1BFF7DA8FFFFA87DA8
%5252FD12FF53FD19FF7DA8FD07FF7D7DFD0AFF7DFD05FFA1A8FD05FF7DA8
%FD05FF7DFD05FF7DA8FD1AFF7D7DFFFF7D52527DA8FD11FFA87DFD18FF7D
%7DFD07FF7D7DFD0BFF7DA8FD04FF7DA8FD05FF7DA8FD05FF7D7DFD04FF7D
%A8FD1AFF7DA8FD04FFA8527DFD12FF52FD17FFA87DFD07FF7DA1FD0CFFA8
%7DFD04FFA1A8FD05FF7DFD07FF7DA8FD04FF7DFD1AFF7D7EFD04FFA8FF7D
%FD11FFA87DFD16FFA876A8FFFFFFA8FFA8777DFD0EFF7DA8FFFFFF7DA8FD
%04FF7DA8FD08FF52FD04FF7DA8FD19FF59A8FD04FF5252527DFD11FF52FD
%16FF7DA8FD05FFA87DA8FD0FFF7DA8FFFFFFA8A8FD04FF7DA8FD08FFA87D
%FFFFFF7DA8FD19FF7D7EFD04FF525252FD05FFA8FFFFFFA8A8FFFFA8FFFF
%FFA87DFD15FF7D7DFD05FFA87DA8FD11FF7DFFFFFF7DFD04FFA87DFD0AFF
%7DA8FFFFA87DFD19FF7DA8FD04FF527D7D7DFFFFFF847D7DFFFFA852A87D
%7DA8FFFFFF53FD13FF7E5977FFFFFFA9A97E7DA8FD12FF5353FFA95353FF
%FFA9537EFD0AFFA87D7EFF7E537EFD18FF7D7DFFFFA852277D52A8FFFFFF
%7DA87D7DFFFFA8597D7DFFFFFFA85252A8FD10FF7E7E537EFFFFFFA85353
%7EFD12FF7E537D7EA8537E7EFF537D53FD0AFF84527EA87E537E7EFD15FF
%A87D52A8FFFFA852FF7D27A8FFFFFF52FF7DA8FFFF7DFFFF7D7DFFFFFF52
%FD13FF537E7EFFFFFF7D7D7EA9FD12FFA97E53A9A85A53FFFF7E537EFD0A
%FFA87E53FF7E5953FD18FF7D7DFFFFFFA8FFFF7DFD04FFA8527DA8A85259
%A87D52A8FFFFA87DFD12FF52A8A8FFFFFF7D7DA8FD15FFA87DA8FF7DA8FF
%FF7D7DA9FD0BFFA87DA8FF7D7EFD18FF7DA8FFFFFF527D7D7D52FD09FFA8
%FFA8FD05FF52FD11FF7DA1FD04FF7D7DFD18FFA1A8FFA8A8FFFF7DA8FD0D
%FFA87DFFFF7DFD18FF7D7EFFFFFFA8525252A8FD10FFA87DFD10FF7D7DFD
%04FF527DFD19FFA87DFF7DA8FFFF76FD0FFF76A8FF7DA8FD17FF59A8FD19
%FF52FD0FFFA87DFD04FF7DA8FD1BFF7DFFA8A8FFA8A8FD0FFFCA7DFF7DFD
%18FF7D7EFFFF7DFD05527DFD0FFFA87DFD0EFFA87DA8FFFFFF52A8FD1CFF
%7DA87DA8FF7DA8FD10FF7DFF7DA1FD17FF7DA8FFFFA8A87D7DA852FD11FF
%52FD0EFF7DA8FFFFFF52A8FD1DFFA87DA87DFF7DFD11FF7DA8A8A8FD17FF
%7D7DFD04FF7DA8527DFD10FFA87DFD0DFF7D7DFFFFA852FD1FFFA87DA8A8
%A87DFD12FF52A87DFD17FF7DA8FD04FFA82752A8FD11FF53FD0CFFA17DFF
%FFA852FD21FF7DA8A1FF7DFD12FFA87DA7FD17FF7D7DFFFFA8A8527D7DA8
%A8FD0FFFA87DFD0BFFA876FFFFA152FD22FF7D7DA87DA8FD12FFA87D7DFD
%17FF7DA8FFFF7D527D527D52A8FD10FF52FD0AFFA852FFFF7D7DFD23FF7D
%7DA87DA8FD13FF7D7DA8FD16FF7D7EFD18FFA87DFD0AFF52FFFF7D7DFD24
%FFA852A87DFD14FF7D52FD17FF59A8FD19FF52FD09FF76FFFF7D7DFD25FF
%A87D7DA8FD14FFA87DA8FD16FF7D7EFD18FFA87DFD08FF52A8FF7D7DFD27
%FF527D7DFD15FF52A8FD16FF7DA8FD19FF52FD07FF7DA8FF7DA8FD28FF7D
%52A8FD15FF7D7DFD16FF7D7DFD18FFA87DFD06FF7D7DA876A8FD29FF7D4B
%A8FD15FF527DFD16FF7DA8FD19FF53FD05FFA17DA87DFD2BFF7D27FD16FF
%7D52FD16FF7D7DFD18FFA87DFD04FFA87D7D7DFD2CFF7D52FD16FFA152FD
%16FF7DA8FD19FF52FFFFFFA87D7D7DFD2DFFA852FD17FF52FD16FF7D7EFD
%04FF7752A8FD11FFA87DFFFFFF7D527DFD2EFF7D52FD16FFA87DA8FD15FF
%59A8FD05FF522752FD11FF52FFFF7D52A8FD2FFFA876FD17FF7DFD16FF7D
%7EFD04FF7D4B527D27FD0FFFA87DFF7D27A8FD30FF847DFD17FF7EA8FD15
%FF7DA8FD04FF7DA8FFA8FD0BFF7D7DA9FFFFFF7C7D27FD1FFFA8FD12FFCA
%76FD0DFFA8FD09FF7CFD16FF7D7DFD04FF2052277DFD0AFFA87D7D7DFFFF
%9A754BFD1EA8FF7D7DFD11A8CA9993A0FD0AA8A97D7DFD08A8A09399FD14
%A8FF52A8FFFFFFA87D527DA8FD0AFFA87DFF7DFFCAC25276527D527D527D
%527D527D527D527D527D527D527D527D527D527D527D527D5252277D527D
%527D527D527D527D527D527D527D527652765259527D527D527D527D5252
%527D527D527D527D527652765259527D527D527D527D527D527D527D527D
%527D5252A8FFFFA87D7D5227A1FD0AFFA87D52A8FFFF9A76C2FD1FFFA87D
%FD11FFCFBBC2A0FD0BFFA884FD08FFC3C29AFD15FF7DA8FD04FFA87D527D
%FD0BFFA8A8FD04FF7DFD21FFA8FD21FFA8FD20FFA8A8FD04FF52272752FD
%10FFA87DFD64FF7DA8FD05FF527D7DFD11FF7DFD10FFA8AFFFFFFFA8FD08
%FFA8FD45FFA8A8FD04FF7D5227A8FD10FFA87DFD10FF7DA8FFFF7D7DFD04
%FFA8A8A8FF52FFA8FD43FF7DA8FD04FF5252A8A8FD11FF7DFD07FFA7A8A7
%A8A7AEFFFFFFA8527DA8A87DA87DA87D5352FF7DA8A8527DFD42FFA8A8FD
%04FF7D52277DFD10FFA87DFD06FFA8A883A883A8A8FFFFFF7DA827A8FF7D
%7D7D52A87D7DFF7DA87D527DFD13FF7DA8FD2DFF7DA8FD05FF52CBA2FD11
%FF7DFD10FFA87EFD047DFFA9FFA8FD047DFF527D7DFD13FF52A8FD2DFFA8
%A8FD04FF52275252FD10FFA87DFD10FF7DA8FFFFA87DFD0AFFA8FD05FF83
%FD0DFFA87C7DFD2DFF7DA8FFFFFFA87DF8277DFD11FF7DFD10FFA9FD04FF
%A8FD10FF587DFD0DFF7CA8FD2DFFA8A8FFFFA8522727F87DFD10FFA87DFD
%25FFA87D83FD0CFFA87D7DFD0BFF7DA8FD20FF7DA8FD04FF527DA852FD11
%FF52A8A8FD23FF83AE7DFD0CFFAE83A8FD0BFF5852AEFD1EFF7D7DA8FD04
%FF7D2727A8FD10FFA87DA8FD24FF83FF83A8FD0BFF7DA87DCFFD09FFAE7D
%7D58FD1EFFA853A8FD05FFA8A8FD12FF7DFD25FF7DFFA8A8FD0BFF83A8A8
%A8FD09FFA8A8FF83FD1FFFA8A8FD04FF7DA8FD12FFA87DFD24FF837DFFA8
%7DFD0BFF7DCF83A8FD09FFA783FF7DA8FD1EFF7DA8FD04FFA852527DFD11
%FF7DFD24FFA7A8FFA883FD0BFFA7A8FF7DFD09FF7DFFFFA8A8FD1EFFA8A8
%FD04FFA852275252FD0FFFA87DFD24FF7DFFFFFF7DFD0BFF7DFFFF7DA8FD
%08FF83A8FFA883FD1EFF7DA8FD04FF52F87D7D7DFD10FF7DFD24FF83FFFF
%FFA7FD0AFFAEA7FFFFA7A8FD08FF7DFFFFFF7DFD1EFFA8A8FD04FF525252
%277DFD0FFFA87DFD24FF7DFFFFFF7DAEFD09FFAE7DFFFFA87DFD07FFA883
%FFFFFF83A8FD1DFF7DA8FD04FF7D7D7D277DFD10FF7DFD23FFA7A7FFFFFF
%A8A8FD09FFA8A8FFFFA8A8FD08FF7DFFFFFFA8587DFD1CFFA8A8FD04FF7D
%5252A8A8FD0FFFA87DFD23FF83A8FFFFFFA883FD09FFA87DFFFFA87DFD07
%FFA883FD04FFA7587DFD1BFF7DA8FD04FF52277DA8FD11FF7DFD23FF7DFD
%05FF7DFD09FF7DAEFFFFCF83FD07FFA87DFD06FF7DA8FD1AFFA8A8FD04FF
%7D5252A8FD10FFA87DFFFFA8FD1FFFA883FD04FFAE83A8FD08FF83A8FFFF
%FF7DAEFD06FF7DA8FD06FF7C7DFD1AFF7DA8FD04FFA827A87DFD11FF7DA8
%A8FD21FF7DFD05FF7DFD09FF7DFD04FFA7A8FD06FF83A8FD07FF7CFD19FF
%A87DA8FD04FF52275252FD10FFA87D7DA8FD20FF7DA7FD05FFA87DFD07FF
%A883FD04FF83A8FD06FF7DFD08FF7D2DFD17FFA8A852A8FD05FF2752A8FD
%11FF7DFD22FF83A8FD05FFA883FD07FFA883FD05FF7DFD05FFA8A7FD09FF
%8358FD18FFA8A8FD04FF7D52277DFD10FFA87DFD22FF7DFD07FF7DA8FD05
%FFA858FD05FFA883FD05FFA87DFD0AFF7DA8FD17FF7DA8FD04FF5252FD13
%FF7DFD21FF7DA8FD07FFA87DFD04FF8358AEFD06FF7DFD05FF7DAEFD0AFF
%7DFFFFFFA883FD13FFA8A8FD04FF5227277DFD10FFA87DFD20FF5158FD08
%FFA858FFFFFFA858FD08FF837DFFFFFFA87DFD0BFFA87DFFFF7D527DFD12
%FF7DA8FD05FF52A8A8FD11FF7DFD1FFF7D58A8FD09FF7DA7FFA852FD09FF
%A87DFFFFFFA883FD0CFF7DFFA87DFF7DFD12FFA8A8FD04FF52277D52FD10
%FFA87DFD1EFF2D83FD0CFF515858A8FD0AFF7C7DFFAE52FD0DFF7D7D2DA8
%FFA858FD11FF7DA8FD04FF7D27517DFD11FF7DFD1DFF7D7DFD0EFF83FD0D
%FF585852FD0FFF2DA7FFFFFF83CFFD10FFA8A8FD05FFA17DFD11FFA87DFD
%1CFF8358A8FD1DFF7DFD15FFA7587C587DFD04FFAEA8FD07FF7DA8FFFFFF
%7DA87DA8A8FD11FF7DFD1CFF7DA8FD35FF7D7DA87DA8FFFFFF5858A8FD06
%FFA8A8FFFFA852275227A8FD10FFA87DFD1AFF7D5283FD39FFA87D835852
%A8A87CA8FD05FF7DA8FD05FF52527DFD11FF7DFD19FFA87D83FD3BFF7D7D
%7DAEFFFF8383FFFFFFAEFFA8A8FD04FF52272752FD10FFA85253A8FD16FF
%5858FD44FF7CFFFF832D7D52A8FD04FFA17D527DFD11FF7DFD17FFA77C83
%FD44FFA8587D58FF7D58A8FD04FF52527DA8FD10FFA87DFD14FF83A85258
%A8FD46FFA752A8FFFF52A8FD04FFA827527DFD11FF7DFD12FFAE5858587D
%A8FD4CFFA8A8FD04FF52A87D7DFD10FFA87DFD12FF5883FD50FF7DA8FD04
%FF2727527DFD11FF7DFD11FFA783FD51FFA8A8FD04FF52A8A87DFD10FFA8
%7DFD10FFA858A8FD51FF7DA8FD04FF7D527652FD11FF7DFD10FF83A7FD52
%FFA8A8FD05FF5252FD11FFA87DFD0FFF7D58FD53FF7DA8FD04FF7D27A852
%FD11FF7DFD0EFFA858FD54FFA8A8FD04FF52272752FD10FFA87DFD0AFFA8
%7D7D7D52FD11FFA8FD21FFA8FD21FF7DA8FD05FF2752FD12FF7DFD0AFF83
%587D83FD13FF7DFD21FF84FD20FFA8A8FD04FF7D52517DFD10FFA8FD047D
%7E7D7D7D7E7D7D527EFD077D7E7D7D7D7E7D7D7D7E7D7D7D847D527D7E7D
%7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D52
%FD047D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D
%7DA852A8FD04FF527DA852FD11FFA8A9FD09A8FFFD15A8FFFFFD1EA8AFA8
%A8A8FFFD1FA8FD06FF522727277DFD0FFFA87DFD20FFA87DA8FD1DFFA8A8
%FFFF7DFD1DFFA8A8FFA87DA8FFA8FF7D52A8FD10FF7D53A8FD1FFF7D7DFD
%1FFF27FF7D7D59FD1CFFA827FF7D7DFF7D52A827527DFD10FF52FF52FD1F
%FF7D7DA8FD1EFF7DA87DA87DA8FD1CFF7DA8A852A8FF27277DA852FD0FFF
%A87D7D7DFD20FF7D7DFD1EFF52FF7DA852FD1DFF52FFFFA852FFA87DFFA8
%A8FD10FF7D7DA8FD1FFF7D7DA8FD1EFF7DA8FF52A8FD1DFFA8A87D52FDFC
%FFFD38FF7D7DA8FD21FFA8FFA8FD58FF76277DFD19FFA852FD06FFA827FF
%52A8FD05FF52A8FD50FF7D27A8A8527D5252A85252527DA87DA852527D27
%52A8525252A87CFF7D767D527D4BA8525227A8527D27527D527D7D52FD50
%FF7D277D7D27522752277D7D274BFF27522752277D522752FF522727FF52
%7D277D52272652A85252A8527D7D524B7D7D52FD50FF7D52FF767D7D527D
%7D525227FD0552A8527D7D27527DFFF8A1FF767D527D522752527D2752FF
%524B52527D277D52FD50FFA8A8FFA87DFF7D7DFFA12752A87DA1FF52A1A8
%FFA8FF7D7D7D27FFFF7D52A8FF7D7DA8A852A8A8FF27527DFF52A8527DFD
%5BFFA8FD0CFF7D7DFFFFFFA1FD0AFFA8FD05FFA8FDFCFFFDFCFFFDFCFFFD
%FCFFFDFCFFFDB2FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2011-03-15T03:26:57-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>252</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXnHnrzT5jtNQ8x&#xA;HTL9dPh8raPFq/oMkTi9kla4JikMiMyx8bXj+7KtyYb9sVTXz1qPmiPT9KvNIS/gsOT3GtyaathJ&#xA;eRW4t2KqqX/KM/vSpbgpaimmKsZtPPeu3N1Bqthqj3WiRatpOixWskMAe7g1C2t5GvZmWKN0kP1s&#xA;Ooj4pRT8Pgq9D80+ZLLy1oVzrN7FNNb2xiVobZBJM7TSrCiohK1JeQd8VY7D+aXqqW/wj5lShpR9&#xA;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&#xA;xV2KuxV2KuxV2KuxV2KuxV2Kv//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>SymbolMT</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>symbol.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -228.343 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 228.343 li
234.547 228.343 li
234.547 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
228.906 94.6426 mo
225.207 94.6426 li
42.8062 94.6426 mo
46.5063 94.6426 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Times Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /Times def
/FontInfo 7 dict dup begin
/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [67] def
/StdVW [88] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC868BB2F3F3
5FB5E9F1C0F84AF60C7D8EABDB59B8E1F960151F9511E55A6B26091EC60E1C90
C277465A6CD6BF415E99C1E3222E5D8229E07EB706E217942A6C6EE460AA0> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/HHBIWK+Times /Times findfont ct_VMDictPut
/HHBIWK+Times*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
HHBIWK+Times nf
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
30.5571 98.2979 mo
(0)sh
228.906 50.0425 mo
225.207 50.0425 li
42.8062 50.0425 mo
46.5063 50.0425 li
@
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
HHBIWK+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B89DB76243241956147685E9D11B558168E06D18275E2
338D279B9913C7A1D115D13271EAC> |-
/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116
582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887
D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-
/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4
B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40D
D7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB16
6D458A0663DB06F2579480E048AFCB0FC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HHBIWK+Times /Encoding get
dup 46 /period put
dup 50 /two put
dup 53 /five put
pop
%ADOEndSubsetFont
/HHBIWK+Times*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five 
202{/.notdef}rp]
HHBIWK+Times nf
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
16.9946 53.7148 mo
(0.25)
[5.64307 2.27686 5.64258 0 ]xsh
228.906 5.54248 mo
225.207 5.54248 li
42.8062 5.54248 mo
46.5063 5.54248 li
@
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
16.9946 9.20703 mo
(0.50)
[5.64307 2.27686 5.64258 0 ]xsh
42.8062 5.54248 mo
42.8062 94.6426 li
228.906 94.6426 li
228.906 5.54248 li
42.8062 5.54248 li
42.8062 5.54248 li
cp
228.906 5.54248 mo
228.906 9.24268 li
228.906 94.6426 mo
228.906 90.9424 li
166.906 5.54248 mo
166.906 9.24268 li
166.906 94.6426 mo
166.906 90.9424 li
104.806 5.54248 mo
104.806 9.24268 li
104.806 94.6426 mo
104.806 90.9424 li
42.8062 5.54248 mo
42.8062 9.24268 li
42.8062 94.6426 mo
42.8062 90.9424 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
HHBIWK+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B896187A> |-
/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF
0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12
CD842E> |-
/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF
91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE58
8EC87D3> |-
/slash <1C60D8A8C9B8151C27268C28135E46A906DDC9504EC2C635F21A9AA1
DC0B003BE7> |-
/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A26
1528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4
E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF
06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D
7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D8839
3EC5B1BCAE7CEACDFA7D9A043D> |-
/bar <1C60D8A8C9B87DE05E11A8C3D762BF0480F0B8A008CC3F0923B7A1E28E
C4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HHBIWK+Times /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 97 /a put
dup 124 /bar put
pop
%ADOEndSubsetFont
/HHBIWK+Times*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /.notdef /two 2{/.notdef}rp /five 43{/.notdef}rp /a 26{/.notdef}rp 
/bar 131{/.notdef}rp]
HHBIWK+Times nf
HHBIWK+Times*1 [0 -11 -11 0 0 0 ]msf
9.68018 70.1182 mo
(|)sh
%ADOBeginSubsetFont: SymbolMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SymbolMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 107 /kappa put
dup 112 /pi put
def
/FontBBox {0 -220 1113 1005} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235
BDD70699E096A6312D> |-
/kappa <1C60D8A8C9B79676F435A8C107EC44AD4BF303B85802FA572F94ACD0
485E33727BE5267D1FF5F7B232C5A9FA1266F15F46D332E678F85563CD393BE3
BC2AF57495DE64EB585B8D1FEBF8FC129CD0D2BB554463583DC18BAA40B219A6
AB3C14C9D9C3BBAA90F5D748D53DA539B3D2048FC84D187B6431A99E69BD9CE3
721DE522D4BBEB6081FB6940E4829DF674CCE7A36B11DC6CC354AC1595F55B15
97449EE666C5BE0245489E93798834CA157E9408AC54961D0F1C9506> |-
/pi <1C60D8A8C9B79676F42F820A3F8801223C323147FDF00642AC0811E8CC2
333B60A7AD290761572EF97F88A56267CE624582C15300E18A410F61C740FAFC
15D82C9CB97A7C55F988C59B664C97CE2E9DC4D1A7D65A4F19CBD6E24F368CE6
6FD639F3F9EFE86850544DED9B16A5CB21982A87577C2EDE11C73371D704BEC6
83E2C4BE9EAA0DB9B078F541CB54AD043FCB3E8A9AE562ABDE0C2E05111A9AA0
CA240EC721EA711C1B7CC0AAD717706A41508871630FC150218108567> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/HHBIWL+SymbolMT /SymbolMT findfont ct_VMDictPut
/HHBIWL+SymbolMT*1 
[107{/.notdef}rp /kappa 4{/.notdef}rp /pi 143{/.notdef}rp]
HHBIWL+SymbolMT nf
HHBIWL+SymbolMT*1 [0 -11 -11 0 0 0 ]msf
9.68018 67.5039 mo
(k)sh
HHBIWK+Times*1 [0 -11 -11 0 0 0 ]msf
9.68018 62.3369 mo
(| \(2)
[-2.62891 -2.33203 -3.12402 0 ]ysh
HHBIWL+SymbolMT*1 [0 -11 -11 0 0 0 ]msf
9.68018 48.6025 mo
(p)sh
HHBIWK+Times*1 [0 -11 -11 0 0 0 ]msf
9.68018 42.3525 mo
(/a\))
[-3.77295 -5.30176 0 ]ysh
.75 lw
42.8062 94.6426 mo
43.106 94.2427 li
43.4063 93.9424 li
43.7061 93.5425 li
44.106 93.2427 li
44.4063 92.8428 li
44.7061 92.5425 li
45.0063 92.1426 li
45.3062 91.7427 li
45.606 91.4424 li
45.9063 91.0425 li
46.2061 90.7427 li
46.606 90.3428 li
46.9063 90.0425 li
47.2061 89.6426 li
47.5063 89.3428 li
47.8062 88.9424 li
48.106 88.5425 li
48.4063 88.2427 li
48.7061 87.8428 li
49.106 87.5425 li
49.4063 87.1426 li
49.7061 86.8428 li
50.0063 86.4424 li
50.3062 86.0425 li
50.606 85.7427 li
50.9063 85.3428 li
51.2061 85.0425 li
51.606 84.6426 li
51.9063 84.3428 li
52.2061 83.9424 li
52.5063 83.6426 li
52.8062 83.2427 li
53.106 82.8428 li
53.4063 82.5425 li
53.7061 82.1426 li
54.0063 81.8428 li
54.4063 81.4424 li
54.7061 81.1426 li
55.0063 80.7427 li
55.3062 80.3423 li
55.606 80.0425 li
55.9063 79.6426 li
56.2061 79.3423 li
56.5063 78.9424 li
56.8062 78.6426 li
57.106 78.2427 li
57.5063 77.8423 li
57.8062 77.5425 li
58.106 77.1426 li
58.4063 76.8423 li
58.7061 76.4424 li
59.0063 76.1426 li
59.3062 75.7422 li
59.606 75.4424 li
59.9063 75.0425 li
60.2061 74.6426 li
60.5063 74.3423 li
60.8062 73.9424 li
61.2061 73.6426 li
61.5063 73.2422 li
61.8062 72.9424 li
62.106 72.5425 li
62.4063 72.1426 li
62.7061 71.8423 li
63.0063 71.4424 li
63.3062 71.1426 li
63.606 70.7422 li
63.9063 70.4424 li
64.2061 70.0425 li
64.5063 69.7422 li
64.8062 69.3423 li
65.106 68.9424 li
65.4063 68.6426 li
65.7061 68.2422 li
66.0063 67.9424 li
66.3062 67.5425 li
66.606 67.2422 li
67.0063 66.8423 li
67.3062 66.4424 li
67.606 66.1426 li
67.9063 65.7422 li
68.2061 65.4424 li
68.5063 65.0425 li
68.8062 64.7422 li
69.106 64.3423 li
69.4063 63.9424 li
69.7061 63.6426 li
70.0063 63.2422 li
70.3062 62.9424 li
70.606 62.5425 li
70.9063 62.2422 li
71.2061 61.8423 li
71.5063 61.5425 li
71.8062 61.1426 li
72.106 60.7422 li
72.4063 60.4424 li
72.7061 60.0425 li
73.0063 59.7422 li
73.3062 59.3423 li
73.5063 59.0425 li
73.8062 58.6426 li
74.106 58.2422 li
74.4063 57.9424 li
74.7061 57.5425 li
75.0063 57.2427 li
75.3062 56.8428 li
75.606 56.5425 li
75.9063 56.1426 li
76.2061 55.8428 li
76.5063 55.4424 li
76.8062 55.0425 li
77.106 54.7427 li
77.4063 54.3428 li
77.7061 54.0425 li
78.0063 53.6426 li
78.3062 53.3428 li
78.5063 52.9424 li
78.8062 52.5425 li
79.106 52.2427 li
79.4063 51.8428 li
79.7061 51.5425 li
80.0063 51.1426 li
80.3062 50.8428 li
80.606 50.4424 li
80.9063 50.0425 li
81.106 49.7427 li
81.4063 49.3428 li
81.7061 49.0425 li
82.0063 48.6426 li
82.3062 48.3428 li
82.606 47.9424 li
82.9063 47.6426 li
83.1064 47.2427 li
83.4063 46.8428 li
83.7061 46.5425 li
84.0063 46.1426 li
84.3062 45.8428 li
84.6064 45.4424 li
84.8062 45.1426 li
85.1064 44.7427 li
85.4063 44.3423 li
85.7061 44.0425 li
86.0063 43.6426 li
86.2061 43.3423 li
86.5063 42.9424 li
86.8062 42.6426 li
87.1064 42.2427 li
87.4063 41.9424 li
87.6064 41.5425 li
87.9063 41.1426 li
88.2061 40.8423 li
88.5063 40.4424 li
88.7061 40.1426 li
89.0063 39.7422 li
89.3062 39.4424 li
89.6064 39.0425 li
89.8062 38.6426 li
90.1064 38.3423 li
90.4063 37.9424 li
90.7061 37.6426 li
90.9063 37.2422 li
91.2061 36.9424 li
91.5063 36.5425 li
91.7061 36.2422 li
92.0063 35.8423 li
92.3062 35.4424 li
92.5063 35.1426 li
92.8062 34.7422 li
93.1064 34.4424 li
93.3062 34.0425 li
93.6064 33.7422 li
93.9063 33.3423 li
94.1064 32.9424 li
94.4063 32.6426 li
94.7065 32.2422 li
94.9063 31.9424 li
95.2065 31.5425 li
95.5063 31.2422 li
95.7065 30.8423 li
96.0063 30.4424 li
96.3062 30.1426 li
96.5063 29.7422 li
96.8062 29.4424 li
97.0063 29.0425 li
97.3062 28.7422 li
97.6064 28.3423 li
97.8062 28.0425 li
98.1064 27.6426 li
98.3062 27.2422 li
98.6064 26.9424 li
98.8062 26.5425 li
99.1064 26.2422 li
99.3062 25.8423 li
99.6064 25.5425 li
99.9063 25.1426 li
100.106 24.7422 li
100.406 24.4424 li
100.606 24.0425 li
100.906 23.7422 li
101.106 23.3423 li
101.406 23.0425 li
101.606 22.6426 li
101.906 22.3423 li
102.106 21.9424 li
102.406 21.5425 li
102.606 21.2422 li
102.807 20.8423 li
103.106 20.5425 li
103.306 20.1426 li
103.606 19.8428 li
103.806 19.4424 li
104.106 19.0425 li
104.306 18.7427 li
104.606 18.3428 li
104.806 18.0425 li
105.006 17.6426 li
105.306 17.3428 li
105.506 16.9424 li
105.806 16.5425 li
106.006 16.2427 li
106.206 15.8428 li
106.506 15.5425 li
106.706 15.1426 li
106.906 14.8428 li
107.206 14.4424 li
107.406 14.1426 li
107.606 13.7427 li
107.906 13.3428 li
108.106 13.0425 li
108.306 12.6426 li
108.606 12.3428 li
108.806 11.9424 li
109.006 11.6426 li
109.306 11.2427 li
109.506 10.8428 li
109.706 10.5425 li
109.906 10.1426 li
110.206 9.84277 li
110.406 9.44238 li
110.606 9.14258 li
110.806 8.74268 li
111.106 8.44238 li
111.306 8.04248 li
111.506 7.64258 li
111.706 7.34229 li
112.006 6.94238 li
112.206 6.64258 li
112.406 6.24268 li
112.606 5.94238 li
112.806 5.54248 li
42.8062 94.6426 mo
43.106 94.2427 li
43.4063 93.9424 li
43.7061 93.5425 li
44.106 93.2427 li
44.4063 92.8428 li
44.7061 92.5425 li
45.0063 92.1426 li
45.3062 91.7427 li
45.606 91.4424 li
45.9063 91.0425 li
46.2061 90.7427 li
46.606 90.3428 li
46.9063 90.0425 li
47.2061 89.6426 li
47.5063 89.3428 li
47.8062 88.9424 li
48.106 88.5425 li
48.4063 88.2427 li
48.7061 87.8428 li
49.106 87.5425 li
49.4063 87.1426 li
49.7061 86.8428 li
50.0063 86.4424 li
50.3062 86.0425 li
50.606 85.7427 li
50.9063 85.3428 li
51.2061 85.0425 li
51.606 84.6426 li
51.9063 84.3428 li
52.2061 83.9424 li
52.5063 83.6426 li
52.8062 83.2427 li
53.106 82.8428 li
53.4063 82.5425 li
53.7061 82.1426 li
54.0063 81.8428 li
54.4063 81.4424 li
54.7061 81.1426 li
55.0063 80.7427 li
55.3062 80.3423 li
55.606 80.0425 li
55.9063 79.6426 li
56.2061 79.3423 li
56.5063 78.9424 li
56.8062 78.6426 li
57.106 78.2427 li
57.5063 77.8423 li
57.8062 77.5425 li
58.106 77.1426 li
58.4063 76.8423 li
58.7061 76.4424 li
59.0063 76.1426 li
59.3062 75.7422 li
59.606 75.4424 li
59.9063 75.0425 li
60.2061 74.6426 li
60.5063 74.3423 li
60.8062 73.9424 li
61.2061 73.6426 li
61.5063 73.2422 li
61.8062 72.9424 li
62.106 72.5425 li
62.4063 72.1426 li
62.7061 71.8423 li
63.0063 71.4424 li
63.3062 71.1426 li
63.606 70.7422 li
63.9063 70.4424 li
64.2061 70.0425 li
64.5063 69.7422 li
64.8062 69.3423 li
65.106 68.9424 li
65.4063 68.6426 li
65.7061 68.2422 li
66.0063 67.9424 li
66.3062 67.5425 li
66.606 67.2422 li
67.0063 66.8423 li
67.3062 66.4424 li
67.606 66.1426 li
67.9063 65.7422 li
68.2061 65.4424 li
68.5063 65.0425 li
68.8062 64.7422 li
69.106 64.3423 li
69.4063 63.9424 li
69.7061 63.6426 li
70.0063 63.2422 li
70.3062 62.9424 li
70.606 62.5425 li
70.9063 62.2422 li
71.2061 61.8423 li
71.5063 61.5425 li
71.8062 61.1426 li
72.106 60.7422 li
72.4063 60.4424 li
72.7061 60.0425 li
73.0063 59.7422 li
73.3062 59.3423 li
73.5063 59.0425 li
73.8062 58.6426 li
74.106 58.2422 li
74.4063 57.9424 li
74.7061 57.5425 li
75.0063 57.2427 li
75.3062 56.8428 li
75.606 56.5425 li
75.9063 56.1426 li
76.2061 55.8428 li
76.5063 55.4424 li
76.8062 55.0425 li
77.106 54.7427 li
77.4063 54.3428 li
77.7061 54.0425 li
78.0063 53.6426 li
78.3062 53.3428 li
78.5063 52.9424 li
78.8062 52.5425 li
79.106 52.2427 li
79.4063 51.8428 li
79.7061 51.5425 li
80.0063 51.1426 li
80.3062 50.8428 li
80.606 50.4424 li
80.9063 50.0425 li
81.106 49.7427 li
81.4063 49.3428 li
81.7061 49.0425 li
82.0063 48.6426 li
82.3062 48.3428 li
82.606 47.9424 li
82.9063 47.6426 li
83.1064 47.2427 li
83.4063 46.8428 li
83.7061 46.5425 li
84.0063 46.1426 li
84.3062 45.8428 li
84.6064 45.4424 li
84.8062 45.1426 li
85.1064 44.7427 li
85.4063 44.3423 li
85.7061 44.0425 li
86.0063 43.6426 li
86.2061 43.3423 li
86.5063 42.9424 li
86.8062 42.6426 li
87.1064 42.2427 li
87.4063 41.9424 li
87.6064 41.5425 li
87.9063 41.1426 li
88.2061 40.8423 li
88.5063 40.4424 li
88.7061 40.1426 li
89.0063 39.7422 li
89.3062 39.4424 li
89.6064 39.0425 li
89.8062 38.6426 li
90.1064 38.3423 li
90.4063 37.9424 li
90.7061 37.6426 li
90.9063 37.2422 li
91.2061 36.9424 li
91.5063 36.5425 li
91.7061 36.2422 li
92.0063 35.8423 li
92.3062 35.4424 li
92.5063 35.1426 li
92.8062 34.7422 li
93.1064 34.4424 li
93.3062 34.0425 li
93.6064 33.7422 li
93.9063 33.3423 li
94.1064 32.9424 li
94.4063 32.6426 li
94.7065 32.2422 li
94.9063 31.9424 li
95.2065 31.5425 li
95.5063 31.2422 li
95.7065 30.8423 li
96.0063 30.4424 li
96.3062 30.1426 li
96.5063 29.7422 li
96.8062 29.4424 li
97.0063 29.0425 li
97.3062 28.7422 li
97.6064 28.3423 li
97.8062 28.0425 li
98.1064 27.6426 li
98.3062 27.2422 li
98.6064 26.9424 li
98.8062 26.5425 li
99.1064 26.2422 li
99.3062 25.8423 li
99.6064 25.5425 li
99.9063 25.1426 li
100.106 24.7422 li
100.406 24.4424 li
100.606 24.0425 li
100.906 23.7422 li
101.106 23.3423 li
101.406 23.0425 li
101.606 22.6426 li
101.906 22.3423 li
102.106 21.9424 li
102.406 21.5425 li
102.606 21.2422 li
102.807 20.8423 li
103.106 20.5425 li
103.306 20.1426 li
103.606 19.8428 li
103.806 19.4424 li
104.106 19.0425 li
104.306 18.7427 li
104.606 18.3428 li
104.806 18.0425 li
105.006 17.6426 li
105.306 17.3428 li
105.506 16.9424 li
105.806 16.5425 li
106.006 16.2427 li
106.206 15.8428 li
106.506 15.5425 li
106.706 15.1426 li
106.906 14.8428 li
107.206 14.4424 li
107.406 14.1426 li
107.606 13.7427 li
107.906 13.3428 li
108.106 13.0425 li
108.306 12.6426 li
108.606 12.3428 li
108.806 11.9424 li
109.006 11.6426 li
109.306 11.2427 li
109.506 10.8428 li
109.706 10.5425 li
109.906 10.1426 li
110.206 9.84277 li
110.406 9.44238 li
110.606 9.14258 li
110.806 8.74268 li
111.106 8.44238 li
111.306 8.04248 li
111.506 7.64258 li
111.706 7.34229 li
112.006 6.94238 li
112.206 6.64258 li
112.406 6.24268 li
112.606 5.94238 li
112.806 5.54248 li
42.8062 94.6426 mo
43.2061 94.2427 li
43.606 93.9424 li
44.0063 93.5425 li
44.4063 93.2427 li
44.8062 92.8428 li
45.2061 92.5425 li
45.7061 92.1426 li
46.106 91.7427 li
46.5063 91.4424 li
46.9063 91.0425 li
47.3062 90.7427 li
47.7061 90.3428 li
48.106 90.0425 li
48.5059 89.6426 li
48.9063 89.3428 li
49.3062 88.9424 li
49.7061 88.5425 li
50.106 88.2427 li
50.5059 87.8428 li
51.0059 87.5425 li
51.4058 87.1426 li
51.8062 86.8428 li
52.2061 86.4424 li
52.606 86.0425 li
53.0059 85.7427 li
53.4058 85.3428 li
53.8062 85.0425 li
54.2061 84.6426 li
54.606 84.3428 li
55.0059 83.9424 li
55.4058 83.6426 li
55.8062 83.2427 li
56.3062 82.8428 li
56.7061 82.5425 li
57.106 82.1426 li
57.5059 81.8428 li
57.9058 81.4424 li
58.3057 81.1426 li
58.7061 80.7427 li
59.106 80.3423 li
59.5059 80.0425 li
59.9058 79.6426 li
60.3057 79.3423 li
60.7056 78.9424 li
61.106 78.6426 li
61.5059 78.2427 li
62.0059 77.8423 li
62.4058 77.5425 li
62.8057 77.1426 li
63.2056 76.8423 li
63.606 76.4424 li
64.0059 76.1426 li
64.4058 75.7422 li
64.8057 75.4424 li
65.2056 75.0425 li
65.606 74.6426 li
66.0059 74.3423 li
66.4058 73.9424 li
66.8057 73.6426 li
67.2056 73.2422 li
67.6055 72.9424 li
68.0059 72.5425 li
68.5059 72.1426 li
68.9058 71.8423 li
69.3057 71.4424 li
69.7056 71.1426 li
70.1055 70.7422 li
70.5054 70.4424 li
70.9058 70.0425 li
71.3057 69.7422 li
71.7056 69.3423 li
72.1055 68.9424 li
72.5054 68.6426 li
72.9058 68.2422 li
73.3057 67.9424 li
73.7056 67.5425 li
74.1055 67.2422 li
74.5054 66.8423 li
74.9053 66.4424 li
75.3057 66.1426 li
75.8057 65.7422 li
76.2056 65.4424 li
76.6055 65.0425 li
77.0054 64.7422 li
77.4053 64.3423 li
77.8057 63.9424 li
78.2056 63.6426 li
78.6055 63.2422 li
79.0054 62.9424 li
79.4053 62.5425 li
79.8052 62.2422 li
80.2056 61.8423 li
80.6055 61.5425 li
81.0054 61.1426 li
81.4053 60.7422 li
81.8052 60.4424 li
82.2056 60.0425 li
82.6055 59.7422 li
83.0054 59.3423 li
83.4053 59.0425 li
83.8052 58.6426 li
84.2051 58.2422 li
84.6055 57.9424 li
85.0054 57.5425 li
85.4063 57.2427 li
85.8062 56.8428 li
86.2061 56.5425 li
86.606 56.1426 li
87.0063 55.8428 li
87.4063 55.4424 li
87.8062 55.0425 li
88.2061 54.7427 li
88.606 54.3428 li
89.0059 54.0425 li
89.4063 53.6426 li
89.8062 53.3428 li
90.2061 52.9424 li
90.606 52.5425 li
91.0059 52.2427 li
91.4063 51.8428 li
91.8062 51.5425 li
92.2061 51.1426 li
92.606 50.8428 li
93.0059 50.4424 li
93.4058 50.0425 li
93.8062 49.7427 li
94.2061 49.3428 li
94.606 49.0425 li
95.0059 48.6426 li
95.4058 48.3428 li
95.8062 47.9424 li
96.2061 47.6426 li
96.606 47.2427 li
97.0059 46.8428 li
97.4058 46.5425 li
97.8057 46.1426 li
98.2061 45.8428 li
98.606 45.4424 li
99.0059 45.1426 li
99.4058 44.7427 li
99.8057 44.3423 li
100.206 44.0425 li
100.606 43.6426 li
101.006 43.3423 li
101.306 42.9424 li
101.706 42.6426 li
102.106 42.2427 li
102.506 41.9424 li
102.906 41.5425 li
103.306 41.1426 li
103.706 40.8423 li
104.106 40.4424 li
104.506 40.1426 li
104.906 39.7422 li
105.306 39.4424 li
105.706 39.0425 li
106.006 38.6426 li
106.406 38.3423 li
106.806 37.9424 li
107.206 37.6426 li
107.606 37.2422 li
108.006 36.9424 li
108.406 36.5425 li
108.806 36.2422 li
109.106 35.8423 li
109.506 35.4424 li
109.906 35.1426 li
110.306 34.7422 li
110.706 34.4424 li
111.106 34.0425 li
111.506 33.7422 li
111.806 33.3423 li
112.206 32.9424 li
112.606 32.6426 li
113.006 32.2422 li
113.406 31.9424 li
113.806 31.5425 li
114.106 31.2422 li
114.506 30.8423 li
114.906 30.4424 li
115.306 30.1426 li
115.706 29.7422 li
116.006 29.4424 li
116.406 29.0425 li
116.806 28.7422 li
117.206 28.3423 li
117.506 28.0425 li
117.906 27.6426 li
118.307 27.2422 li
118.706 26.9424 li
119.105 26.5425 li
119.406 26.2422 li
119.807 25.8423 li
120.206 25.5425 li
120.506 25.1426 li
120.906 24.7422 li
121.307 24.4424 li
121.706 24.0425 li
122.006 23.7422 li
122.406 23.3423 li
122.605 23.0425 li
122.506 22.6426 li
122.307 22.3423 li
122.105 21.9424 li
121.906 21.5425 li
121.706 21.2422 li
121.506 20.8423 li
121.307 20.5425 li
121.206 20.1426 li
121.006 19.8428 li
120.807 19.4424 li
120.605 19.0425 li
120.406 18.7427 li
120.206 18.3428 li
120.006 18.0425 li
119.807 17.6426 li
119.606 17.3428 li
119.406 16.9424 li
119.206 16.5425 li
119.106 16.2427 li
118.906 15.8428 li
118.706 15.5425 li
118.506 15.1426 li
118.307 14.8428 li
118.106 14.4424 li
117.906 14.1426 li
117.706 13.7427 li
117.506 13.3428 li
117.306 13.0425 li
117.106 12.6426 li
116.806 12.3428 li
116.606 11.9424 li
116.406 11.6426 li
116.206 11.2427 li
116.006 10.8428 li
115.806 10.5425 li
115.606 10.1426 li
115.406 9.84277 li
115.207 9.44238 li
115.006 9.14258 li
114.806 8.74268 li
114.606 8.44238 li
114.306 8.04248 li
114.106 7.64258 li
113.906 7.34229 li
113.707 6.94238 li
113.506 6.64258 li
113.306 6.24268 li
113.106 5.94238 li
112.806 5.54248 li
141.506 94.6426 mo
141.506 94.2427 li
141.506 93.9424 li
141.506 93.5425 li
141.506 93.2427 li
141.506 92.8428 li
141.506 92.5425 li
141.506 92.1426 li
141.406 91.7427 li
141.406 91.4424 li
141.406 91.0425 li
141.406 90.7427 li
141.406 90.3428 li
141.406 90.0425 li
141.406 89.6426 li
141.406 89.3428 li
141.406 88.9424 li
141.307 88.5425 li
141.307 88.2427 li
141.307 87.8428 li
141.307 87.5425 li
141.307 87.1426 li
141.206 86.8428 li
141.206 86.4424 li
141.206 86.0425 li
141.206 85.7427 li
141.206 85.3428 li
141.105 85.0425 li
141.105 84.6426 li
141.105 84.3428 li
141.006 83.9424 li
141.006 83.6426 li
141.006 83.2427 li
141.006 82.8428 li
140.906 82.5425 li
140.906 82.1426 li
140.906 81.8428 li
140.807 81.4424 li
140.807 81.1426 li
140.706 80.7427 li
140.706 80.3423 li
140.706 80.0425 li
140.605 79.6426 li
140.605 79.3423 li
140.506 78.9424 li
140.506 78.6426 li
140.506 78.2427 li
140.406 77.8423 li
140.406 77.5425 li
140.307 77.1426 li
140.307 76.8423 li
140.206 76.4424 li
140.206 76.1426 li
140.105 75.7422 li
140.105 75.4424 li
140.006 75.0425 li
140.006 74.6426 li
139.906 74.3423 li
139.906 73.9424 li
139.807 73.6426 li
139.706 73.2422 li
139.706 72.9424 li
139.605 72.5425 li
139.605 72.1426 li
139.506 71.8423 li
139.406 71.4424 li
139.406 71.1426 li
139.307 70.7422 li
139.307 70.4424 li
139.206 70.0425 li
139.105 69.7422 li
139.105 69.3423 li
139.006 68.9424 li
138.906 68.6426 li
138.906 68.2422 li
138.807 67.9424 li
138.706 67.5425 li
138.605 67.2422 li
138.605 66.8423 li
138.506 66.4424 li
138.406 66.1426 li
138.307 65.7422 li
138.307 65.4424 li
138.206 65.0425 li
138.105 64.7422 li
138.006 64.3423 li
137.906 63.9424 li
137.906 63.6426 li
137.807 63.2422 li
137.706 62.9424 li
137.605 62.5425 li
137.506 62.2422 li
137.406 61.8423 li
137.307 61.5425 li
137.307 61.1426 li
137.206 60.7422 li
137.105 60.4424 li
137.006 60.0425 li
136.906 59.7422 li
136.807 59.3423 li
136.706 59.0425 li
136.605 58.6426 li
136.506 58.2422 li
136.406 57.9424 li
136.307 57.5425 li
136.206 57.2427 li
136.105 56.8428 li
136.006 56.5425 li
135.906 56.1426 li
135.807 55.8428 li
135.706 55.4424 li
135.605 55.0425 li
135.506 54.7427 li
135.406 54.3428 li
135.307 54.0425 li
135.206 53.6426 li
135.105 53.3428 li
135.006 52.9424 li
134.807 52.5425 li
134.706 52.2427 li
134.605 51.8428 li
134.506 51.5425 li
134.406 51.1426 li
134.307 50.8428 li
134.206 50.4424 li
134.006 50.0425 li
133.906 49.7427 li
133.807 49.3428 li
133.706 49.0425 li
133.605 48.6426 li
133.406 48.3428 li
133.307 47.9424 li
133.206 47.6426 li
133.105 47.2427 li
133.006 46.8428 li
132.807 46.5425 li
132.706 46.1426 li
132.605 45.8428 li
132.406 45.4424 li
132.307 45.1426 li
132.206 44.7427 li
132.105 44.3423 li
131.906 44.0425 li
131.807 43.6426 li
131.706 43.3423 li
131.506 42.9424 li
131.406 42.6426 li
131.206 42.2427 li
131.105 41.9424 li
131.006 41.5425 li
130.807 41.1426 li
130.706 40.8423 li
130.605 40.4424 li
130.406 40.1426 li
130.307 39.7422 li
130.105 39.4424 li
130.006 39.0425 li
129.807 38.6426 li
129.706 38.3423 li
129.506 37.9424 li
129.406 37.6426 li
129.206 37.2422 li
129.105 36.9424 li
129.006 36.5425 li
128.807 36.2422 li
128.605 35.8423 li
128.506 35.4424 li
128.307 35.1426 li
128.206 34.7422 li
128.006 34.4424 li
127.906 34.0425 li
127.706 33.7422 li
127.605 33.3423 li
127.406 32.9424 li
127.206 32.6426 li
127.105 32.2422 li
126.906 31.9424 li
126.807 31.5425 li
126.605 31.2422 li
126.406 30.8423 li
126.307 30.4424 li
126.105 30.1426 li
125.906 29.7422 li
125.807 29.4424 li
125.605 29.0425 li
125.406 28.7422 li
125.307 28.3423 li
125.105 28.0425 li
124.906 27.6426 li
124.807 27.2422 li
124.605 26.9424 li
124.406 26.5425 li
124.206 26.2422 li
124.105 25.8423 li
123.906 25.5425 li
123.706 25.1426 li
123.506 24.7422 li
123.406 24.4424 li
123.206 24.0425 li
123.006 23.7422 li
122.807 23.3423 li
122.605 23.0425 li
122.506 22.6426 li
122.307 22.3423 li
122.105 21.9424 li
121.906 21.5425 li
121.706 21.2422 li
121.506 20.8423 li
121.307 20.5425 li
121.206 20.1426 li
121.006 19.8428 li
120.807 19.4424 li
120.605 19.0425 li
120.406 18.7427 li
120.206 18.3428 li
120.006 18.0425 li
119.807 17.6426 li
119.606 17.3428 li
119.406 16.9424 li
119.206 16.5425 li
119.106 16.2427 li
118.906 15.8428 li
118.706 15.5425 li
118.506 15.1426 li
118.307 14.8428 li
118.106 14.4424 li
117.906 14.1426 li
117.706 13.7427 li
117.506 13.3428 li
117.306 13.0425 li
117.106 12.6426 li
116.806 12.3428 li
116.606 11.9424 li
116.406 11.6426 li
116.206 11.2427 li
116.006 10.8428 li
115.806 10.5425 li
115.606 10.1426 li
115.406 9.84277 li
115.207 9.44238 li
115.006 9.14258 li
114.806 8.74268 li
114.606 8.44238 li
114.306 8.04248 li
114.106 7.64258 li
113.906 7.34229 li
113.707 6.94238 li
113.506 6.64258 li
113.306 6.24268 li
113.106 5.94238 li
112.806 5.54248 li
141.506 94.6426 mo
141.506 94.2427 li
141.506 93.9424 li
141.506 93.5425 li
141.506 93.2427 li
141.506 92.8428 li
141.506 92.5425 li
141.506 92.1426 li
141.406 91.7427 li
141.406 91.4424 li
141.406 91.0425 li
141.406 90.7427 li
141.406 90.3428 li
141.406 90.0425 li
141.406 89.6426 li
141.406 89.3428 li
141.406 88.9424 li
141.307 88.5425 li
141.307 88.2427 li
141.307 87.8428 li
141.307 87.5425 li
141.307 87.1426 li
141.206 86.8428 li
141.206 86.4424 li
141.206 86.0425 li
141.206 85.7427 li
141.206 85.3428 li
141.105 85.0425 li
141.105 84.6426 li
141.105 84.3428 li
141.006 83.9424 li
141.006 83.6426 li
141.006 83.2427 li
141.006 82.8428 li
140.906 82.5425 li
140.906 82.1426 li
140.906 81.8428 li
140.807 81.4424 li
140.807 81.1426 li
140.706 80.7427 li
140.706 80.3423 li
140.706 80.0425 li
140.605 79.6426 li
140.605 79.3423 li
140.506 78.9424 li
140.506 78.6426 li
140.506 78.2427 li
140.406 77.8423 li
140.406 77.5425 li
140.307 77.1426 li
140.307 76.8423 li
140.206 76.4424 li
140.206 76.1426 li
140.105 75.7422 li
140.105 75.4424 li
140.006 75.0425 li
140.006 74.6426 li
139.906 74.3423 li
139.906 73.9424 li
139.807 73.6426 li
139.706 73.2422 li
139.706 72.9424 li
139.605 72.5425 li
139.605 72.1426 li
139.506 71.8423 li
139.406 71.4424 li
139.406 71.1426 li
139.307 70.7422 li
139.307 70.4424 li
139.206 70.0425 li
139.105 69.7422 li
139.105 69.3423 li
139.006 68.9424 li
138.906 68.6426 li
138.906 68.2422 li
138.807 67.9424 li
138.706 67.5425 li
138.605 67.2422 li
138.605 66.8423 li
138.506 66.4424 li
138.406 66.1426 li
138.307 65.7422 li
138.307 65.4424 li
138.206 65.0425 li
138.105 64.7422 li
138.006 64.3423 li
137.906 63.9424 li
137.906 63.6426 li
137.807 63.2422 li
137.706 62.9424 li
137.605 62.5425 li
137.506 62.2422 li
137.406 61.8423 li
137.307 61.5425 li
137.307 61.1426 li
137.206 60.7422 li
137.105 60.4424 li
137.006 60.0425 li
136.906 59.7422 li
136.807 59.3423 li
136.706 59.0425 li
136.605 58.6426 li
136.506 58.2422 li
136.406 57.9424 li
136.307 57.5425 li
136.206 57.2427 li
136.105 56.8428 li
136.006 56.5425 li
135.906 56.1426 li
135.807 55.8428 li
135.706 55.4424 li
135.605 55.0425 li
135.506 54.7427 li
135.406 54.3428 li
135.307 54.0425 li
135.206 53.6426 li
135.105 53.3428 li
135.006 52.9424 li
134.807 52.5425 li
134.706 52.2427 li
134.605 51.8428 li
134.506 51.5425 li
134.406 51.1426 li
134.307 50.8428 li
134.206 50.4424 li
134.006 50.0425 li
133.906 49.7427 li
133.807 49.3428 li
133.706 49.0425 li
133.605 48.6426 li
133.406 48.3428 li
133.307 47.9424 li
133.206 47.6426 li
133.105 47.2427 li
133.006 46.8428 li
132.807 46.5425 li
132.706 46.1426 li
132.605 45.8428 li
132.406 45.4424 li
132.307 45.1426 li
132.206 44.7427 li
132.105 44.3423 li
131.906 44.0425 li
131.807 43.6426 li
131.706 43.3423 li
131.506 42.9424 li
131.406 42.6426 li
131.206 42.2427 li
131.105 41.9424 li
131.006 41.5425 li
130.807 41.1426 li
130.706 40.8423 li
130.605 40.4424 li
130.406 40.1426 li
130.307 39.7422 li
130.105 39.4424 li
130.006 39.0425 li
129.807 38.6426 li
129.706 38.3423 li
129.506 37.9424 li
129.406 37.6426 li
129.206 37.2422 li
129.105 36.9424 li
129.006 36.5425 li
128.807 36.2422 li
128.605 35.8423 li
128.506 35.4424 li
128.307 35.1426 li
128.206 34.7422 li
128.006 34.4424 li
127.906 34.0425 li
127.706 33.7422 li
127.605 33.3423 li
127.406 32.9424 li
127.206 32.6426 li
127.105 32.2422 li
126.906 31.9424 li
126.807 31.5425 li
126.605 31.2422 li
126.406 30.8423 li
126.307 30.4424 li
126.105 30.1426 li
125.906 29.7422 li
125.807 29.4424 li
125.605 29.0425 li
125.406 28.7422 li
125.307 28.3423 li
125.105 28.0425 li
124.906 27.6426 li
124.807 27.2422 li
124.605 26.9424 li
124.406 26.5425 li
124.206 26.2422 li
124.105 25.8423 li
123.906 25.5425 li
123.706 25.1426 li
123.506 24.7422 li
123.406 24.4424 li
123.206 24.0425 li
123.006 23.7422 li
122.807 23.3423 li
122.807 23.0425 li
123.105 22.6426 li
123.506 22.3423 li
123.906 21.9424 li
124.206 21.5425 li
124.605 21.2422 li
125.006 20.8423 li
125.307 20.5425 li
125.706 20.1426 li
126.105 19.8428 li
126.406 19.4424 li
126.807 19.0425 li
127.206 18.7427 li
127.506 18.3428 li
127.906 18.0425 li
128.307 17.6426 li
128.605 17.3428 li
129.006 16.9424 li
129.307 16.5425 li
129.706 16.2427 li
130.106 15.8428 li
130.406 15.5425 li
130.807 15.1426 li
131.106 14.8428 li
131.506 14.4424 li
131.807 14.1426 li
132.206 13.7427 li
132.506 13.3428 li
132.906 13.0425 li
133.206 12.6426 li
133.606 12.3428 li
133.906 11.9424 li
134.307 11.6426 li
134.606 11.2427 li
135.006 10.8428 li
135.307 10.5425 li
135.706 10.1426 li
136.006 9.84277 li
136.406 9.44238 li
136.706 9.14258 li
137.106 8.74268 li
137.406 8.44238 li
137.706 8.04248 li
138.106 7.64258 li
138.406 7.34229 li
138.807 6.94238 li
139.106 6.64258 li
139.406 6.24268 li
139.807 5.94238 li
140.106 5.54248 li
141.506 94.6426 mo
141.506 94.2427 li
141.506 93.9424 li
141.506 93.5425 li
141.506 93.2427 li
141.506 92.8428 li
141.506 92.5425 li
141.506 92.1426 li
141.506 91.7427 li
141.506 91.4424 li
141.506 91.0425 li
141.506 90.7427 li
141.506 90.3428 li
141.506 90.0425 li
141.506 89.6426 li
141.506 89.3428 li
141.506 88.9424 li
141.506 88.5425 li
141.506 88.2427 li
141.506 87.8428 li
141.506 87.5425 li
141.506 87.1426 li
141.506 86.8428 li
141.506 86.4424 li
141.406 86.0425 li
141.406 85.7427 li
141.406 85.3428 li
141.406 85.0425 li
141.406 84.6426 li
141.406 84.3428 li
141.406 83.9424 li
141.406 83.6426 li
141.406 83.2427 li
141.406 82.8428 li
141.406 82.5425 li
141.406 82.1426 li
141.406 81.8428 li
141.406 81.4424 li
141.406 81.1426 li
141.406 80.7427 li
141.406 80.3423 li
141.406 80.0425 li
141.406 79.6426 li
141.406 79.3423 li
141.406 78.9424 li
141.406 78.6426 li
141.406 78.2427 li
141.406 77.8423 li
141.406 77.5425 li
141.406 77.1426 li
141.406 76.8423 li
141.406 76.4424 li
141.307 76.1426 li
141.307 75.7422 li
141.307 75.4424 li
141.307 75.0425 li
141.307 74.6426 li
141.307 74.3423 li
141.307 73.9424 li
141.307 73.6426 li
141.307 73.2422 li
141.307 72.9424 li
141.307 72.5425 li
141.307 72.1426 li
141.307 71.8423 li
141.307 71.4424 li
141.307 71.1426 li
141.307 70.7422 li
141.307 70.4424 li
141.307 70.0425 li
141.206 69.7422 li
141.206 69.3423 li
141.206 68.9424 li
141.206 68.6426 li
141.206 68.2422 li
141.206 67.9424 li
141.206 67.5425 li
141.206 67.2422 li
141.206 66.8423 li
141.206 66.4424 li
141.206 66.1426 li
141.206 65.7422 li
141.206 65.4424 li
141.206 65.0425 li
141.206 64.7422 li
141.105 64.3423 li
141.105 63.9424 li
141.105 63.6426 li
141.105 63.2422 li
141.105 62.9424 li
141.105 62.5425 li
141.105 62.2422 li
141.105 61.8423 li
141.105 61.5425 li
141.105 61.1426 li
141.105 60.7422 li
141.105 60.4424 li
141.105 60.0425 li
141.105 59.7422 li
141.006 59.3423 li
141.006 59.0425 li
141.006 58.6426 li
141.006 58.2422 li
141.006 57.9424 li
141.006 57.5425 li
141.006 57.2427 li
141.006 56.8428 li
141.006 56.5425 li
141.006 56.1426 li
141.006 55.8428 li
141.006 55.4424 li
141.006 55.0425 li
140.906 54.7427 li
140.906 54.3428 li
140.906 54.0425 li
140.906 53.6426 li
140.906 53.3428 li
140.906 52.9424 li
140.906 52.5425 li
140.906 52.2427 li
140.906 51.8428 li
140.906 51.5425 li
140.906 51.1426 li
140.906 50.8428 li
140.807 50.4424 li
140.807 50.0425 li
140.807 49.7427 li
140.807 49.3428 li
140.807 49.0425 li
140.807 48.6426 li
140.807 48.3428 li
140.807 47.9424 li
140.807 47.6426 li
140.807 47.2427 li
140.807 46.8428 li
140.807 46.5425 li
140.807 46.1426 li
140.706 45.8428 li
140.706 45.4424 li
140.706 45.1426 li
140.706 44.7427 li
140.706 44.3423 li
140.706 44.0425 li
140.706 43.6426 li
140.706 43.3423 li
140.706 42.9424 li
140.706 42.6426 li
140.706 42.2427 li
140.706 41.9424 li
140.605 41.5425 li
140.605 41.1426 li
140.605 40.8423 li
140.605 40.4424 li
140.605 40.1426 li
140.605 39.7422 li
140.605 39.4424 li
140.605 39.0425 li
140.605 38.6426 li
140.605 38.3423 li
140.605 37.9424 li
140.605 37.6426 li
140.605 37.2422 li
140.605 36.9424 li
140.506 36.5425 li
140.506 36.2422 li
140.506 35.8423 li
140.506 35.4424 li
140.506 35.1426 li
140.506 34.7422 li
140.506 34.4424 li
140.506 34.0425 li
140.506 33.7422 li
140.506 33.3423 li
140.506 32.9424 li
140.506 32.6426 li
140.506 32.2422 li
140.506 31.9424 li
140.406 31.5425 li
140.406 31.2422 li
140.406 30.8423 li
140.406 30.4424 li
140.406 30.1426 li
140.406 29.7422 li
140.406 29.4424 li
140.406 29.0425 li
140.406 28.7422 li
140.406 28.3423 li
140.406 28.0425 li
140.406 27.6426 li
140.406 27.2422 li
140.406 26.9424 li
140.406 26.5425 li
140.406 26.2422 li
140.406 25.8423 li
140.307 25.5425 li
140.307 25.1426 li
140.307 24.7422 li
140.307 24.4424 li
140.307 24.0425 li
140.307 23.7422 li
140.307 23.3423 li
140.307 23.0425 li
140.307 22.6426 li
140.307 22.3423 li
140.307 21.9424 li
140.307 21.5425 li
140.307 21.2422 li
140.307 20.8423 li
140.307 20.5425 li
140.307 20.1426 li
140.307 19.8428 li
140.307 19.4424 li
140.307 19.0425 li
140.307 18.7427 li
140.307 18.3428 li
140.307 18.0425 li
140.307 17.6426 li
140.307 17.3428 li
140.206 16.9424 li
140.206 16.5425 li
140.206 16.2427 li
140.206 15.8428 li
140.206 15.5425 li
140.206 15.1426 li
140.206 14.8428 li
140.206 14.4424 li
140.206 14.1426 li
140.206 13.7427 li
140.206 13.3428 li
140.206 13.0425 li
140.206 12.6426 li
140.206 12.3428 li
140.206 11.9424 li
140.206 11.6426 li
140.206 11.2427 li
140.206 10.8428 li
140.206 10.5425 li
140.206 10.1426 li
140.206 9.84277 li
140.206 9.44238 li
140.206 9.14258 li
140.206 8.74268 li
140.206 8.44238 li
140.206 8.04248 li
140.206 7.64258 li
140.206 7.34229 li
140.206 6.94238 li
140.206 6.64258 li
140.206 6.24268 li
140.206 5.94238 li
140.105 5.54248 li
141.506 94.6426 mo
141.506 94.2427 li
141.506 93.9424 li
141.506 93.5425 li
141.506 93.2427 li
141.506 92.8428 li
141.506 92.5425 li
141.506 92.1426 li
141.506 91.7427 li
141.506 91.4424 li
141.506 91.0425 li
141.506 90.7427 li
141.506 90.3428 li
141.506 90.0425 li
141.506 89.6426 li
141.506 89.3428 li
141.506 88.9424 li
141.506 88.5425 li
141.506 88.2427 li
141.506 87.8428 li
141.506 87.5425 li
141.506 87.1426 li
141.506 86.8428 li
141.506 86.4424 li
141.406 86.0425 li
141.406 85.7427 li
141.406 85.3428 li
141.406 85.0425 li
141.406 84.6426 li
141.406 84.3428 li
141.406 83.9424 li
141.406 83.6426 li
141.406 83.2427 li
141.406 82.8428 li
141.406 82.5425 li
141.406 82.1426 li
141.406 81.8428 li
141.406 81.4424 li
141.406 81.1426 li
141.406 80.7427 li
141.406 80.3423 li
141.406 80.0425 li
141.406 79.6426 li
141.406 79.3423 li
141.406 78.9424 li
141.406 78.6426 li
141.406 78.2427 li
141.406 77.8423 li
141.406 77.5425 li
141.406 77.1426 li
141.406 76.8423 li
141.406 76.4424 li
141.307 76.1426 li
141.307 75.7422 li
141.307 75.4424 li
141.307 75.0425 li
141.307 74.6426 li
141.307 74.3423 li
141.307 73.9424 li
141.307 73.6426 li
141.307 73.2422 li
141.307 72.9424 li
141.307 72.5425 li
141.307 72.1426 li
141.307 71.8423 li
141.307 71.4424 li
141.307 71.1426 li
141.307 70.7422 li
141.307 70.4424 li
141.307 70.0425 li
141.206 69.7422 li
141.206 69.3423 li
141.206 68.9424 li
141.206 68.6426 li
141.206 68.2422 li
141.206 67.9424 li
141.206 67.5425 li
141.206 67.2422 li
141.206 66.8423 li
141.206 66.4424 li
141.206 66.1426 li
141.206 65.7422 li
141.206 65.4424 li
141.206 65.0425 li
141.206 64.7422 li
141.105 64.3423 li
141.105 63.9424 li
141.105 63.6426 li
141.105 63.2422 li
141.105 62.9424 li
141.105 62.5425 li
141.105 62.2422 li
141.105 61.8423 li
141.105 61.5425 li
141.105 61.1426 li
141.105 60.7422 li
141.105 60.4424 li
141.105 60.0425 li
141.105 59.7422 li
141.006 59.3423 li
141.006 59.0425 li
141.006 58.6426 li
141.006 58.2422 li
141.006 57.9424 li
141.006 57.5425 li
141.006 57.2427 li
141.006 56.8428 li
141.006 56.5425 li
141.006 56.1426 li
141.006 55.8428 li
141.006 55.4424 li
141.006 55.0425 li
140.906 54.7427 li
140.906 54.3428 li
140.906 54.0425 li
140.906 53.6426 li
140.906 53.3428 li
140.906 52.9424 li
140.906 52.5425 li
140.906 52.2427 li
140.906 51.8428 li
140.906 51.5425 li
140.906 51.1426 li
140.906 50.8428 li
140.807 50.4424 li
140.807 50.0425 li
140.807 49.7427 li
140.807 49.3428 li
140.807 49.0425 li
140.807 48.6426 li
140.807 48.3428 li
140.807 47.9424 li
140.807 47.6426 li
140.807 47.2427 li
140.807 46.8428 li
140.807 46.5425 li
140.807 46.1426 li
140.706 45.8428 li
140.706 45.4424 li
140.706 45.1426 li
140.706 44.7427 li
140.706 44.3423 li
140.706 44.0425 li
140.706 43.6426 li
140.706 43.3423 li
140.706 42.9424 li
140.706 42.6426 li
140.706 42.2427 li
140.706 41.9424 li
140.605 41.5425 li
140.605 41.1426 li
140.605 40.8423 li
140.605 40.4424 li
140.605 40.1426 li
140.605 39.7422 li
140.605 39.4424 li
140.605 39.0425 li
140.605 38.6426 li
140.605 38.3423 li
140.605 37.9424 li
140.605 37.6426 li
140.605 37.2422 li
140.605 36.9424 li
140.506 36.5425 li
140.506 36.2422 li
140.506 35.8423 li
140.506 35.4424 li
140.506 35.1426 li
140.506 34.7422 li
140.506 34.4424 li
140.506 34.0425 li
140.506 33.7422 li
140.506 33.3423 li
140.506 32.9424 li
140.506 32.6426 li
140.506 32.2422 li
140.506 31.9424 li
140.406 31.5425 li
140.406 31.2422 li
140.406 30.8423 li
140.406 30.4424 li
140.406 30.1426 li
140.406 29.7422 li
140.406 29.4424 li
140.406 29.0425 li
140.406 28.7422 li
140.406 28.3423 li
140.406 28.0425 li
140.406 27.6426 li
140.406 27.2422 li
140.406 26.9424 li
140.406 26.5425 li
140.406 26.2422 li
140.406 25.8423 li
140.307 25.5425 li
140.307 25.1426 li
140.307 24.7422 li
140.307 24.4424 li
140.307 24.0425 li
140.307 23.7422 li
140.307 23.3423 li
140.307 23.0425 li
140.307 22.6426 li
140.307 22.3423 li
140.307 21.9424 li
140.307 21.5425 li
140.307 21.2422 li
140.307 20.8423 li
140.307 20.5425 li
140.307 20.1426 li
140.307 19.8428 li
140.307 19.4424 li
140.307 19.0425 li
140.307 18.7427 li
140.307 18.3428 li
140.307 18.0425 li
140.307 17.6426 li
140.307 17.3428 li
140.206 16.9424 li
140.206 16.5425 li
140.206 16.2427 li
140.206 15.8428 li
140.206 15.5425 li
140.206 15.1426 li
140.206 14.8428 li
140.206 14.4424 li
140.206 14.1426 li
140.206 13.7427 li
140.206 13.3428 li
140.206 13.0425 li
140.206 12.6426 li
140.206 12.3428 li
140.206 11.9424 li
140.206 11.6426 li
140.206 11.2427 li
140.206 10.8428 li
140.206 10.5425 li
140.206 10.1426 li
140.206 9.84277 li
140.206 9.44238 li
140.206 9.14258 li
140.206 8.74268 li
140.206 8.44238 li
140.206 8.04248 li
140.206 7.64258 li
140.206 7.34229 li
140.206 6.94238 li
140.206 6.64258 li
140.206 6.24268 li
140.206 5.94238 li
140.206 5.54248 li
141.506 94.6426 mo
141.506 94.2427 li
141.506 93.9424 li
141.506 93.5425 li
141.506 93.2427 li
141.506 92.8428 li
141.506 92.5425 li
141.506 92.1426 li
141.506 91.7427 li
141.506 91.4424 li
141.506 91.0425 li
141.506 90.7427 li
141.605 90.3428 li
141.605 90.0425 li
141.605 89.6426 li
141.605 89.3428 li
141.605 88.9424 li
141.605 88.5425 li
141.706 88.2427 li
141.706 87.8428 li
141.706 87.5425 li
141.706 87.1426 li
141.706 86.8428 li
141.807 86.4424 li
141.807 86.0425 li
141.807 85.7427 li
141.906 85.3428 li
141.906 85.0425 li
141.906 84.6426 li
141.906 84.3428 li
142.006 83.9424 li
142.006 83.6426 li
142.006 83.2427 li
142.105 82.8428 li
142.105 82.5425 li
142.206 82.1426 li
142.206 81.8428 li
142.206 81.4424 li
142.307 81.1426 li
142.307 80.7427 li
142.406 80.3423 li
142.406 80.0425 li
142.406 79.6426 li
142.506 79.3423 li
142.506 78.9424 li
142.606 78.6426 li
142.606 78.2427 li
142.706 77.8423 li
142.706 77.5425 li
142.807 77.1426 li
142.807 76.8423 li
142.906 76.4424 li
143.006 76.1426 li
143.006 75.7422 li
143.106 75.4424 li
143.106 75.0425 li
143.206 74.6426 li
143.206 74.3423 li
143.307 73.9424 li
143.406 73.6426 li
143.406 73.2422 li
143.506 72.9424 li
143.606 72.5425 li
143.606 72.1426 li
143.706 71.8423 li
143.807 71.4424 li
143.807 71.1426 li
143.906 70.7422 li
144.006 70.4424 li
144.006 70.0425 li
144.106 69.7422 li
144.207 69.3423 li
144.307 68.9424 li
144.307 68.6426 li
144.406 68.2422 li
144.506 67.9424 li
144.606 67.5425 li
144.707 67.2422 li
144.707 66.8423 li
144.807 66.4424 li
144.906 66.1426 li
145.006 65.7422 li
145.106 65.4424 li
145.207 65.0425 li
145.207 64.7422 li
145.307 64.3423 li
145.406 63.9424 li
145.506 63.6426 li
145.606 63.2422 li
145.707 62.9424 li
145.807 62.5425 li
145.906 62.2422 li
145.906 61.8423 li
146.006 61.5425 li
146.106 61.1426 li
146.207 60.7422 li
146.307 60.4424 li
146.406 60.0425 li
146.506 59.7422 li
146.606 59.3423 li
146.707 59.0425 li
146.807 58.6426 li
146.906 58.2422 li
147.006 57.9424 li
147.106 57.5425 li
147.206 57.2427 li
147.307 56.8428 li
147.406 56.5425 li
147.506 56.1426 li
147.605 55.8428 li
147.706 55.4424 li
147.807 55.0425 li
147.906 54.7427 li
148.105 54.3428 li
148.206 54.0425 li
148.307 53.6426 li
148.406 53.3428 li
148.506 52.9424 li
148.606 52.5425 li
148.706 52.2427 li
148.807 51.8428 li
148.906 51.5425 li
149.006 51.1426 li
149.206 50.8428 li
149.307 50.4424 li
149.406 50.0425 li
149.506 49.7427 li
149.606 49.3428 li
149.706 49.0425 li
149.906 48.6426 li
150.006 48.3428 li
150.106 47.9424 li
150.207 47.6426 li
150.307 47.2427 li
150.406 46.8428 li
150.606 46.5425 li
150.707 46.1426 li
150.807 45.8428 li
150.906 45.4424 li
151.106 45.1426 li
151.207 44.7427 li
151.307 44.3423 li
151.406 44.0425 li
151.606 43.6426 li
151.707 43.3423 li
151.807 42.9424 li
151.906 42.6426 li
152.106 42.2427 li
152.207 41.9424 li
152.307 41.5425 li
152.406 41.1426 li
152.606 40.8423 li
152.707 40.4424 li
152.807 40.1426 li
153.006 39.7422 li
153.106 39.4424 li
153.207 39.0425 li
153.307 38.6426 li
153.506 38.3423 li
153.606 37.9424 li
153.707 37.6426 li
153.906 37.2422 li
154.006 36.9424 li
154.106 36.5425 li
154.307 36.2422 li
154.406 35.8423 li
154.506 35.4424 li
154.707 35.1426 li
154.807 34.7422 li
154.906 34.4424 li
155.106 34.0425 li
155.207 33.7422 li
155.307 33.3423 li
155.506 32.9424 li
155.606 32.6426 li
155.707 32.2422 li
155.906 31.9424 li
156.006 31.5425 li
156.207 31.2422 li
156.307 30.8423 li
156.406 30.4424 li
156.606 30.1426 li
156.707 29.7422 li
156.807 29.4424 li
157.006 29.0425 li
157.106 28.7422 li
157.307 28.3423 li
157.406 28.0425 li
157.506 27.6426 li
157.707 27.2422 li
157.807 26.9424 li
158.006 26.5425 li
158.006 26.2422 li
157.807 25.8423 li
157.506 25.5425 li
157.207 25.1426 li
156.906 24.7422 li
156.606 24.4424 li
156.307 24.0425 li
156.106 23.7422 li
155.807 23.3423 li
155.506 23.0425 li
155.207 22.6426 li
154.906 22.3423 li
154.606 21.9424 li
154.307 21.5425 li
154.006 21.2422 li
153.707 20.8423 li
153.406 20.5425 li
153.106 20.1426 li
152.807 19.8428 li
152.506 19.4424 li
152.206 19.0425 li
151.906 18.7427 li
151.605 18.3428 li
151.307 18.0425 li
151.006 17.6426 li
150.706 17.3428 li
150.406 16.9424 li
150.105 16.5425 li
149.807 16.2427 li
149.506 15.8428 li
149.206 15.5425 li
148.906 15.1426 li
148.605 14.8428 li
148.206 14.4424 li
147.906 14.1426 li
147.605 13.7427 li
147.307 13.3428 li
147.006 13.0425 li
146.706 12.6426 li
146.307 12.3428 li
146.006 11.9424 li
145.706 11.6426 li
145.406 11.2427 li
145.105 10.8428 li
144.706 10.5425 li
144.406 10.1426 li
144.105 9.84277 li
143.807 9.44238 li
143.406 9.14258 li
143.105 8.74268 li
142.807 8.44238 li
142.406 8.04248 li
142.105 7.64258 li
141.807 7.34229 li
141.506 6.94238 li
141.105 6.64258 li
140.807 6.24268 li
140.506 5.94238 li
140.206 5.54248 li
141.506 94.6426 mo
141.506 94.2427 li
141.506 93.9424 li
141.506 93.5425 li
141.506 93.2427 li
141.506 92.8428 li
141.506 92.5425 li
141.506 92.1426 li
141.506 91.7427 li
141.506 91.4424 li
141.506 91.0425 li
141.506 90.7427 li
141.605 90.3428 li
141.605 90.0425 li
141.605 89.6426 li
141.605 89.3428 li
141.605 88.9424 li
141.605 88.5425 li
141.706 88.2427 li
141.706 87.8428 li
141.706 87.5425 li
141.706 87.1426 li
141.706 86.8428 li
141.807 86.4424 li
141.807 86.0425 li
141.807 85.7427 li
141.906 85.3428 li
141.906 85.0425 li
141.906 84.6426 li
141.906 84.3428 li
142.006 83.9424 li
142.006 83.6426 li
142.006 83.2427 li
142.105 82.8428 li
142.105 82.5425 li
142.206 82.1426 li
142.206 81.8428 li
142.206 81.4424 li
142.307 81.1426 li
142.307 80.7427 li
142.406 80.3423 li
142.406 80.0425 li
142.406 79.6426 li
142.506 79.3423 li
142.506 78.9424 li
142.606 78.6426 li
142.606 78.2427 li
142.706 77.8423 li
142.706 77.5425 li
142.807 77.1426 li
142.807 76.8423 li
142.906 76.4424 li
143.006 76.1426 li
143.006 75.7422 li
143.106 75.4424 li
143.106 75.0425 li
143.206 74.6426 li
143.206 74.3423 li
143.307 73.9424 li
143.406 73.6426 li
143.406 73.2422 li
143.506 72.9424 li
143.606 72.5425 li
143.606 72.1426 li
143.706 71.8423 li
143.807 71.4424 li
143.807 71.1426 li
143.906 70.7422 li
144.006 70.4424 li
144.006 70.0425 li
144.106 69.7422 li
144.207 69.3423 li
144.307 68.9424 li
144.307 68.6426 li
144.406 68.2422 li
144.506 67.9424 li
144.606 67.5425 li
144.707 67.2422 li
144.707 66.8423 li
144.807 66.4424 li
144.906 66.1426 li
145.006 65.7422 li
145.106 65.4424 li
145.207 65.0425 li
145.207 64.7422 li
145.307 64.3423 li
145.406 63.9424 li
145.506 63.6426 li
145.606 63.2422 li
145.707 62.9424 li
145.807 62.5425 li
145.906 62.2422 li
145.906 61.8423 li
146.006 61.5425 li
146.106 61.1426 li
146.207 60.7422 li
146.307 60.4424 li
146.406 60.0425 li
146.506 59.7422 li
146.606 59.3423 li
146.707 59.0425 li
146.807 58.6426 li
146.906 58.2422 li
147.006 57.9424 li
147.106 57.5425 li
147.206 57.2427 li
147.307 56.8428 li
147.406 56.5425 li
147.506 56.1426 li
147.605 55.8428 li
147.706 55.4424 li
147.807 55.0425 li
147.906 54.7427 li
148.105 54.3428 li
148.206 54.0425 li
148.307 53.6426 li
148.406 53.3428 li
148.506 52.9424 li
148.606 52.5425 li
148.706 52.2427 li
148.807 51.8428 li
148.906 51.5425 li
149.006 51.1426 li
149.206 50.8428 li
149.307 50.4424 li
149.406 50.0425 li
149.506 49.7427 li
149.606 49.3428 li
149.706 49.0425 li
149.906 48.6426 li
150.006 48.3428 li
150.106 47.9424 li
150.207 47.6426 li
150.307 47.2427 li
150.406 46.8428 li
150.606 46.5425 li
150.707 46.1426 li
150.807 45.8428 li
150.906 45.4424 li
151.106 45.1426 li
151.207 44.7427 li
151.307 44.3423 li
151.406 44.0425 li
151.606 43.6426 li
151.707 43.3423 li
151.807 42.9424 li
151.906 42.6426 li
152.106 42.2427 li
152.207 41.9424 li
152.307 41.5425 li
152.406 41.1426 li
152.606 40.8423 li
152.707 40.4424 li
152.807 40.1426 li
153.006 39.7422 li
153.106 39.4424 li
153.207 39.0425 li
153.307 38.6426 li
153.506 38.3423 li
153.606 37.9424 li
153.707 37.6426 li
153.906 37.2422 li
154.006 36.9424 li
154.106 36.5425 li
154.307 36.2422 li
154.406 35.8423 li
154.506 35.4424 li
154.707 35.1426 li
154.807 34.7422 li
154.906 34.4424 li
155.106 34.0425 li
155.207 33.7422 li
155.307 33.3423 li
155.506 32.9424 li
155.606 32.6426 li
155.707 32.2422 li
155.906 31.9424 li
156.006 31.5425 li
156.207 31.2422 li
156.307 30.8423 li
156.406 30.4424 li
156.606 30.1426 li
156.707 29.7422 li
156.807 29.4424 li
157.006 29.0425 li
157.106 28.7422 li
157.307 28.3423 li
157.406 28.0425 li
157.506 27.6426 li
157.707 27.2422 li
157.807 26.9424 li
158.006 26.5425 li
158.106 26.2422 li
158.207 25.8423 li
158.406 25.5425 li
158.506 25.1426 li
158.707 24.7422 li
158.807 24.4424 li
158.906 24.0425 li
159.106 23.7422 li
159.207 23.3423 li
159.406 23.0425 li
159.506 22.6426 li
159.606 22.3423 li
159.807 21.9424 li
159.906 21.5425 li
160.106 21.2422 li
160.207 20.8423 li
160.307 20.5425 li
160.506 20.1426 li
160.605 19.8428 li
160.807 19.4424 li
160.906 19.0425 li
161.006 18.7427 li
161.206 18.3428 li
161.307 18.0425 li
161.506 17.6426 li
161.605 17.3428 li
161.807 16.9424 li
161.906 16.5425 li
162.006 16.2427 li
162.206 15.8428 li
162.307 15.5425 li
162.506 15.1426 li
162.605 14.8428 li
162.706 14.4424 li
162.906 14.1426 li
163.006 13.7427 li
163.206 13.3428 li
163.307 13.0425 li
163.406 12.6426 li
163.605 12.3428 li
163.706 11.9424 li
163.906 11.6426 li
164.006 11.2427 li
164.105 10.8428 li
164.307 10.5425 li
164.406 10.1426 li
164.605 9.84277 li
164.706 9.44238 li
164.807 9.14258 li
165.006 8.74268 li
165.105 8.44238 li
165.307 8.04248 li
165.406 7.64258 li
165.506 7.34229 li
165.706 6.94238 li
165.807 6.64258 li
166.006 6.24268 li
166.105 5.94238 li
166.206 5.54248 li
186.307 94.6426 mo
186.307 94.2427 li
186.307 93.9424 li
186.307 93.5425 li
186.307 93.2427 li
186.206 92.8428 li
186.206 92.5425 li
186.206 92.1426 li
186.206 91.7427 li
186.206 91.4424 li
186.206 91.0425 li
186.206 90.7427 li
186.206 90.3428 li
186.105 90.0425 li
186.105 89.6426 li
186.105 89.3428 li
186.105 88.9424 li
186.006 88.5425 li
186.006 88.2427 li
186.006 87.8428 li
185.906 87.5425 li
185.906 87.1426 li
185.906 86.8428 li
185.807 86.4424 li
185.807 86.0425 li
185.807 85.7427 li
185.706 85.3428 li
185.706 85.0425 li
185.605 84.6426 li
185.605 84.3428 li
185.506 83.9424 li
185.506 83.6426 li
185.406 83.2427 li
185.406 82.8428 li
185.307 82.5425 li
185.307 82.1426 li
185.206 81.8428 li
185.206 81.4424 li
185.105 81.1426 li
185.006 80.7427 li
185.006 80.3423 li
184.906 80.0425 li
184.906 79.6426 li
184.807 79.3423 li
184.706 78.9424 li
184.605 78.6426 li
184.605 78.2427 li
184.506 77.8423 li
184.406 77.5425 li
184.307 77.1426 li
184.307 76.8423 li
184.206 76.4424 li
184.105 76.1426 li
184.006 75.7422 li
183.906 75.4424 li
183.807 75.0425 li
183.807 74.6426 li
183.706 74.3423 li
183.605 73.9424 li
183.506 73.6426 li
183.406 73.2422 li
183.307 72.9424 li
183.206 72.5425 li
183.105 72.1426 li
183.006 71.8423 li
182.906 71.4424 li
182.807 71.1426 li
182.706 70.7422 li
182.605 70.4424 li
182.506 70.0425 li
182.307 69.7422 li
182.206 69.3423 li
182.105 68.9424 li
182.006 68.6426 li
181.906 68.2422 li
181.807 67.9424 li
181.706 67.5425 li
181.506 67.2422 li
181.406 66.8423 li
181.307 66.4424 li
181.206 66.1426 li
181.006 65.7422 li
180.906 65.4424 li
180.807 65.0425 li
180.605 64.7422 li
180.506 64.3423 li
180.406 63.9424 li
180.206 63.6426 li
180.105 63.2422 li
180.006 62.9424 li
179.807 62.5425 li
179.706 62.2422 li
179.506 61.8423 li
179.406 61.5425 li
179.206 61.1426 li
179.105 60.7422 li
178.906 60.4424 li
178.807 60.0425 li
178.605 59.7422 li
178.506 59.3423 li
178.307 59.0425 li
178.206 58.6426 li
178.006 58.2422 li
177.807 57.9424 li
177.706 57.5425 li
177.506 57.2427 li
177.406 56.8428 li
177.206 56.5425 li
177.006 56.1426 li
176.807 55.8428 li
176.706 55.4424 li
176.506 55.0425 li
176.307 54.7427 li
176.206 54.3428 li
176.006 54.0425 li
175.807 53.6426 li
175.605 53.3428 li
175.406 52.9424 li
175.307 52.5425 li
175.105 52.2427 li
174.906 51.8428 li
174.706 51.5425 li
174.506 51.1426 li
174.307 50.8428 li
174.106 50.4424 li
173.906 50.0425 li
173.706 49.7427 li
173.606 49.3428 li
173.406 49.0425 li
173.206 48.6426 li
173.006 48.3428 li
172.807 47.9424 li
172.606 47.6426 li
172.406 47.2427 li
172.106 46.8428 li
171.906 46.5425 li
171.706 46.1426 li
171.506 45.8428 li
171.307 45.4424 li
171.106 45.1426 li
170.906 44.7427 li
170.707 44.3423 li
170.506 44.0425 li
170.207 43.6426 li
170.006 43.3423 li
169.807 42.9424 li
169.606 42.6426 li
169.406 42.2427 li
169.106 41.9424 li
168.906 41.5425 li
168.707 41.1426 li
168.506 40.8423 li
168.207 40.4424 li
168.006 40.1426 li
167.807 39.7422 li
167.506 39.4424 li
167.307 39.0425 li
167.106 38.6426 li
166.807 38.3423 li
166.606 37.9424 li
166.307 37.6426 li
166.106 37.2422 li
165.906 36.9424 li
165.606 36.5425 li
165.406 36.2422 li
165.106 35.8423 li
164.906 35.4424 li
164.606 35.1426 li
164.406 34.7422 li
164.106 34.4424 li
163.906 34.0425 li
163.606 33.7422 li
163.406 33.3423 li
163.106 32.9424 li
162.906 32.6426 li
162.606 32.2422 li
162.307 31.9424 li
162.106 31.5425 li
161.807 31.2422 li
161.606 30.8423 li
161.307 30.4424 li
161.006 30.1426 li
160.807 29.7422 li
160.506 29.4424 li
160.207 29.0425 li
160.006 28.7422 li
159.707 28.3423 li
159.406 28.0425 li
159.106 27.6426 li
158.906 27.2422 li
158.606 26.9424 li
158.307 26.5425 li
158.106 26.2422 li
158.207 25.8423 li
158.406 25.5425 li
158.506 25.1426 li
158.707 24.7422 li
158.807 24.4424 li
158.906 24.0425 li
159.106 23.7422 li
159.207 23.3423 li
159.406 23.0425 li
159.506 22.6426 li
159.606 22.3423 li
159.807 21.9424 li
159.906 21.5425 li
160.106 21.2422 li
160.207 20.8423 li
160.307 20.5425 li
160.506 20.1426 li
160.605 19.8428 li
160.807 19.4424 li
160.906 19.0425 li
161.006 18.7427 li
161.206 18.3428 li
161.307 18.0425 li
161.506 17.6426 li
161.605 17.3428 li
161.807 16.9424 li
161.906 16.5425 li
162.006 16.2427 li
162.206 15.8428 li
162.307 15.5425 li
162.506 15.1426 li
162.605 14.8428 li
162.706 14.4424 li
162.906 14.1426 li
163.006 13.7427 li
163.206 13.3428 li
163.307 13.0425 li
163.406 12.6426 li
163.605 12.3428 li
163.706 11.9424 li
163.906 11.6426 li
164.006 11.2427 li
164.105 10.8428 li
164.307 10.5425 li
164.406 10.1426 li
164.605 9.84277 li
164.706 9.44238 li
164.807 9.14258 li
165.006 8.74268 li
165.105 8.44238 li
165.307 8.04248 li
165.406 7.64258 li
165.506 7.34229 li
165.706 6.94238 li
165.807 6.64258 li
166.006 6.24268 li
166.105 5.94238 li
166.206 5.54248 li
186.307 94.6426 mo
186.307 94.2427 li
186.307 93.9424 li
186.307 93.5425 li
186.307 93.2427 li
186.307 92.8428 li
186.307 92.5425 li
186.307 92.1426 li
186.206 91.7427 li
186.206 91.4424 li
186.206 91.0425 li
186.206 90.7427 li
186.206 90.3428 li
186.206 90.0425 li
186.206 89.6426 li
186.206 89.3428 li
186.206 88.9424 li
186.206 88.5425 li
186.206 88.2427 li
186.105 87.8428 li
186.105 87.5425 li
186.105 87.1426 li
186.105 86.8428 li
186.105 86.4424 li
186.105 86.0425 li
186.006 85.7427 li
186.006 85.3428 li
186.006 85.0425 li
186.006 84.6426 li
186.006 84.3428 li
185.906 83.9424 li
185.906 83.6426 li
185.906 83.2427 li
185.906 82.8428 li
185.906 82.5425 li
185.807 82.1426 li
185.807 81.8428 li
185.807 81.4424 li
185.706 81.1426 li
185.706 80.7427 li
185.706 80.3423 li
185.706 80.0425 li
185.605 79.6426 li
185.605 79.3423 li
185.605 78.9424 li
185.506 78.6426 li
185.506 78.2427 li
185.506 77.8423 li
185.406 77.5425 li
185.406 77.1426 li
185.406 76.8423 li
185.307 76.4424 li
185.307 76.1426 li
185.307 75.7422 li
185.206 75.4424 li
185.206 75.0425 li
185.105 74.6426 li
185.105 74.3423 li
185.105 73.9424 li
185.006 73.6426 li
185.006 73.2422 li
184.906 72.9424 li
184.906 72.5425 li
184.807 72.1426 li
184.807 71.8423 li
184.807 71.4424 li
184.706 71.1426 li
184.706 70.7422 li
184.605 70.4424 li
184.605 70.0425 li
184.506 69.7422 li
184.506 69.3423 li
184.406 68.9424 li
184.406 68.6426 li
184.307 68.2422 li
184.307 67.9424 li
184.206 67.5425 li
184.105 67.2422 li
184.105 66.8423 li
184.006 66.4424 li
184.006 66.1426 li
183.906 65.7422 li
183.906 65.4424 li
183.807 65.0425 li
183.706 64.7422 li
183.706 64.3423 li
183.605 63.9424 li
183.605 63.6426 li
183.506 63.2422 li
183.406 62.9424 li
183.406 62.5425 li
183.307 62.2422 li
183.307 61.8423 li
183.206 61.5425 li
183.105 61.1426 li
183.105 60.7422 li
183.006 60.4424 li
182.906 60.0425 li
182.906 59.7422 li
182.807 59.3423 li
182.706 59.0425 li
182.605 58.6426 li
182.605 58.2422 li
182.506 57.9424 li
182.406 57.5425 li
182.406 57.2427 li
182.307 56.8428 li
182.206 56.5425 li
182.105 56.1426 li
182.105 55.8428 li
182.006 55.4424 li
181.906 55.0425 li
181.807 54.7427 li
181.807 54.3428 li
181.706 54.0425 li
181.605 53.6426 li
181.506 53.3428 li
181.406 52.9424 li
181.406 52.5425 li
181.307 52.2427 li
181.206 51.8428 li
181.105 51.5425 li
181.006 51.1426 li
180.906 50.8428 li
180.906 50.4424 li
180.807 50.0425 li
180.706 49.7427 li
180.605 49.3428 li
180.506 49.0425 li
180.406 48.6426 li
180.307 48.3428 li
180.206 47.9424 li
180.206 47.6426 li
180.105 47.2427 li
180.006 46.8428 li
179.906 46.5425 li
179.807 46.1426 li
179.706 45.8428 li
179.605 45.4424 li
179.506 45.1426 li
179.406 44.7427 li
179.307 44.3423 li
179.206 44.0425 li
179.105 43.6426 li
179.006 43.3423 li
178.906 42.9424 li
178.807 42.6426 li
178.706 42.2427 li
178.605 41.9424 li
178.605 41.5425 li
178.406 41.1426 li
178.406 40.8423 li
178.206 40.4424 li
178.105 40.1426 li
178.006 39.7422 li
177.906 39.4424 li
177.807 39.0425 li
177.706 38.6426 li
177.605 38.3423 li
177.506 37.9424 li
177.406 37.6426 li
177.307 37.2422 li
177.206 36.9424 li
177.105 36.5425 li
177.006 36.2422 li
176.906 35.8423 li
176.807 35.4424 li
176.706 35.1426 li
176.605 34.7422 li
176.506 34.4424 li
176.307 34.0425 li
176.206 33.7422 li
176.105 33.3423 li
176.006 32.9424 li
175.906 32.6426 li
175.807 32.2422 li
175.706 31.9424 li
175.605 31.5425 li
175.406 31.2422 li
175.307 30.8423 li
175.206 30.4424 li
175.105 30.1426 li
175.006 29.7422 li
174.906 29.4424 li
174.806 29.0425 li
174.605 28.7422 li
174.506 28.3423 li
174.406 28.0425 li
174.306 27.6426 li
174.206 27.2422 li
174.006 26.9424 li
173.906 26.5425 li
173.806 26.2422 li
173.706 25.8423 li
173.605 25.5425 li
173.406 25.1426 li
173.306 24.7422 li
173.206 24.4424 li
173.105 24.0425 li
173.006 23.7422 li
172.806 23.3423 li
172.705 23.0425 li
172.605 22.6426 li
172.506 22.3423 li
172.306 21.9424 li
172.205 21.5425 li
172.105 21.2422 li
172.006 20.8423 li
171.806 20.5425 li
171.705 20.1426 li
171.605 19.8428 li
171.406 19.4424 li
171.307 19.0425 li
171.206 18.7427 li
171.105 18.3428 li
170.906 18.0425 li
170.807 17.6426 li
170.706 17.3428 li
170.506 16.9424 li
170.406 16.5425 li
170.307 16.2427 li
170.206 15.8428 li
170.006 15.5425 li
169.906 15.1426 li
169.807 14.8428 li
169.605 14.4424 li
169.506 14.1426 li
169.406 13.7427 li
169.206 13.3428 li
169.105 13.0425 li
169.006 12.6426 li
168.807 12.3428 li
168.706 11.9424 li
168.605 11.6426 li
168.406 11.2427 li
168.307 10.8428 li
168.206 10.5425 li
168.006 10.1426 li
167.906 9.84277 li
167.706 9.44238 li
167.605 9.14258 li
167.506 8.74268 li
167.307 8.44238 li
167.206 8.04248 li
167.105 7.64258 li
166.906 7.34229 li
166.807 6.94238 li
166.706 6.64258 li
166.506 6.24268 li
166.406 5.94238 li
166.206 5.54248 li
186.307 94.6426 mo
186.307 94.2427 li
186.307 93.9424 li
186.307 93.5425 li
186.307 93.2427 li
186.307 92.8428 li
186.307 92.5425 li
186.307 92.1426 li
186.206 91.7427 li
186.206 91.4424 li
186.206 91.0425 li
186.206 90.7427 li
186.206 90.3428 li
186.206 90.0425 li
186.206 89.6426 li
186.206 89.3428 li
186.206 88.9424 li
186.206 88.5425 li
186.206 88.2427 li
186.105 87.8428 li
186.105 87.5425 li
186.105 87.1426 li
186.105 86.8428 li
186.105 86.4424 li
186.105 86.0425 li
186.006 85.7427 li
186.006 85.3428 li
186.006 85.0425 li
186.006 84.6426 li
186.006 84.3428 li
185.906 83.9424 li
185.906 83.6426 li
185.906 83.2427 li
185.906 82.8428 li
185.906 82.5425 li
185.807 82.1426 li
185.807 81.8428 li
185.807 81.4424 li
185.706 81.1426 li
185.706 80.7427 li
185.706 80.3423 li
185.706 80.0425 li
185.605 79.6426 li
185.605 79.3423 li
185.605 78.9424 li
185.506 78.6426 li
185.506 78.2427 li
185.506 77.8423 li
185.406 77.5425 li
185.406 77.1426 li
185.406 76.8423 li
185.307 76.4424 li
185.307 76.1426 li
185.307 75.7422 li
185.206 75.4424 li
185.206 75.0425 li
185.105 74.6426 li
185.105 74.3423 li
185.105 73.9424 li
185.006 73.6426 li
185.006 73.2422 li
184.906 72.9424 li
184.906 72.5425 li
184.807 72.1426 li
184.807 71.8423 li
184.807 71.4424 li
184.706 71.1426 li
184.706 70.7422 li
184.605 70.4424 li
184.605 70.0425 li
184.506 69.7422 li
184.506 69.3423 li
184.406 68.9424 li
184.406 68.6426 li
184.307 68.2422 li
184.307 67.9424 li
184.206 67.5425 li
184.105 67.2422 li
184.105 66.8423 li
184.006 66.4424 li
184.006 66.1426 li
183.906 65.7422 li
183.906 65.4424 li
183.807 65.0425 li
183.706 64.7422 li
183.706 64.3423 li
183.605 63.9424 li
183.605 63.6426 li
183.506 63.2422 li
183.406 62.9424 li
183.406 62.5425 li
183.307 62.2422 li
183.307 61.8423 li
183.206 61.5425 li
183.105 61.1426 li
183.105 60.7422 li
183.006 60.4424 li
182.906 60.0425 li
182.906 59.7422 li
182.807 59.3423 li
182.706 59.0425 li
182.605 58.6426 li
182.605 58.2422 li
182.506 57.9424 li
182.406 57.5425 li
182.406 57.2427 li
182.307 56.8428 li
182.206 56.5425 li
182.105 56.1426 li
182.105 55.8428 li
182.006 55.4424 li
181.906 55.0425 li
181.807 54.7427 li
181.807 54.3428 li
181.706 54.0425 li
181.605 53.6426 li
181.506 53.3428 li
181.406 52.9424 li
181.406 52.5425 li
181.307 52.2427 li
181.206 51.8428 li
181.105 51.5425 li
181.006 51.1426 li
180.906 50.8428 li
180.906 50.4424 li
180.807 50.0425 li
180.706 49.7427 li
180.605 49.3428 li
180.506 49.0425 li
180.406 48.6426 li
180.307 48.3428 li
180.206 47.9424 li
180.206 47.6426 li
180.105 47.2427 li
180.006 46.8428 li
179.906 46.5425 li
179.807 46.1426 li
179.706 45.8428 li
179.605 45.4424 li
179.506 45.1426 li
179.406 44.7427 li
179.307 44.3423 li
179.206 44.0425 li
179.105 43.6426 li
179.006 43.3423 li
178.906 42.9424 li
178.807 42.6426 li
178.706 42.2427 li
178.605 41.9424 li
178.605 41.5425 li
178.406 41.1426 li
178.406 40.8423 li
178.206 40.4424 li
178.105 40.1426 li
178.006 39.7422 li
177.906 39.4424 li
177.807 39.0425 li
177.706 38.6426 li
177.605 38.3423 li
177.506 37.9424 li
177.406 37.6426 li
177.307 37.2422 li
177.206 36.9424 li
177.105 36.5425 li
177.006 36.2422 li
176.906 35.8423 li
176.807 35.4424 li
176.706 35.1426 li
176.605 34.7422 li
176.506 34.4424 li
176.307 34.0425 li
176.206 33.7422 li
176.105 33.3423 li
176.006 32.9424 li
175.906 32.6426 li
175.807 32.2422 li
175.706 31.9424 li
175.605 31.5425 li
175.406 31.2422 li
175.307 30.8423 li
175.206 30.4424 li
175.105 30.1426 li
175.006 29.7422 li
174.906 29.4424 li
174.806 29.0425 li
174.605 28.7422 li
174.506 28.3423 li
174.406 28.0425 li
174.306 27.6426 li
174.206 27.2422 li
174.006 26.9424 li
173.906 26.5425 li
173.806 26.2422 li
173.706 25.8423 li
173.605 25.5425 li
173.406 25.1426 li
173.306 24.7422 li
173.206 24.4424 li
173.105 24.0425 li
173.006 23.7422 li
172.806 23.3423 li
172.705 23.0425 li
172.605 22.6426 li
172.506 22.3423 li
172.306 21.9424 li
172.205 21.5425 li
172.105 21.2422 li
172.006 20.8423 li
171.806 20.5425 li
171.705 20.1426 li
171.605 19.8428 li
171.406 19.4424 li
171.307 19.0425 li
171.206 18.7427 li
171.105 18.3428 li
170.906 18.0425 li
170.807 17.6426 li
170.706 17.3428 li
170.506 16.9424 li
170.406 16.5425 li
170.307 16.2427 li
170.206 15.8428 li
170.006 15.5425 li
169.906 15.1426 li
169.807 14.8428 li
169.605 14.4424 li
169.506 14.1426 li
169.406 13.7427 li
169.206 13.3428 li
169.105 13.0425 li
169.006 12.6426 li
168.807 12.3428 li
168.706 11.9424 li
168.605 11.6426 li
168.406 11.2427 li
168.307 10.8428 li
168.206 10.5425 li
168.006 10.1426 li
167.906 9.84277 li
167.706 9.44238 li
167.605 9.14258 li
167.506 8.74268 li
167.307 8.44238 li
167.206 8.04248 li
167.105 7.64258 li
166.906 7.34229 li
166.807 6.94238 li
166.706 6.64258 li
166.506 6.24268 li
166.406 5.94238 li
166.206 5.54248 li
.69482 .6318 .621515 .583612 cmyk
@
188.471 94.6426 mo
188.471 93.4253 187.483 92.4375 186.266 92.4375 cv
185.049 92.4375 184.061 93.4253 184.061 94.6426 cv
184.061 95.8599 185.049 96.8477 186.266 96.8477 cv
187.483 96.8477 188.471 95.8599 188.471 94.6426 cv
0 .993988 1 0 cmyk
@
1 lc
186.307 94.6426 mo
186.307 94.6426 li
@
0 lc
188.471 94.6426 mo
188.471 93.4253 187.483 92.4375 186.266 92.4375 cv
185.049 92.4375 184.061 93.4253 184.061 94.6426 cv
184.061 95.8599 185.049 96.8477 186.266 96.8477 cv
187.483 96.8477 188.471 95.8599 188.471 94.6426 cv
@
1 lc
186.307 94.6426 mo
186.307 94.6426 li
@
0 lc
188.471 94.6426 mo
188.471 93.4253 187.483 92.4375 186.266 92.4375 cv
185.049 92.4375 184.061 93.4253 184.061 94.6426 cv
184.061 95.8599 185.049 96.8477 186.266 96.8477 cv
187.483 96.8477 188.471 95.8599 188.471 94.6426 cv
@
1 lc
186.307 94.6426 mo
186.307 94.6426 li
@
0 lc
143.711 94.6426 mo
143.711 93.4253 142.723 92.4375 141.506 92.4375 cv
140.289 92.4375 139.301 93.4253 139.301 94.6426 cv
139.301 95.8599 140.289 96.8477 141.506 96.8477 cv
142.723 96.8477 143.711 95.8599 143.711 94.6426 cv
@
1 lc
141.506 94.6426 mo
141.506 94.6426 li
@
0 lc
143.711 94.6426 mo
143.711 93.4253 142.723 92.4375 141.506 92.4375 cv
140.289 92.4375 139.301 93.4253 139.301 94.6426 cv
139.301 95.8599 140.289 96.8477 141.506 96.8477 cv
142.723 96.8477 143.711 95.8599 143.711 94.6426 cv
@
1 lc
141.506 94.6426 mo
141.506 94.6426 li
@
0 lc
143.711 94.6426 mo
143.711 93.4253 142.723 92.4375 141.506 92.4375 cv
140.289 92.4375 139.301 93.4253 139.301 94.6426 cv
139.301 95.8599 140.289 96.8477 141.506 96.8477 cv
142.723 96.8477 143.711 95.8599 143.711 94.6426 cv
@
1 lc
141.506 94.6426 mo
141.506 94.6426 li
@
0 lc
143.711 94.6426 mo
143.711 93.4253 142.723 92.4375 141.506 92.4375 cv
140.289 92.4375 139.301 93.4253 139.301 94.6426 cv
139.301 95.8599 140.289 96.8477 141.506 96.8477 cv
142.723 96.8477 143.711 95.8599 143.711 94.6426 cv
@
1 lc
141.506 94.6426 mo
141.506 94.6426 li
@
0 lc
143.711 94.6426 mo
143.711 93.4253 142.723 92.4375 141.506 92.4375 cv
140.289 92.4375 139.301 93.4253 139.301 94.6426 cv
139.301 95.8599 140.289 96.8477 141.506 96.8477 cv
142.723 96.8477 143.711 95.8599 143.711 94.6426 cv
@
1 lc
141.506 94.6426 mo
141.506 94.6426 li
@
0 lc
143.711 94.6426 mo
143.711 93.4253 142.723 92.4375 141.506 92.4375 cv
140.289 92.4375 139.301 93.4253 139.301 94.6426 cv
139.301 95.8599 140.289 96.8477 141.506 96.8477 cv
142.723 96.8477 143.711 95.8599 143.711 94.6426 cv
@
1 lc
141.506 94.6426 mo
141.506 94.6426 li
@
0 lc
45.0713 94.6426 mo
45.0713 93.4253 44.0835 92.4375 42.8662 92.4375 cv
41.6489 92.4375 40.6611 93.4253 40.6611 94.6426 cv
40.6611 95.8599 41.6489 96.8477 42.8662 96.8477 cv
44.0835 96.8477 45.0713 95.8599 45.0713 94.6426 cv
@
1 lc
42.8062 94.6426 mo
42.8062 94.6426 li
@
0 lc
45.0713 94.6426 mo
45.0713 93.4253 44.0835 92.4375 42.8662 92.4375 cv
41.6489 92.4375 40.6611 93.4253 40.6611 94.6426 cv
40.6611 95.8599 41.6489 96.8477 42.8662 96.8477 cv
44.0835 96.8477 45.0713 95.8599 45.0713 94.6426 cv
@
1 lc
42.8062 94.6426 mo
42.8062 94.6426 li
@
0 lc
45.0713 94.6426 mo
45.0713 93.4253 44.0835 92.4375 42.8662 92.4375 cv
41.6489 92.4375 40.6611 93.4253 40.6611 94.6426 cv
40.6611 95.8599 41.6489 96.8477 42.8662 96.8477 cv
44.0835 96.8477 45.0713 95.8599 45.0713 94.6426 cv
@
1 lc
42.8062 94.6426 mo
42.8062 94.6426 li
@
0 lc
183.071 50.0024 mo
183.071 48.7852 182.084 47.7979 180.866 47.7979 cv
179.648 47.7979 178.661 48.7852 178.661 50.0024 cv
178.661 51.2197 179.648 52.2075 180.866 52.2075 cv
182.084 52.2075 183.071 51.2197 183.071 50.0024 cv
.883665 .769161 0 0 cmyk
@
1 lc
180.807 50.0425 mo
180.807 50.0425 li
@
0 lc
183.071 50.0024 mo
183.071 48.7852 182.084 47.7979 180.866 47.7979 cv
179.648 47.7979 178.661 48.7852 178.661 50.0024 cv
178.661 51.2197 179.648 52.2075 180.866 52.2075 cv
182.084 52.2075 183.071 51.2197 183.071 50.0024 cv
@
1 lc
180.807 50.0425 mo
180.807 50.0425 li
@
0 lc
176.111 50.0024 mo
176.111 48.7852 175.123 47.7979 173.906 47.7979 cv
172.689 47.7979 171.701 48.7852 171.701 50.0024 cv
171.701 51.2197 172.689 52.2075 173.906 52.2075 cv
175.123 52.2075 176.111 51.2197 176.111 50.0024 cv
@
1 lc
173.906 50.0425 mo
173.906 50.0425 li
@
0 lc
151.631 50.0024 mo
151.631 48.7852 150.643 47.7979 149.426 47.7979 cv
148.209 47.7979 147.221 48.7852 147.221 50.0024 cv
147.221 51.2197 148.209 52.2075 149.426 52.2075 cv
150.643 52.2075 151.631 51.2197 151.631 50.0024 cv
@
1 lc
149.406 50.0425 mo
149.406 50.0425 li
@
0 lc
151.631 50.0024 mo
151.631 48.7852 150.643 47.7979 149.426 47.7979 cv
148.209 47.7979 147.221 48.7852 147.221 50.0024 cv
147.221 51.2197 148.209 52.2075 149.426 52.2075 cv
150.643 52.2075 151.631 51.2197 151.631 50.0024 cv
@
1 lc
149.406 50.0425 mo
149.406 50.0425 li
@
0 lc
142.991 50.0024 mo
142.991 48.7852 142.004 47.7979 140.786 47.7979 cv
139.568 47.7979 138.581 48.7852 138.581 50.0024 cv
138.581 51.2197 139.568 52.2075 140.786 52.2075 cv
142.004 52.2075 142.991 51.2197 142.991 50.0024 cv
@
1 lc
140.807 50.0425 mo
140.807 50.0425 li
@
0 lc
142.991 50.0024 mo
142.991 48.7852 142.004 47.7979 140.786 47.7979 cv
139.568 47.7979 138.581 48.7852 138.581 50.0024 cv
138.581 51.2197 139.568 52.2075 140.786 52.2075 cv
142.004 52.2075 142.991 51.2197 142.991 50.0024 cv
@
1 lc
140.807 50.0425 mo
140.807 50.0425 li
@
0 lc
136.271 50.0024 mo
136.271 48.7852 135.283 47.7979 134.066 47.7979 cv
132.85 47.7979 131.861 48.7852 131.861 50.0024 cv
131.861 51.2197 132.85 52.2075 134.066 52.2075 cv
135.283 52.2075 136.271 51.2197 136.271 50.0024 cv
@
1 lc
134.006 50.0425 mo
134.006 50.0425 li
@
0 lc
136.271 50.0024 mo
136.271 48.7852 135.283 47.7979 134.066 47.7979 cv
132.85 47.7979 131.861 48.7852 131.861 50.0024 cv
131.861 51.2197 132.85 52.2075 134.066 52.2075 cv
135.283 52.2075 136.271 51.2197 136.271 50.0024 cv
@
1 lc
134.006 50.0425 mo
134.006 50.0425 li
@
0 lc
95.5913 50.0024 mo
95.5913 48.7852 94.6035 47.7979 93.3862 47.7979 cv
92.1689 47.7979 91.1812 48.7852 91.1812 50.0024 cv
91.1812 51.2197 92.1689 52.2075 93.3862 52.2075 cv
94.6035 52.2075 95.5913 51.2197 95.5913 50.0024 cv
@
1 lc
93.4063 50.0425 mo
93.4063 50.0425 li
@
0 lc
83.1113 50.0024 mo
83.1113 48.7852 82.1235 47.7979 80.9063 47.7979 cv
79.689 47.7979 78.7012 48.7852 78.7012 50.0024 cv
78.7012 51.2197 79.689 52.2075 80.9063 52.2075 cv
82.1235 52.2075 83.1113 51.2197 83.1113 50.0024 cv
@
1 lc
80.9063 50.0425 mo
80.9063 50.0425 li
@
0 lc
83.1113 50.0024 mo
83.1113 48.7852 82.1235 47.7979 80.9063 47.7979 cv
79.689 47.7979 78.7012 48.7852 78.7012 50.0024 cv
78.7012 51.2197 79.689 52.2075 80.9063 52.2075 cv
82.1235 52.2075 83.1113 51.2197 83.1113 50.0024 cv
@
1 lc
80.9063 50.0425 mo
80.9063 50.0425 li
@
0 lc
168.432 5.60254 mo
168.432 4.38525 167.443 3.39746 166.227 3.39746 cv
165.01 3.39746 164.021 4.38525 164.021 5.60254 cv
164.021 6.81982 165.01 7.80762 166.227 7.80762 cv
167.443 7.80762 168.432 6.81982 168.432 5.60254 cv
.874479 .348516 1 .300603 cmyk
@
1 lc
166.206 5.54248 mo
166.206 5.54248 li
@
0 lc
168.432 5.60254 mo
168.432 4.38525 167.443 3.39746 166.227 3.39746 cv
165.01 3.39746 164.021 4.38525 164.021 5.60254 cv
164.021 6.81982 165.01 7.80762 166.227 7.80762 cv
167.443 7.80762 168.432 6.81982 168.432 5.60254 cv
@
1 lc
166.206 5.54248 mo
166.206 5.54248 li
@
0 lc
168.432 5.60254 mo
168.432 4.38525 167.443 3.39746 166.227 3.39746 cv
165.01 3.39746 164.021 4.38525 164.021 5.60254 cv
164.021 6.81982 165.01 7.80762 166.227 7.80762 cv
167.443 7.80762 168.432 6.81982 168.432 5.60254 cv
@
1 lc
166.206 5.54248 mo
166.206 5.54248 li
@
0 lc
168.432 5.60254 mo
168.432 4.38525 167.443 3.39746 166.227 3.39746 cv
165.01 3.39746 164.021 4.38525 164.021 5.60254 cv
164.021 6.81982 165.01 7.80762 166.227 7.80762 cv
167.443 7.80762 168.432 6.81982 168.432 5.60254 cv
@
1 lc
166.206 5.54248 mo
166.206 5.54248 li
@
0 lc
142.391 5.60254 mo
142.391 4.38525 141.403 3.39746 140.186 3.39746 cv
138.969 3.39746 137.98 4.38525 137.98 5.60254 cv
137.98 6.81982 138.969 7.80762 140.186 7.80762 cv
141.403 7.80762 142.391 6.81982 142.391 5.60254 cv
@
1 lc
140.206 5.54248 mo
140.206 5.54248 li
@
0 lc
142.391 5.60254 mo
142.391 4.38525 141.403 3.39746 140.186 3.39746 cv
138.969 3.39746 137.98 4.38525 137.98 5.60254 cv
137.98 6.81982 138.969 7.80762 140.186 7.80762 cv
141.403 7.80762 142.391 6.81982 142.391 5.60254 cv
@
1 lc
140.206 5.54248 mo
140.206 5.54248 li
@
0 lc
142.271 5.60254 mo
142.271 4.38525 141.283 3.39746 140.066 3.39746 cv
138.85 3.39746 137.861 4.38525 137.861 5.60254 cv
137.861 6.81982 138.85 7.80762 140.066 7.80762 cv
141.283 7.80762 142.271 6.81982 142.271 5.60254 cv
@
1 lc
140.105 5.54248 mo
140.105 5.54248 li
@
0 lc
142.271 5.60254 mo
142.271 4.38525 141.283 3.39746 140.066 3.39746 cv
138.85 3.39746 137.861 4.38525 137.861 5.60254 cv
137.861 6.81982 138.85 7.80762 140.066 7.80762 cv
141.283 7.80762 142.271 6.81982 142.271 5.60254 cv
@
1 lc
140.105 5.54248 mo
140.105 5.54248 li
@
0 lc
115.031 5.60254 mo
115.031 4.38525 114.043 3.39746 112.826 3.39746 cv
111.609 3.39746 110.621 4.38525 110.621 5.60254 cv
110.621 6.81982 111.609 7.80762 112.826 7.80762 cv
114.043 7.80762 115.031 6.81982 115.031 5.60254 cv
@
1 lc
112.806 5.54248 mo
112.806 5.54248 li
@
0 lc
115.031 5.60254 mo
115.031 4.38525 114.043 3.39746 112.826 3.39746 cv
111.609 3.39746 110.621 4.38525 110.621 5.60254 cv
110.621 6.81982 111.609 7.80762 112.826 7.80762 cv
114.043 7.80762 115.031 6.81982 115.031 5.60254 cv
@
1 lc
112.806 5.54248 mo
112.806 5.54248 li
@
0 lc
115.031 5.60254 mo
115.031 4.38525 114.043 3.39746 112.826 3.39746 cv
111.609 3.39746 110.621 4.38525 110.621 5.60254 cv
110.621 6.81982 111.609 7.80762 112.826 7.80762 cv
114.043 7.80762 115.031 6.81982 115.031 5.60254 cv
@
1 lc
112.806 5.54248 mo
112.806 5.54248 li
@
0 lc
115.031 5.60254 mo
115.031 4.38525 114.043 3.39746 112.826 3.39746 cv
111.609 3.39746 110.621 4.38525 110.621 5.60254 cv
110.621 6.81982 111.609 7.80762 112.826 7.80762 cv
114.043 7.80762 115.031 6.81982 115.031 5.60254 cv
@
1 lc
112.806 5.54248 mo
112.806 5.54248 li
@
1 lw
0 lc
228.906 183.743 mo
225.207 183.743 li
42.8062 183.743 mo
46.5063 183.743 li
42.8062 5.54248 mo
42.8062 94.6426 li
228.906 94.6426 li
228.906 5.54248 li
42.8062 5.54248 li
42.8062 5.54248 li
cp
0 0 0 1 cmyk
@
228.906 161.442 mo
225.207 161.442 li
42.8062 161.442 mo
46.5063 161.442 li
@
228.906 139.143 mo
225.207 139.143 li
42.8062 139.143 mo
46.5063 139.143 li
@
228.906 116.942 mo
225.207 116.942 li
42.8062 116.942 mo
46.5063 116.942 li
@
42.8062 94.6426 mo
42.8062 183.743 li
228.906 183.743 li
228.906 94.6426 li
42.8062 94.6426 li
42.8062 94.6426 li
cp
228.906 94.6426 mo
228.906 98.3428 li
228.906 183.743 mo
228.906 180.042 li
166.906 94.6426 mo
166.906 98.3428 li
166.906 183.743 mo
166.906 180.042 li
104.806 94.6426 mo
104.806 98.3428 li
104.806 183.743 mo
104.806 180.042 li
42.8062 94.6426 mo
42.8062 98.3428 li
42.8062 183.743 mo
42.8062 180.042 li
228.906 94.6426 mo
225.207 94.6426 li
42.8062 94.6426 mo
46.5063 94.6426 li
@
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
HHBIWK+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B7C7F3AB181AB0C0D4CCBD039E0B840C2FD0290F361F5F
ADEFB5C66FFFF03997F6A3C47D6E28F621A8DA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HHBIWK+Times /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
/HHBIWK+Times*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /.notdef /two 2{/.notdef}rp /five 7{/.notdef}rp /equal 35{/.notdef}rp 
/a 26{/.notdef}rp /bar 131{/.notdef}rp]
HHBIWK+Times nf
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
73.5083 110.11 mo
(|)sh
HHBIWL+SymbolMT*1 [11 0 0 -11 0 0 ]msf
76.1333 110.11 mo
(k)sh
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
81.2974 110.11 mo
(|=)
[2.62891 0 ]xsh
HHBIWL+SymbolMT*1 [11 0 0 -11 0 0 ]msf
90.4771 110.11 mo
(p)sh
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
96.7349 110.11 mo
(/a)
[3.77295 0 ]xsh
.75 lw
62.0063 183.743 mo
62.106 183.442 li
62.2061 183.243 li
62.3062 183.042 li
62.4063 183.143 li
62.5063 183.343 li
62.7061 183.343 li
62.8062 183.243 li
62.9063 182.843 li
63.0063 182.643 li
63.106 182.442 li
63.3062 182.243 li
63.4063 181.643 li
63.5059 181.143 li
63.606 181.042 li
63.7061 181.343 li
63.9063 181.542 li
64.0059 181.343 li
64.106 180.942 li
64.2061 180.442 li
64.3062 180.143 li
64.4063 180.143 li
64.606 180.343 li
64.7061 180.542 li
64.8062 180.843 li
64.9058 180.942 li
65.0059 181.042 li
65.2061 180.743 li
65.3062 180.743 li
65.4058 180.542 li
65.5059 180.442 li
65.606 180.042 li
65.8062 179.843 li
65.9058 179.942 li
66.0059 180.042 li
66.106 180.143 li
66.2061 180.243 li
66.4058 180.442 li
66.5059 180.843 li
66.606 180.942 li
66.7061 181.143 li
66.8062 181.143 li
66.9058 181.442 li
67.106 181.542 li
67.2061 181.243 li
67.3057 180.843 li
67.4058 180.643 li
67.5059 180.743 li
67.7061 180.643 li
67.8057 180.643 li
67.9058 180.542 li
68.0059 180.743 li
68.106 180.743 li
68.3057 180.743 li
68.4058 180.442 li
68.5059 180.243 li
68.606 179.942 li
68.7056 179.843 li
68.8057 179.743 li
69.0059 179.942 li
69.106 179.942 li
69.2056 180.243 li
69.3057 180.243 li
69.4058 180.343 li
69.606 180.042 li
69.7056 179.942 li
69.8057 179.843 li
69.9058 179.843 li
70.0059 179.643 li
70.2056 179.343 li
70.3057 179.042 li
70.4058 178.643 li
70.5059 178.542 li
70.606 178.442 li
70.8057 178.542 li
70.9058 178.743 li
71.0059 178.942 li
71.1055 179.042 li
71.2056 178.942 li
71.3057 178.942 li
71.5059 178.942 li
71.6055 178.942 li
71.7056 178.743 li
71.8057 178.442 li
71.9058 178.143 li
72.1055 177.743 li
72.2056 177.442 li
72.3057 177.143 li
72.4058 177.243 li
72.5054 177.143 li
72.7056 177.042 li
72.8057 176.743 li
72.9058 176.442 li
73.0054 176.143 li
73.1055 175.743 li
73.3057 175.442 li
73.4058 175.542 li
73.5054 175.843 li
73.6055 176.143 li
73.7056 176.143 li
73.8057 176.042 li
74.0054 175.542 li
74.1055 174.942 li
74.2061 174.643 li
74.3062 174.643 li
74.4063 174.942 li
74.606 174.942 li
74.7061 174.743 li
74.8062 174.343 li
74.9063 174.343 li
75.0063 174.042 li
75.2061 173.643 li
75.3062 173.143 li
75.4063 173.042 li
75.5063 172.843 li
75.606 172.942 li
75.7061 172.843 li
75.9063 172.843 li
76.0063 172.542 li
76.106 172.243 li
76.2061 171.743 li
76.3062 171.542 li
76.5059 171.542 li
76.606 171.743 li
76.7061 172.042 li
76.8062 172.042 li
76.9063 171.542 li
77.106 170.743 li
77.2061 170.343 li
77.3062 170.042 li
77.4058 170.042 li
77.5059 169.643 li
77.7061 169.542 li
77.8062 169.343 li
77.9058 169.143 li
78.0059 168.743 li
78.106 168.542 li
78.2061 168.542 li
78.4058 168.243 li
78.5059 167.843 li
78.606 167.542 li
78.7061 167.942 li
78.8062 168.143 li
79.0059 168.042 li
79.106 167.442 li
79.2061 167.042 li
79.3062 167.042 li
79.4058 167.442 li
79.606 167.643 li
79.7061 167.743 li
79.8062 167.542 li
79.9058 167.442 li
80.0059 167.643 li
80.106 167.542 li
80.3057 167.442 li
80.4058 167.042 li
80.5059 166.643 li
80.606 166.243 li
80.7061 166.042 li
80.9058 166.042 li
81.0059 166.442 li
81.106 166.942 li
81.2056 167.343 li
81.3057 167.542 li
81.5059 167.343 li
81.606 167.143 li
81.7056 166.542 li
81.8057 166.343 li
81.9058 166.243 li
82.106 166.343 li
82.2056 166.343 li
82.3057 166.343 li
82.4058 166.243 li
82.5059 166.042 li
82.606 166.143 li
82.8057 166.243 li
82.9058 166.442 li
83.0059 166.442 li
83.106 166.643 li
83.2056 166.743 li
83.4058 166.843 li
83.5059 167.042 li
83.606 167.042 li
83.7056 166.942 li
83.8057 166.542 li
84.0059 166.343 li
84.1055 166.243 li
84.2056 166.343 li
84.3057 166.143 li
84.4058 165.843 li
84.6055 165.442 li
84.7056 165.442 li
84.8057 165.542 li
84.9058 165.942 li
85.0054 166.343 li
85.1055 166.743 li
85.3057 167.042 li
85.4058 166.942 li
85.5054 166.643 li
85.6055 166.343 li
85.7056 166.042 li
85.9058 165.643 li
86.0054 165.243 li
86.1055 165.442 li
86.2056 165.843 li
86.3057 166.243 li
86.5054 165.743 li
86.6055 164.743 li
86.7061 164.243 li
86.8062 164.143 li
86.9063 164.743 li
87.0063 164.942 li
87.2061 165.343 li
87.3062 165.042 li
87.4063 164.942 li
87.5063 164.743 li
87.606 164.643 li
87.8062 164.343 li
87.9063 164.143 li
88.0063 164.042 li
88.106 163.843 li
88.2061 163.643 li
88.4063 163.542 li
88.5063 163.143 li
88.606 162.942 li
88.7061 162.643 li
88.8062 162.442 li
89.0059 162.243 li
89.106 162.042 li
89.2061 162.243 li
89.3062 162.343 li
89.4063 162.042 li
89.5059 161.542 li
89.7061 161.243 li
89.8062 161.542 li
89.9063 162.042 li
90.0059 162.442 li
90.106 162.143 li
90.3062 161.542 li
90.4058 161.442 li
90.5059 161.743 li
90.606 162.442 li
90.7061 162.442 li
90.9058 161.843 li
91.0059 161.243 li
91.106 160.643 li
91.2061 160.643 li
91.3062 160.542 li
91.4058 160.442 li
91.606 160.243 li
91.7061 160.042 li
91.8062 160.042 li
91.9058 159.843 li
92.0059 159.542 li
92.2061 159.143 li
92.3062 159.143 li
92.4058 159.143 li
92.5059 159.042 li
92.606 158.643 li
92.8057 158.343 li
92.9058 158.143 li
93.0059 158.343 li
93.106 158.442 li
93.2061 158.343 li
93.4058 158.143 li
93.5059 158.042 li
93.606 158.243 li
93.7061 158.343 li
93.8057 158.343 li
93.9058 157.942 li
94.106 157.843 li
94.2056 158.243 li
94.3057 158.743 li
94.4058 159.143 li
94.5059 159.042 li
94.7056 158.643 li
94.8057 158.143 li
94.9058 157.743 li
95.0059 157.643 li
95.106 157.442 li
95.3057 157.343 li
95.4058 157.243 li
95.5059 157.143 li
95.606 156.942 li
95.7056 156.643 li
95.9058 156.843 li
96.0059 156.542 li
96.106 156.343 li
96.2056 155.942 li
96.3057 155.743 li
96.4058 155.843 li
96.6055 155.743 li
96.7056 155.542 li
96.8057 155.243 li
96.9058 154.843 li
97.0059 154.643 li
97.2056 154.343 li
97.3057 154.442 li
97.4058 154.442 li
97.5059 154.743 li
97.6055 154.843 li
97.8057 154.743 li
97.9058 154.343 li
98.0054 154.143 li
98.1055 153.743 li
98.2056 153.442 li
98.3057 152.843 li
98.5054 152.643 li
98.6055 152.343 li
98.7056 152.542 li
98.8057 152.942 li
98.9058 153.143 li
99.1055 153.442 li
99.2061 152.843 li
99.3062 152.243 li
99.4063 151.143 li
99.5063 150.743 li
99.7061 150.343 li
99.8062 150.343 li
99.9063 150.442 li
100.006 150.542 li
100.106 150.542 li
100.306 150.442 li
100.406 150.843 li
100.506 151.042 li
100.606 151.243 li
100.706 150.843 li
100.806 150.643 li
101.006 150.643 li
101.106 150.343 li
101.206 150.143 li
101.306 149.542 li
101.406 149.542 li
101.606 149.442 li
101.706 149.442 li
101.806 149.143 li
101.906 149.042 li
102.006 149.042 li
102.206 148.942 li
102.306 148.942 li
102.406 148.942 li
102.506 148.942 li
102.606 148.643 li
102.706 148.442 li
102.906 148.243 li
103.006 148.143 li
103.106 147.643 li
103.206 147.442 li
103.306 147.743 li
103.506 148.343 li
103.606 149.042 li
103.706 148.643 li
103.806 148.042 li
103.906 147.442 li
104.106 147.643 li
104.206 147.442 li
104.306 147.243 li
104.406 146.743 li
104.506 146.843 li
104.706 146.942 li
104.806 147.343 li
104.906 147.542 li
105.006 147.643 li
105.106 147.442 li
105.206 146.843 li
105.406 146.442 li
105.506 146.042 li
105.606 146.243 li
105.706 146.143 li
105.806 146.042 li
106.006 145.442 li
106.106 145.143 li
106.206 145.042 li
106.306 144.743 li
106.406 144.343 li
106.606 143.743 li
106.706 143.542 li
106.806 143.343 li
106.906 143.343 li
107.006 143.243 li
107.206 142.942 li
107.306 142.042 li
107.406 141.143 li
107.506 140.442 li
107.606 140.343 li
107.706 140.343 li
107.906 140.343 li
108.006 140.343 li
108.106 140.243 li
108.206 140.243 li
108.306 139.743 li
108.506 139.143 li
108.606 138.143 li
108.706 137.042 li
108.806 136.343 li
108.906 136.143 li
109.106 135.942 li
109.206 135.643 li
109.306 134.743 li
109.406 134.143 li
109.506 133.343 li
109.606 132.843 li
109.806 132.042 li
109.906 131.343 li
110.006 130.743 li
110.106 130.542 li
110.206 130.643 li
110.406 130.743 li
110.506 130.343 li
110.606 129.542 li
110.706 128.243 li
110.806 127.143 li
111.006 126.143 li
111.106 125.643 li
111.206 125.143 li
111.306 124.643 li
111.406 123.843 li
111.606 123.143 li
111.706 122.343 li
111.806 122.042 li
111.906 121.743 li
112.006 121.942 li
112.106 121.942 li
112.306 122.042 li
112.406 121.643 li
112.506 120.843 li
112.606 119.643 li
112.706 118.542 li
112.906 117.942 li
113.006 117.542 li
113.106 117.243 li
113.206 116.942 li
113.306 116.442 li
113.506 115.743 li
113.606 114.843 li
113.706 114.143 li
113.806 113.643 li
113.906 113.343 li
114.006 113.243 li
114.206 113.042 li
114.306 112.843 li
114.406 112.643 li
114.506 112.243 li
114.606 112.143 li
114.806 111.942 li
114.906 111.743 li
115.006 111.542 li
115.106 111.643 li
115.206 111.942 li
115.406 112.243 li
115.506 112.442 li
115.606 112.743 li
115.706 113.042 li
115.806 113.643 li
116.006 114.042 li
116.106 114.542 li
116.207 115.042 li
116.306 115.643 li
116.406 116.243 li
116.506 116.643 li
116.707 117.343 li
116.806 117.942 li
116.906 118.643 li
117.006 118.843 li
117.106 119.243 li
117.306 119.843 li
117.406 120.942 li
117.506 121.743 li
117.606 122.643 li
117.707 122.942 li
117.906 123.643 li
118.006 124.542 li
118.106 125.843 li
118.207 126.942 li
118.307 127.643 li
118.506 128.442 li
118.606 128.743 li
118.707 129.143 li
118.807 129.343 li
118.906 130.243 li
119.006 130.942 li
119.207 131.743 li
119.307 132.042 li
119.406 132.442 li
119.506 132.643 li
119.606 133.243 li
119.807 134.343 li
119.906 135.542 li
120.006 136.542 li
120.106 136.843 li
120.207 136.942 li
120.406 137.243 li
120.506 137.643 li
120.606 138.343 li
120.707 138.843 li
120.807 139.143 li
120.906 139.643 li
121.106 140.143 li
121.207 140.743 li
121.307 141.042 li
121.406 141.343 li
121.506 141.643 li
121.707 142.143 li
121.807 142.343 li
121.906 142.643 li
122.006 142.942 li
122.106 143.143 li
122.307 143.343 li
122.406 143.343 li
122.506 143.643 li
122.606 144.143 li
122.707 144.942 li
122.906 145.442 li
123.006 146.143 li
123.106 146.442 li
123.207 146.743 li
123.307 146.343 li
123.406 146.143 li
123.606 146.143 li
123.707 146.743 li
123.807 147.542 li
123.906 148.042 li
124.006 148.442 li
124.206 148.542 li
124.307 148.743 li
124.406 148.743 li
124.506 148.942 li
124.605 148.942 li
124.807 148.942 li
124.906 149.042 li
125.006 149.343 li
125.105 150.143 li
125.206 150.843 li
125.307 151.143 li
125.506 150.843 li
125.606 150.643 li
125.706 150.743 li
125.807 150.743 li
125.906 150.743 li
126.106 150.442 li
126.206 150.442 li
126.307 150.643 li
126.406 151.143 li
126.506 151.542 li
126.706 151.542 li
126.807 151.243 li
126.906 150.843 li
127.006 151.042 li
127.106 151.243 li
127.307 151.643 li
127.406 151.743 li
127.506 151.542 li
127.606 151.343 li
127.706 151.042 li
127.807 150.843 li
128.006 150.743 li
128.106 150.542 li
128.206 150.542 li
128.307 150.542 li
128.406 150.643 li
128.606 150.643 li
128.707 150.542 li
128.807 150.343 li
128.906 150.243 li
129.006 150.042 li
129.207 149.942 li
129.307 150.042 li
129.406 149.942 li
129.506 149.843 li
129.606 149.542 li
129.807 149.243 li
129.906 149.042 li
130.006 149.143 li
130.106 149.542 li
130.207 149.942 li
130.307 150.243 li
130.506 150.143 li
130.606 149.743 li
130.707 149.243 li
130.807 148.743 li
130.906 148.643 li
131.106 148.643 li
131.207 148.843 li
131.307 148.542 li
131.406 148.243 li
131.506 147.843 li
131.707 147.843 li
131.807 147.942 li
131.906 147.942 li
132.006 147.542 li
132.106 147.343 li
132.207 147.442 li
132.406 147.343 li
132.506 146.942 li
132.606 146.143 li
132.707 145.942 li
132.807 145.843 li
133.006 145.843 li
133.106 145.743 li
133.207 145.942 li
133.307 145.843 li
133.406 145.743 li
133.606 145.442 li
133.707 145.542 li
133.807 145.143 li
133.906 145.042 li
134.006 144.743 li
134.207 144.942 li
134.307 145.042 li
134.406 145.243 li
134.506 144.843 li
134.606 144.743 li
134.707 144.643 li
134.906 144.942 li
135.006 144.942 li
135.106 144.542 li
135.207 144.343 li
135.307 144.343 li
135.506 144.643 li
135.606 144.743 li
135.707 144.743 li
135.807 144.643 li
135.906 144.542 li
136.106 144.442 li
136.207 144.343 li
136.307 144.442 li
136.406 144.442 li
136.506 144.143 li
136.605 143.743 li
136.807 143.442 li
136.906 142.942 li
137.006 142.542 li
137.105 142.143 li
137.206 142.042 li
137.406 141.643 li
137.506 141.442 li
137.605 140.942 li
137.706 140.643 li
137.807 140.143 li
138.006 139.643 li
138.106 138.843 li
138.206 138.243 li
138.307 137.843 li
138.406 137.843 li
138.606 137.343 li
138.706 136.743 li
138.807 135.743 li
138.906 134.942 li
139.006 133.942 li
139.106 133.243 li
139.307 132.643 li
139.406 132.643 li
139.506 132.042 li
139.606 131.243 li
139.706 129.843 li
139.906 128.743 li
140.006 127.643 li
140.106 127.143 li
140.206 126.243 li
140.307 125.243 li
140.506 123.343 li
140.606 121.843 li
140.706 120.442 li
140.807 119.743 li
140.906 118.643 li
141.106 117.542 li
141.207 116.243 li
141.307 115.143 li
141.406 114.042 li
141.506 113.042 li
141.606 111.942 li
141.807 110.843 li
141.906 109.442 li
142.006 108.243 li
142.106 107.343 li
142.207 107.243 li
142.406 107.643 li
142.506 108.343 li
142.606 108.643 li
142.707 108.843 li
142.807 109.243 li
143.006 110.042 li
143.106 111.042 li
143.207 111.843 li
143.307 112.442 li
143.406 113.243 li
143.506 114.343 li
143.707 115.743 li
143.807 116.843 li
143.906 117.743 li
144.006 118.243 li
144.106 118.143 li
144.307 118.243 li
144.406 118.843 li
144.506 119.942 li
144.606 120.743 li
144.707 121.143 li
144.906 121.643 li
145.006 122.042 li
145.106 122.542 li
145.207 122.643 li
145.307 123.343 li
145.506 123.942 li
145.606 124.343 li
145.707 124.143 li
145.807 124.143 li
145.906 124.743 li
146.006 125.243 li
146.207 125.442 li
146.307 125.143 li
146.406 125.542 li
146.506 126.143 li
146.606 127.542 li
146.807 128.442 li
146.906 129.843 li
147.006 130.743 li
147.106 132.542 li
147.207 133.643 li
147.406 134.843 li
147.506 134.843 li
147.606 135.042 li
147.707 135.343 li
147.807 136.542 li
147.906 137.743 li
148.106 138.442 li
148.207 138.743 li
148.307 138.743 li
148.406 139.442 li
148.506 140.042 li
148.707 141.243 li
148.807 141.743 li
148.906 142.243 li
149.006 142.442 li
149.105 143.143 li
149.307 144.143 li
149.406 145.143 li
149.506 145.542 li
149.605 145.843 li
149.706 146.243 li
149.906 146.743 li
150.006 146.942 li
150.105 146.843 li
150.206 146.743 li
150.307 146.942 li
150.406 147.343 li
150.605 147.843 li
150.706 148.143 li
150.807 148.442 li
150.906 148.743 li
151.006 149.143 li
151.206 149.442 li
151.307 149.942 li
151.406 149.942 li
151.506 149.843 li
151.606 149.942 li
151.807 150.343 li
151.906 150.643 li
152.006 150.542 li
152.106 150.343 li
152.206 150.643 li
152.406 150.843 li
152.506 151.243 li
152.606 151.343 li
152.706 151.643 li
152.807 151.542 li
152.906 151.643 li
153.106 151.643 li
153.207 151.843 li
153.307 152.143 li
153.406 152.643 li
153.506 153.143 li
153.707 153.343 li
153.807 153.143 li
153.906 152.743 li
154.006 152.243 li
154.106 151.942 li
154.307 151.942 li
154.406 152.143 li
154.506 152.442 li
154.606 152.743 li
154.707 153.343 li
154.807 153.743 li
155.006 153.643 li
155.106 153.042 li
155.207 152.643 li
155.307 152.542 li
155.406 152.442 li
155.606 152.442 li
155.707 152.542 li
155.807 152.643 li
155.906 152.442 li
156.006 152.243 li
156.207 152.143 li
156.307 152.143 li
156.406 152.442 li
156.506 152.743 li
156.606 153.042 li
156.807 152.643 li
156.906 152.343 li
157.006 152.143 li
157.106 152.343 li
157.207 152.243 li
157.307 152.042 li
157.506 151.643 li
157.606 151.643 li
157.707 151.542 li
157.807 151.542 li
157.906 151.143 li
158.106 151.042 li
158.207 151.042 li
158.307 151.143 li
158.406 150.942 li
158.506 150.942 li
158.707 150.743 li
158.807 150.643 li
158.906 150.442 li
159.006 150.243 li
159.106 149.843 li
159.207 149.343 li
159.406 148.643 li
159.506 148.442 li
159.606 148.243 li
159.707 148.243 li
159.807 147.743 li
160.006 147.442 li
160.106 147.343 li
160.207 147.042 li
160.307 146.843 li
160.406 146.243 li
160.606 146.143 li
160.707 145.942 li
160.807 145.743 li
160.906 145.442 li
161.006 145.042 li
161.207 144.643 li
161.307 144.143 li
161.406 143.743 li
161.506 143.343 li
161.605 142.542 li
161.706 141.942 li
161.906 141.042 li
162.006 140.542 li
162.105 139.942 li
162.206 139.442 li
162.307 138.942 li
162.506 138.143 li
162.605 137.343 li
162.706 136.643 li
162.807 136.343 li
162.906 135.942 li
163.105 135.442 li
163.206 134.643 li
163.307 134.143 li
163.406 133.343 li
163.506 132.442 li
163.706 131.542 li
163.807 130.542 li
163.906 129.643 li
164.006 128.442 li
164.106 127.243 li
164.206 126.442 li
164.406 125.143 li
164.506 124.143 li
164.606 122.843 li
164.706 122.542 li
164.807 121.643 li
165.006 120.643 li
165.106 119.143 li
165.206 118.243 li
165.307 117.343 li
165.406 116.542 li
165.606 115.843 li
165.706 115.743 li
165.807 115.843 li
165.906 115.942 li
166.006 115.442 li
166.106 115.243 li
166.307 115.243 li
166.406 115.343 li
166.506 115.243 li
166.606 114.942 li
166.707 115.143 li
166.906 115.843 li
167.006 116.743 li
167.106 116.942 li
167.207 117.042 li
167.307 117.343 li
167.506 117.743 li
167.606 117.942 li
167.707 117.743 li
167.807 117.143 li
167.906 116.843 li
168.106 116.542 li
168.207 116.843 li
168.307 116.743 li
168.406 116.843 li
168.506 116.442 li
168.606 116.442 li
168.807 116.643 li
168.906 117.143 li
169.006 117.942 li
169.106 118.743 li
169.207 119.042 li
169.406 119.442 li
169.506 119.743 li
169.606 120.442 li
169.707 120.942 li
169.807 121.643 li
170.006 121.843 li
170.106 122.243 li
170.207 122.942 li
170.307 123.843 li
170.406 124.643 li
170.506 125.143 li
170.707 125.843 li
170.807 126.243 li
170.906 126.442 li
171.006 126.542 li
171.106 126.942 li
171.307 127.243 li
171.406 127.243 li
171.506 127.243 li
171.606 127.643 li
171.707 128.243 li
171.906 128.843 li
172.006 129.243 li
172.106 129.442 li
172.207 129.743 li
172.307 129.942 li
172.506 130.343 li
172.606 130.942 li
172.707 131.343 li
172.807 131.442 li
172.906 131.243 li
173.006 131.243 li
173.207 131.143 li
173.307 131.042 li
173.406 131.243 li
173.506 131.542 li
173.606 131.743 li
173.807 131.743 li
173.906 131.343 li
174.006 131.042 li
174.105 130.843 li
174.206 131.042 li
174.406 131.243 li
174.506 131.743 li
174.605 132.042 li
174.706 132.542 li
174.807 132.542 li
175.006 132.243 li
175.105 131.843 li
175.206 131.643 li
175.307 131.843 li
175.406 131.942 li
175.506 132.143 li
175.706 132.243 li
175.807 132.442 li
175.906 132.243 li
176.006 132.042 li
176.106 132.042 li
176.307 132.243 li
176.406 132.843 li
176.506 133.442 li
176.606 134.042 li
176.706 134.243 li
176.906 134.243 li
177.006 134.442 li
177.106 135.343 li
177.206 135.942 li
177.307 136.143 li
177.406 135.643 li
177.606 135.643 li
177.706 135.542 li
177.807 135.743 li
177.906 135.843 li
178.006 136.643 li
178.207 137.442 li
178.307 138.243 li
178.406 138.743 li
178.506 139.243 li
178.606 139.643 li
178.807 139.643 li
178.906 139.542 li
179.006 139.542 li
179.106 139.442 li
179.207 139.343 li
179.406 139.243 li
179.506 139.643 li
179.606 139.843 li
179.707 140.143 li
179.807 140.243 li
179.906 140.442 li
180.106 140.243 li
180.207 139.942 li
180.307 139.743 li
180.406 139.942 li
180.506 140.243 li
180.707 140.542 li
180.807 140.143 li
180.906 139.843 li
181.006 139.643 li
181.106 140.042 li
181.307 140.942 li
181.406 141.643 li
181.506 141.743 li
181.606 141.343 li
181.707 141.243 li
181.807 141.343 li
182.006 141.643 li
182.106 142.343 li
182.207 142.843 li
182.307 143.143 li
182.406 142.743 li
182.606 142.942 li
182.707 143.743 li
182.807 145.143 li
182.906 146.143 li
183.006 146.542 li
183.207 146.442 li
183.307 146.442 li
183.406 146.743 li
183.506 147.343 li
183.606 147.542 li
183.807 147.843 li
183.906 147.743 li
184.006 148.243 li
184.106 148.743 li
184.207 149.643 li
184.307 149.942 li
184.506 150.042 li
184.606 150.042 li
184.707 150.143 li
184.807 150.542 li
184.906 150.743 li
185.106 150.942 li
185.207 150.843 li
185.307 151.042 li
185.406 151.343 li
185.506 152.042 li
185.707 152.643 li
185.807 152.843 li
185.906 152.643 li
186.006 152.343 li
186.106 152.042 li
186.307 152.042 li
186.406 152.243 li
186.506 152.643 li
186.605 152.843 li
186.706 152.743 li
186.807 152.542 li
187.006 152.143 li
187.105 151.542 li
187.206 151.143 li
187.307 151.143 li
187.406 151.442 li
187.605 151.343 li
187.706 151.042 li
187.807 150.843 li
187.906 151.042 li
188.006 151.442 li
188.206 151.042 li
188.307 150.243 li
188.406 149.343 li
188.506 149.243 li
188.606 149.743 li
188.706 150.243 li
188.906 150.343 li
189.006 149.843 li
189.106 149.143 li
189.206 148.542 li
189.307 148.243 li
189.506 148.042 li
189.606 147.743 li
189.706 147.542 li
189.807 147.143 li
189.906 146.743 li
190.106 146.442 li
190.206 146.643 li
190.307 146.643 li
190.406 146.743 li
190.506 146.243 li
190.707 146.042 li
190.807 145.743 li
190.906 145.743 li
191.006 145.942 li
191.106 146.343 li
191.207 146.542 li
191.406 146.343 li
191.506 145.843 li
191.606 145.743 li
191.707 145.643 li
191.807 145.942 li
192.006 146.243 li
192.106 146.542 li
192.207 146.843 li
192.307 147.042 li
192.406 147.243 li
192.606 147.243 li
192.707 147.042 li
192.807 146.542 li
192.906 146.542 li
193.006 146.743 li
193.106 147.143 li
193.307 147.143 li
193.406 147.243 li
193.506 147.143 li
193.606 147.442 li
193.707 147.743 li
193.906 148.542 li
194.006 149.542 li
194.106 150.243 li
194.207 150.542 li
194.307 150.542 li
194.506 150.442 li
194.606 150.442 li
194.707 150.643 li
194.807 151.143 li
194.906 151.643 li
195.106 151.843 li
195.207 151.942 li
195.307 152.243 li
195.406 152.442 li
195.506 152.643 li
195.606 152.743 li
195.807 152.942 li
195.906 153.143 li
196.006 153.442 li
196.106 154.143 li
196.207 154.542 li
196.406 154.743 li
196.506 154.343 li
196.606 154.243 li
196.707 154.243 li
196.807 154.442 li
197.006 154.542 li
197.106 154.942 li
197.207 155.042 li
197.307 155.243 li
197.406 155.243 li
197.606 155.643 li
197.707 155.743 li
197.807 156.042 li
197.906 156.143 li
198.006 156.042 li
198.106 155.743 li
198.307 155.042 li
198.406 154.843 li
198.506 154.643 li
198.606 155.243 li
198.707 155.442 li
198.906 155.743 li
199.006 155.743 li
199.105 155.542 li
199.206 155.442 li
199.307 155.243 li
199.506 155.343 li
199.605 155.143 li
199.707 155.243 li
199.807 155.143 li
199.906 155.143 li
200.006 154.942 li
200.207 154.542 li
200.307 153.942 li
200.406 153.942 li
200.506 153.942 li
200.605 154.442 li
200.807 154.343 li
200.906 154.442 li
201.006 154.243 li
201.105 154.442 li
201.207 154.243 li
201.406 154.042 li
201.506 153.942 li
201.605 154.243 li
201.707 154.542 li
201.807 154.542 li
202.006 154.643 li
202.105 154.843 li
202.207 155.042 li
202.307 154.843 li
202.406 154.843 li
202.506 155.243 li
202.707 155.743 li
202.807 155.942 li
202.906 155.843 li
203.006 155.843 li
203.105 156.243 li
203.307 156.743 li
203.406 157.143 li
203.506 157.143 li
203.605 157.243 li
203.707 157.442 li
203.906 158.042 li
204.006 158.643 li
204.105 158.643 li
204.207 158.743 li
204.307 158.643 li
204.406 158.942 li
204.605 158.843 li
204.707 158.942 li
204.807 159.042 li
204.906 159.343 li
205.006 159.343 li
205.207 159.143 li
205.307 159.343 li
205.406 159.442 li
205.506 159.643 li
205.605 159.442 li
205.807 159.343 li
205.906 159.442 li
206.006 159.643 li
206.105 159.542 li
206.207 159.343 li
206.406 159.243 li
206.506 159.442 li
206.605 159.442 li
206.707 159.343 li
206.807 159.143 li
206.906 158.942 li
207.105 158.542 li
207.207 158.343 li
207.307 158.143 li
207.406 158.243 li
207.506 158.442 li
207.707 158.643 li
207.807 158.843 li
207.906 158.743 li
208.006 158.542 li
208.105 158.442 li
208.307 158.343 li
208.406 158.243 li
208.506 158.343 li
208.605 158.643 li
208.707 158.542 li
208.906 158.143 li
209.006 157.843 li
209.107 157.942 li
209.207 158.042 li
209.307 158.243 li
209.406 158.343 li
209.607 158.643 li
209.707 158.843 li
209.807 158.743 li
209.906 158.542 li
210.006 158.042 li
210.207 157.843 li
210.307 157.643 li
210.406 157.442 li
210.506 157.343 li
210.607 157.343 li
210.807 157.343 li
210.906 157.143 li
211.006 156.942 li
211.107 156.743 li
211.207 156.843 li
211.307 156.843 li
211.506 156.942 li
211.605 156.542 li
211.707 156.343 li
211.807 155.942 li
211.906 155.843 li
212.105 155.442 li
212.207 155.243 li
212.307 154.942 li
212.406 155.042 li
212.506 155.042 li
212.707 155.643 li
212.807 156.042 li
212.906 156.442 li
213.006 156.343 li
213.105 156.143 li
213.307 155.942 li
213.406 155.843 li
213.506 156.042 li
213.605 156.243 li
213.707 156.442 li
213.807 156.243 li
214.006 155.942 li
214.105 155.942 li
214.207 155.942 li
214.307 156.343 li
214.406 156.643 li
214.605 157.243 li
214.707 157.343 li
214.807 157.442 li
214.906 157.343 li
215.006 157.743 li
215.207 158.143 li
215.307 158.243 li
215.406 158.243 li
215.506 158.243 li
215.605 158.743 li
215.707 159.042 li
215.906 159.143 li
216.006 159.042 li
216.105 159.042 li
216.207 159.042 li
216.307 159.143 li
216.506 159.243 li
216.605 159.542 li
216.707 159.942 li
216.807 160.442 li
216.906 160.843 li
217.105 161.243 li
217.207 161.643 li
217.307 161.643 li
217.406 161.743 li
217.506 162.042 li
217.707 162.442 li
217.807 162.542 li
217.906 162.643 li
218.006 162.743 li
218.105 162.942 li
218.207 163.143 li
218.406 163.343 li
218.506 163.542 li
218.605 163.743 li
218.707 163.643 li
218.807 163.743 li
219.006 163.442 li
219.105 163.643 li
219.207 163.843 li
219.307 164.442 li
219.406 164.542 li
219.605 164.643 li
219.707 164.343 li
219.807 164.143 li
219.906 164.042 li
220.006 164.442 li
220.207 164.743 li
220.307 164.843 li
220.406 164.442 li
220.506 164.442 li
220.605 164.343 li
220.707 164.542 li
220.906 164.442 li
221.006 164.643 li
221.107 164.442 li
221.207 164.343 li
221.307 163.942 li
221.506 163.843 li
221.607 163.743 li
221.707 163.942 li
221.807 164.042 li
221.906 164.542 li
222.107 164.643 li
222.207 164.442 li
222.307 163.643 li
222.406 163.042 li
222.506 162.643 li
222.607 162.843 li
222.807 162.843 li
222.906 162.843 li
223.006 162.442 li
223.107 161.942 li
223.207 161.343 li
223.406 161.143 li
223.506 161.143 li
223.607 161.143 li
223.707 160.942 li
223.807 160.942 li
224.006 161.042 li
224.105 161.343 li
224.207 161.542 li
224.307 161.542 li
224.406 161.442 li
224.605 161.143 li
224.707 160.942 li
224.807 160.743 li
224.906 160.942 li
225.006 161.143 li
225.105 161.442 li
225.307 161.643 li
225.406 161.743 li
225.506 161.743 li
225.605 161.843 li
225.707 161.843 li
225.906 161.843 li
226.006 161.942 li
226.105 162.243 li
226.207 162.843 li
226.307 163.143 li
226.506 163.243 li
226.605 163.143 li
226.707 163.243 li
226.807 163.442 li
226.906 163.542 li
227.006 163.643 li
227.207 163.843 li
227.307 163.843 li
227.406 163.843 li
227.506 163.843 li
227.605 164.143 li
227.807 164.442 li
227.906 164.643 li
228.006 164.442 li
228.105 164.442 li
228.207 163.942 li
228.406 163.643 li
228.506 163.243 li
228.605 163.442 li
228.707 163.542 li
228.807 163.743 li
228.906 163.743 li
56.0063 106.442 mo
66.9063 106.442 li
.874479 .348516 1 .300603 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
HHBIWK+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D
45C854A0BE693CA04DDB35CE9C6FCC12699F3ECF3D1B67F9F5777A6EECDAF3C0
F3F32C0B6BC38F752623DB2A9617BDB514ED25F1A310A0C42BE659A27D8F2C06
C4BFA42A6084F73A353D30020A89B386DABBAAA17119B17F011D1BF8067CBFE1
7C2D6AE10C51C95BF00F09A50ED067AF> |-
/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A
114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624
097F1B5D47BF4F384727F53BA1763156DBDB0266> |-
/d <1C60D8A8C9B7E7C1D82219353B31AE497773900CFE039E7C34F7CEBE1010
56958EFFC2C789CCBD8768CC683564B6074DAAAE648B50C88AD4C58AC712C847
6BA68C74E592EF7E71792F9E5367AB3C80F9D183D28DD5E961AA14DCB5D92067
68FB9E099DA642A8BAA73D52C56C9913DC619FDF3F90996DC8D242E6BF94BEBE
752CB2F5D6196384CDD6E5AC10AFB49712810FFD82A2782B9B182DA37A23E604
3872EFC1C407DD53136E> |-
/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AED
C4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C049
2C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E
8106797186054DABC39E6B> |-
/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F43B727FC67DAAB0A1AC3463640
03E4FEF79FBAC399EF60BAB44182D20FA0C6402BF1E27F05398DCDDDA14D79F5
733F11E560A813FF9D16C42617DFDA23021803BAB86086244EE74B29A5E1F99E
79BC6C6C8880FE4C572C55E990D88B7521BD46854B97930948AAC94E7DFE2FF6
9F2221950186414A7427A5E80E1B04B219E3300404246D87351FD05C6F3EA0B9
5C636083B47E4D5C2DAA8BBB8D343439CEC8A6CCD7C3BA57C2332F2A02343DC5
6BF6AA691E1A081F9D254D> |-
/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5
A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E
21C6C79BBDA40B7772F2DEC85ADAD3476B> |-
/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-
/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875
E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A366
46DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0
318D13C761F9DF> |-
/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CE
F7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE
826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB
2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D
66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFB
BE8C69D79181> |-
/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB
1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0
AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-
/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5
A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F
24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0
AEBA9DE73147EEE82D829B87C7> |-
/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87
D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E64020888
37AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3
D16C57> |-
/y <1C60D8A8C9B74451438745C9BFBA6ADBF77C623A74806E5154FE3B1D23AD
89884413882DCD456BA075554715051F4B509904A44C98E8994424C1B156D65D
BD9989905EF3DE501EC4A81DE7294F3DD868FBAE7BF61D1105CF8B349074D58A
EC16A3DDE7732615028813D74148E904C1C87C7D157893B843DFD35C187593AC
68163F56BACA6337> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HHBIWK+Times /Encoding get
dup 83 /S put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
%ADOEndSubsetFont
/HHBIWK+Times*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /.notdef /two 2{/.notdef}rp /five 7{/.notdef}rp /equal 21{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef 
/g /.notdef /i 2{/.notdef}rp /l /.notdef /n /.notdef 
/p /.notdef /r /s /t 4{/.notdef}rp /y 2{/.notdef}rp 
/bar 131{/.notdef}rp]
HHBIWK+Times nf
HHBIWK+Times*1 [0 -11 -11 0 0 0 ]msf
10.6802 194.309 mo
(Spectral energy density)
[-5.42285 -6.25879 -5.51074 -4.92871 -3.64063 -3.59668 -5.30176 -2.59668 -2.33105 -5.51172 -6.10449 -5.51074 
-3.59766 -6.14844 -5.18066 -2.33203 -6.2041 -5.51074 -6.10498 -4.35596 -2.57422 -3.64063 0 ]ysh
0 0 0 1 cmyk
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
HHBIWK+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D5
98E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HHBIWK+Times /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/HHBIWK+Times*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /one /two 2{/.notdef}rp /five 7{/.notdef}rp /equal 21{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef 
/g /.notdef /i 2{/.notdef}rp /l /.notdef /n /.notdef 
/p /.notdef /r /s /t 4{/.notdef}rp /y 2{/.notdef}rp 
/bar 131{/.notdef}rp]
HHBIWK+Times nf
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
39.9868 194.603 mo
(0)sh
101.979 194.603 mo
(5)sh
161.266 194.603 mo
(10)
[5.64307 0 ]xsh
223.26 194.603 mo
(15)
[5.64258 0 ]xsh
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
HHBIWK+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E9CFE2CD6B50437205F942
FF37E122B69D17C7AA691A603207160811AFB791> |-
/q <1C60D8A8C9B7E897EED043C74253B54ADD4A83B5A401EE275FD05305D443
701C0B5FB5FFB629FD564139466A0D21B941D95638CDD0441A0BA219E67025CA
58D717F5105065C6C534C87A1E9460A7EB934679C52896D0325C4745FC1FA2E1
9A833C7512C47FAFC1F455DA264B132201332D7965A6000B61991E83CF8296E6
5C72578347B3415411104B5B8018A71A688EDD6AFDB9028F3C25C58A0C2F46C8
DD14D67E4428A4> |-
/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62D
D7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0
B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F8
9019F8CCCB6FE3AF5C57> |-
systemdict /gcheck known {setglobal} if end {end} if
end
HHBIWK+Times /Encoding get
dup 70 /F put
dup 113 /q put
dup 117 /u put
pop
%ADOEndSubsetFont
/HHBIWK+Times*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /one /two 2{/.notdef}rp /five 7{/.notdef}rp /equal 8{/.notdef}rp 
/F 12{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d 
/e /.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef 
/n /.notdef /p /q /r /s /t /u 
3{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]
HHBIWK+Times nf
HHBIWK+Times*1 [11 0 0 -11 0 0 ]msf
92.5415 208.306 mo
(Frequency \(rad/ps\))
[5.35693 3.59717 5.51074 6.19287 6.06104 5.51074 6.10498 4.92822 5.18066 2.33203 3.12402 3.59668 
5.30225 6.20361 3.77295 6.25879 4.35596 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/HHBIWK+Times*1 uf
/HHBIWK+Times uf
/Times uf
/HHBIWL+SymbolMT*1 uf
/HHBIWL+SymbolMT uf
/SymbolMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 15.0
%%AI8_CreatorVersion: 15.0.1
%%For: (Alan) ()
%%Title: (0.5.eps)
%%CreationDate: 3/15/2011 3:28 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KkB8=8Zfq?NC[hnSO\?"c""%Lsk8Z2nCh&[a^jNK7dpJA,\%:fln2YR9\pN#\L/t?SV,AU>8K/WE_5,uRoKVo!IkiN`.^^HJ
%jHZ)XYJenQkHBl)C?M<S12@Rq`8f3BMSs"]1hnX4dchIY;B3>DHL:_,9GtLN8#*qo4&AD7Q,9._J*"31JY"]!mb?Rci'/afDWC,R
%J#>EmO&=ZT5J?3PH[H!XJh'on?@0W"\ss1ah+kRngH'NiYEq?,G'TbQ)WMQ0N!T2_;6&e,SSmb(dVH:Vb_hocj6u(j*pN>'%2"R8
%rheQpo\[6D<r3:7[bX".U$&6OA0$00ClcVm3+sEYN1b-;J&J+B^8Cr+*\Z4hS^CPRN&u[kZ_)eK#/ab7q*lA1keDd!XX#XkiSdeK
%2s`HBD+o7YLe$H<^^9e8rQUcTAB>6+,=62MFV@Qk,3d$<1*t9og=3M0m^3"X=fJhKXgUQqPuG\hSc;$tMm8WlOIu0m`MD6hY594^
%2]5efOR%/<C3S?T\;PC:nNg#<I:tiZMlVU'd2jO0)K[>lL<N7^Kn?1tf(d]p-n,2<l*0!Y)Vj8eL?3Yr-(1!JQsr1cP)rQl;?B3V
%b35n5$<5N(d]T8ck_8]%KW.""ZZiEk5!&WN)dosX;*$:G8eJEEq14ZaUq$HRm!h&sK_]lJm^'_S7OoHo4UFI9pl`M(qF&QZDfcQP
%7"b^@O-`T_nOL@H(cTh9@PX?<oCL:#rm)E;S:LU\1Ajfki+G([577YgXXqA.=b`i[$r:H&4=uoilf>HA!h(DJn0sKMAr-XI9-hYk
%enI/SD:3-3P>:-A!e3JAF;gUa?gn_t'ai<h:k2UT"aEon5aud3SsIQV"Fe$hL'H`pH&2ru%%3'1^a)_7<VB[`dHg90RK6aa':Jr.
%$sW92OFj+O#*=G/(jAFZnhT,,5N*7u"[A\267gPB+9atamdLI/%<qnQ6;oW@BEkEO:M<ZZ_fop_nDFVL#qZI_i$Wf8?r%=V_^D3(
%nF>Gi<3[e2+#F'>i?r_9-B_b3T$`CI5G/nPaC^m&L:dpS_GBq0#SK=OT60Sl(&W_sJ0Xt;P=aD\&=8=U?nu'(K4g^mVN)(IclSVf
%i\B-ulj3`<n76281?k9&)em1g5oW(NnL,N9?RM5)a+,E4KP#nh!CoHmnhU,r2LlorST-Yo8VDHo#2s[DcAZHShr2BbQ6Ar<(($I7
%6@CUQ6@/d%&.];C9anq#$m1ompnW8b!I7H>dD;$#8iW<a4WtC$U5]*a<n:;9GmD%.<j/sW(pUGj5WG=:!K@c_lP_^eQ*8FjUU<!!
%0IB7ar45?12I&.N#+9R,?55m0s+B3.</U=?,`tUNDt4FG)uS06PCMfhGas/Xr?hQ-8b-$]:&^tejDufI6;Q!Y\K#mjr?hR8H1G,8
%:&^j<Mad3%p7(t1Q,mV*2u+i"s/;HC3J=#8I`Z6rM>RPtV-"lV0,NT:>cM%&VVu`(8f"*dZC!3*;TWBQJnIsgSgB:D)7:jIKpnms
%&U]P8i.6PfN(`XiqHiOhr[0DY)tFl[Sh-!gkP:+2_pG2'%+hRP.M`iZ\QKa4FnAdfa)""^5UTB!#D`_4JiA'(\4T>EDn/Q_MC;C;
%iqW1kRQR&#2fo%LUXpgA2sYn'.=PGgY[YVM#iR%X*I=/e$tS@TE>buj=;.4X9X@N2`Xu:.pc&0T\-"h>(D0F+s$@3DcBZR%R1MqV
%$jjiuXMqc&hcMH!?fCuqqA7Lc6n\Q[MhDUl+7V>>'KR+@\L<amRhit"Am3t!]EJ9(<"Y/21+"BK98<,9^/"I7K`4TC,6HL(D3Xgt
%"<KZC(aY180Zb(>JIS0ie%3q`jE3f%3.ij%e1P2K>m`UI.KQX_EQ]j"W5"M;E!>eKSqf9M-9&Lq`Z=efJB+j0f"#\N!dP!&kHJJB
%iR)%+7K4Cm'LTn_e3T"(3^)arnYB]d6^P=t)gkm2BMg]bR8"pb6WbbD>7oS>7&<9$k`>^<ZAo></+Hl"TjsLJHc3[_Ua[68T(/P;
%FKB7E3o!Z>TFrVD6oO:-a$N5"5c;+cTqegNlJN"!'B*Lhq--Y+Pc=s*mb5jO/_/AVNA+%g%U'f[MPkhqrAqb*S1YI9=iR/U,t^30
%$b2V9k/BHX]9#qj;Q#k(#D5feSAk#g`4FkCOTC^e^Z%'u3r[P3:T2/%#HTm^2cKoM8q?-FE!-oDS0i54Uo:NGXnDm7(t7H6i/jXB
%TNm9BO=5m^H01g(k9r**`p4$MiOZPmQkCdEOcuai7PourMFnhI=A7TCl^EU*S%9FiXE)cg6kKL=Ot+//WpDAU\;nUe?R2XnaYA(^
%"=RPq*(C5]?Sk3)4st?*-&q>oCZ%5_`tUaLlM=8^0`VM/>*SL&lXGGn$r^:qR>7&#)2LlG%on`S1^uYNNHNEeUafB)k='5c\5A'^
%2Q%g[WO%\]Jsp$R*7nWoRRr2)I>g+GQs$@sLm_9J;ZN4,8NPLG/ko"o`n5:Xrb:qm$m'i4pu\Mh;Sl_\9]tq"_2,t&V+bml/ND6&
%XUURuE,=L-0p"$@1B\fSZt*;6+bC+5TIC9`bU.)f+PRR$OY6,bEHSt$iF%dQVKN_29%<[g9Q]ue0Wg9WQ.Wl+[7e%e)&85c/gD"+
%ijh&BTGUr;<S!GpPiA),.3=3N=XPmX?.)Z(f+ojr0BNgZg5)ggeZQfNe!a!&I0auL1ceHc<8o_ceLGPg)FRRJW1m1#qHW-,b*PPV
%k:(j(K?VTQ2YRnGJTXZ<4'fg>c57j(&p3@b<.(t7@eLgsNcEJ=LF+SCA?O%9l'a8($]jO3I^iq!;L:dsYb[DGOH:=e.aN0g'3+j0
%,X^+J1pcTfOdSdGdSCGBVT</NU!d(8&N$.jeZNC!;^/5@(5a"8;Q-UM,8sV'C%uV;N6e>r,TVq:6jcs,,'6E>SXA#NBHeIs7%kl/
%LMRB0N)W72N=sCDe76;M8rW'nO[TE^SiDb=`0MVIZWY)>bqWA:p^J2X<E.CqASuW:pgp4WAmH3-'mE9W(pbH4etaN]@j]c5eq=cl
%(us+u)>"X)$._D*niU3FEKt*7]r/_J.7Cn:R"D1gBGQ"_rC_d4:oTMX9F:$Z=IrY3EHT[oiQB@eU<Hi+njF+SQG`rm/7?KM%-&-3
%.TmFD-Zo3Ui`Tk[PJ1's\Xg89.Tr0^_/V@$L(T*7Oq'+6)_uE_pqYP"i_W>[g&WO#R<_jX[<K^uW/`+G23nJ\5SeJO0SNMk"esmg
%#:0GDb'BQ>63ML=Q2^uL!i7j'4*]]u5Y5Bu>,3gfHkuL&^_X@DoK$Ucd)?C?i*8#YbCbkQZ(m,>66QRgjdZ<(Tf&ERAiTWk841H3
%0f`[3Z=YcZ%M47]6t[ZE!37`G/SWA7r$lp^5;Q0l]Ug8G,LpYZNVVluYNZ#<4(9\G_XOdqbqWspVhiQR![k'LMn2a1k6hp"1DZ:U
%(_I8^\KI_iCdDjR>D:@/i,*[0,^c9a(AJY!2T"=Ti`(o#d((6u$t=7LFAZ'j*],q.\qn>u,J_s$(^3U+'98ll'+H"LBNMLr/>d$B
%3Y(N6-R$K[\ISS[)'^[D_>ZsEVo1DB=oU45NDt$ifV7;GCP"B8alIs.M]l+KeM:ZAaXX"rM:bdiOG\@Y(@p+q(?p-HTjlE#m?of-
%0)hZlK$6'&`8W]QCf5c6PhMRtA"uT:KPcM_;IFO1pRolW.7t>(rmLuq;\Pg[2.NGT%8Se0J^_aj4aA3t8e#&A1hWgqF+tu,cNfnU
%79(V$78WenMR8aa#ptUQ";0-'khD84"&Q-n(6--7gfY%H_]A%%eu2qb:R>1NQc9ELMp\%l-B=KCTUMdg/&FhnimNcZ.@CJE^":C8
%+uZHs/ma<g<aZ#`cB9WAkHnVAF%;T>X`>HSR7e/5KBFB'4st%E9XF"$W\!cS@l$b@jt].tSHGD6gbH7s;O"a,Y(!=J4&sa.>?dX3
%As=Vk0:-_3n]d2(HV+g:%@HnWJa8JFj'P#Y?kkTCgqlXGZ)Z1R6?=_.ao!QmXhbHO`hT<s3>#<'R9,0b%3B\QP%l[Kl^l+t1cIo4
%n.Ti*Qgn%TI[5]iQ*g<@T(t>^/*$kj/s8NfBej[JSi)>J/R[]UZs])0]]JqI;mXj/-SkRqX;`$]^*sLGAf?rW`m>nF?,f\X/8O+?
%U+8uJqEp#DUBg+J6;LMN.BV=qf$[SHY*)sZLie8VB@tVgBag<O]0m)oU8"#/@BLIrBJp`kg-Jsi=]53V$V6E\]Kc[nP-M5`l1o$s
%k=Li6?^\c?Y)j^%L7_(`]k9q$,AY^s<$,o"K'<kCC"(4daO(P6O`_XVMt44i@mC)POr3AAPIS'QV"0f%/a&Y(O^$i,ncjAEdl49f
%,`U>#NTZnE-A'5q\qO9p.NuphI`[BWF\N!&fSJ+IUaf!PN^D"<'n@&/L.VOL;DH5NXtBf7o8'_@SR,ClBcpB+_2tl3^gZe>.Pa#M
%P!KtCRQX6u6-eB)9O"0rX,9MY_.(MbLhdK/8R687otgIm3f9sW-urSc?F@i]UImk\.Q%mX`#PVC=b*]GB!t7#Coh"`ZG<^)GsI9X
%-b5$KmY&/cAFLm3.\aBP969]oN!FJu<!r/gj*99e0e@oq2c>buT-S<X1+=.I2MmV$C=gF69TR+j*0\AZ!X;7n\HEks<)gjMGbV.W
%_El0R,9:;$F!#?n9&5tm(%g-6gQ$n8Z+PlPBBA*/,G``'&?0eNN/P]92/?8NN@7M@ZabS\M,1%YBbBc(=HY'ea4""BWB;cZoj08j
%A`JB:qf/-e;IZ[[*j_>]bqQ'P"C;!rmnMlROESFXFcP2IEQX*3XN=`:+n_u[f#+4O-fSc`8BqNuM3CeELEsu*:]H.T#"pXYK=>N/
%s-o/]L,!$?<*X*Qb52M_GOSeWhCOgU<++WD7uhjmoO4/eB/3=_js&t<LdfQ6/o-W77AJE.N>a`"Ag(IEWY5f8''(PPUrLm-oTReO
%.d93('dWQGF!7pH!RC&pJtE4kq1Z'bP]Ed+=(@L(];1ms_#.fQhbJc2,hu!+Qtfd/GX%7Wc4/0T]nqqX/s]'M*KlpAm1me6GTO*Y
%8l,th<cr20;+D(<$>Pfi8/#*e`8)e!-eh0;<$?bO5caT47hZ/k$,Y5t4F'9E2HH8'gd;8f(K<&N)#d4POAE,D=f1OI)GR#D7JEV!
%bP8+@)[QnGa/)mEK11"bW'T$I;73?BLbZ'G8D++tI2oFdYW*@P>01iOiKe+`BlGp&A_`UcM(+=k4FkYM[]-(64j7rhWDcAJNpn#+
%&K;tWq08J<T)sXt\P%pK0e3pi"F,V"$.-5DH&:5`)l7ukZGYq!Kg?64q/L*Oc5]&I#2R*#IB%_2cS!u4ajBY2UZX9j*W;B7`pHX$
%s3Y\eU_D,dV=AaKZI#ACM)&0FAV"XEClI)qp[1<2oZ=SE-Mah#m<45Z%K[_h2*O4X$N5[M8)HAMgSFT#D>t7i[[$CG?nuKh>LCX'
%L,.s_5:2pRm^q5&+%K+".q1&)qM$Y"J,!rYoC4hA6/nd."*rCdTPqluG/)QEI7DsSr+k*P[bB-6dV-%^Vuh*"1&rUR&),F^@,,U[
%7\(8KSrV[:3c,%/4BdT%L5e,[N^PGp2Go]^s6U?nOGGf[_0<NKCabmi`'c)tg.1$)_`tM(V=i^5Fo%XmH9E]G&cFe0NGa5"NdgsF
%I^],N"W)]^(L,9nisg`saGM;n3p]U2kfq3t3r[H51dOOq%$]uN;e`_k:Q;j*\/js2<lC4B`S\)[d/;q\hV,),[u33j3p:?tTE4^(
%UUNf2O!p9FLHguWK&2&C59&F&!eYq^=qT4]1l(l-Fd40_F51To#^pbDp,PA\RO^f7F9p8,IQ^lO0;DiGh!69Z]`Z^JJ:KW;g)R&.
%9&n7]#mQ3s3@->KOr$m((J`)>:=])bPO>q:m/Dj5Nk3">f*n?go("[4o!S>F4aD;F3D^9r[$;]lfOf=AD%OJlL/3GK]0S\@e4ppL
%*0#.6NKKu1?>l%agY0iLX1%k2LU??.<ZMZ<7r?^EjQI8-"4DS4`\cU[(sjVpH`bTN*Vb3t@mXLm&4dJjGUD];J&pY)-H7/$[HF`o
%Op;fQ`"208UIhY[=ZJd,j<<VR=O<</DZ_C'bH02r@2;q<ob^]DNN/%2g!8-##PWg\([GSm8t!&irX@O;!6+V<X9oAe_gb+s\"l(+
%)%c&>NhDo9q&JE@H8<Fb;Y@Ba"?ih7K?<VUs$#rMjib%9br4hgE<b^n[/&7$)uE]aoF(&ib=Q@%N\ida^I))aDF8-AOJh;br"8mV
%LYm"+0=KaC8l+c'Hs>n9h<kc->fZ+gLt,RE)p6N%k@`U?^S.ae#AW/(%alJ4%7DbLGO7Inh'2AF7"iH2iALlO2@[/dY!=kaT.B^i
%;B-phGOj-8Gk.]#/dX1T7Qn.HrYtNKQ_QpB\:<3[_c.tXc]tQITW8ZV1n]o:8QNjlSUV([[BUSLo^LbmH(feJ)^HheT:IpIr_8ub
%J1TQ"`C4^4l=LV#O&TN9Du;]T!28:3r>'\_90J8TKAI0^M,u;o)ajB=>*c^b>/,'=d(Bo"LE4?TRQQ4#f(#@bW.=)/J+0'orj7gh
%$M4Q/U$,(Cf3ScWa-W@RYhN3N$S/.=7jJrg,]Q8/,a.C[9#c?GjUbC<$HOu-q1b1ZeQd<Ji6rkGlO/.8T+t4*3F6uY(04T[o^IGh
%]k\d!6pbd<r`Y.&)%D(_%<"[-4-#EfZJQ[X/H"6O-&_f`P^5aT2iu#Slu"'M)9IRjZD3gW-<cH=o06D7*;;NJUU(/FU;2Qfk\!Tk
%^oUc]"ucU2NE,=XDs756##"?'[^B:+Sa+9VN=]eZVe?VFnrP80kj&2Pmnm`;Dlk//6*j10lAjJkljK1tpt0ionhcRqoS^?Ag<$#<
%[WoHuiqoX/*5tr?N9%(gBd2RVfd7lt32\0as42(R"GLXcp5+/0j@[m%dRs-3O\1$15K81<*T4uPc2O[@G=*6bUEt%C#+%s>p?tIp
%U,I`2,E%;)ZlWpC3gu31j8\_H6:.pDL.^:<gNU9kMG1*ck[/mKZ\-RF&`"RdGil:p5/Gm]5a63$9Vtp^.&&k%gl\>[BQi.5<ed*3
%rZ>d+fnDcTDtd]AgAX/N*q4QHN5gM,^Hh_q.Z7n.%Bu!\LSAqTSl>YNedWPE^MQ+5]9`$OrBL;`rr.C4P)m2F\,SU#>`rUX`3AGo
%]@"#Pq`gY&ps[d+e!C"@kq,K+L`DUVNp(o"@EZ_,I]VeK!^SgFbmCk/gb%--#tF2gG"u`LEJ;u9IgK:LnDjfV4+*KL0etM!mIr=q
%"O.[-dkCZ8lj53k0*`0PXc6+-r-&tl8C.5b`mJR_)_GT7/R^?tKa4s8U>Z_d4NFiVYD_q,&E,dhn(^3Sdd==_bY;:ZTuDbXdPh:i
%@Q8-XVmIC']N8WU%iEnIll.bd%AgH6n?2YZ2`*W$Q?+(1WDm=QR7nua(c`OWqI<2-+$Mb`[o`bmi/qf!dI(<M/k?ZHcIlUTJRRKW
%U&g*[B/Js5rZ!k]Du'U^N"k&k-lGIl_2)MkK5V`=,*Rpt\Vhm@@BX)HZIsLcDRVZjhMQKtj7>+lEX/>KU'Ak]G01.T5d@GmS13i&
%Hb@3)K-AQXota4ZFc]"q,MBfqN&o3Y[kn#)3GseH?Fp3&CAV<s/dPBs3RphC%2jRBG6\63VU=jk4qVu5"c!-:2s^cEjsG;6?5YYU
%La]#nDplU%=+a>"-4RtlDf@6Tj(or!X1e3F,K;idK$Eehd:sP%@l,0aNC.H&4&!(1R20NH3t_<pS:6/]U1fHEGHd7"N!CjL%7l$6
%r0PQ5#rs<4LbOi;2#;\\7[I:7d*Qc*Hrn7OVC#X/'"5TWg.H`sNm<G(R@m^YmLS0g#F"]##MER02[2\[Rosjf5q<#]0cE:r8$s0C
%iW>SOkkDSMqGc^4-_+C6#42rga%E*k)E(-ddKeba`%(fKRMabOAO/86e&cij.,Zcja8S;f[]2>-.EFF`FYq#\62A.+En1/%]M`Ke
%`XT4g$k(<RYgaTiO%JB,]lH"JWjBfk0<DgeZ=h5Y%K:5q6\t`&*8Yr+G(p8)Lh6Lj!\%FXeINBG?9tZHPHr16):lF8Ttn-;n-"FE
%7a_CdW7aF&j3<O2c2&NA+_trU,RlUGFjP'7s1)s\%Jm1E?Rg8a&]7&c(u"agFb"^Nd'*"89eqP>=A%'l7<="findY[ijY-9R(FuT
%i4U$;Vg:nQB'CJ"NFBPbGfgY=XE$r5N8&4g!si1:bEc7mSA)b!g+">dXkFQEh/37]`p*P?iL^T!Dqb&N/_`UqS>;G`Or1OQeeN(Z
%>7Z7WV&t8Q9I0#Tl%LJ+S=8S#D37Gg7%<^e9k3]mdL%keD+,hd6q:"`Hu!hp9GKO1RhMDP,Lu:M/6Z>!DQaM+0WXcSfU>YWJU%!.
%g/]/ep!i#VqPd90A@+7+1$NM:WJ2FtV/?UY/Ct&SWSD`6k9)))YrU0WWjVM'L3(CtZpJC%R$6=n`=82gb]KI[g1g2H>MNpu9Zt%I
%,3`!Gj'GDJG;:1_3Ou0JSXS;MGkZ'J[+[)Fds!*a1)T>LMnHSs3kJWW[F=it$8PsaWD:,`l;[@e=.F$WJ<;0J=F,$#%qiHi-^<7-
%NG9&mkguIF6+0cpF"B_;<d6`dDV(T8kdrWeU+'L,KB@e^FbgGYA=.f_jdWNGdRM_'[/glYjVXE=aN3P6p+ME/Z<-f5D6'N[AC;G-
%RZP1j!`Yb'Jb2QaTNQpuSN\t,^oLLg)WlK%kO@KA[rZSf=KVXiAV"$N(HT_p))j5aZ.#I,`(\D@bXA"S6(1jhaBD(S5jg;q3/j`J
%c6"0IeUT"j]+Wu;QMAs6iY4'#?npKiI$H]*Qb70*?(PN$[<n(!p+t0V]]OfZ:2=(#AS/jFYh%R=-^30hhf(PS,%R%nB$EW:(4jXt
%ROEL%LAWrg)W.!$VVBAb+fl5p=t@i^.n'VuH,Ugfkb,+HC`:BaEA5tGFCR&#&oNEZC\O!hDbp/;XqKumf51bjZm#V6,@Z]7D8[&'
%7)?1^#g>uM2ogZ&gC576)Kt$;f^K>ao[Y,;dM=\Y,7e+?Js`k.8+/MpK%rSg7a5h_D0/pY)SISPU!:+)qr:5JX.LE]7\`OR`D&5m
%2MuU=>-h/)W(F;tleQI&UI`/udGSKa(9N\15/rFeG)a'WW3"!`>#H4VN]uE&TJe0m9q+GUU#-nc.3uX\5Jr:@?suM3e-JAh2PWbo
%#/dp$;i?bY"`TCNA>Uc_iI-KXNN<LUPtD##SZooS)u[Jh?o>EiE&1!]rRU#*MXNTH)-OLe2j)f_VI+-#a`i#WHM6E,q-.l9+?a7H
%%Gj23Js4E0+X<qfRIFf5)ND@&H!m+5[I,$U!q4MQ3-r2^C"NJ"FSe+Ob'%%-QM^*l'PO\3CUPe$>R,-NMa5Z>CMg$^8^jpoR-:YX
%[]L9.Ga:*la(f+iAa?EQ#CI*)7VNdqR@<ECp8IT1DjWqo9o\urh6=<S'=[%Je$`[peEi-@%6LfrD+PtkBTQArDBrqYPqn)2&\I!g
%;q5)c_DQOR[NmA/3)IDtCcICT[<tK]noLK%(Ln;?Aja/mk@d8VEHW9g(Y/e-BP/Dp2;@Odb*pM]72.Oa>hmi?GmR4&\22^G+X4m"
%<s#`t.j!IQK3`.SI.1B&a;&f3Vf7>$Ng9odE&8NVaH"?1+bS>_00NRIec^ee`erX@F_\(C+QfC)g>cBG%3p)E=rY#1`r*n`1tR`B
%e-seL3Z5>`K=<sjZs2A):)kbPK>+H%^m8+6KZhGf7?GpI*ZGM;=g0SiPUU=#SQ3"n+0G_c(gob7NMhD0jpfGPP*7Vr(BgUi,Vbad
%gHHP/!6:rCfpd?SrV<l8P$6&Fpp7*WKi[4s3S'd_q!`jE\@.BAf(l6"4_lS:mHN9M<4KB_lPtg@T7d/C41q'!TO'PUDBG)6$edU.
%QttG%0Yis%)/><7<Don$+U@]PNcdStpobguOLm%`*2MT52@*RCF)Wf3RLEeHRSb4H4:VP$T48c<P%$N9)-MB,Y5X+sCs1M4EPD4>
%Y'a=&/p82QGN"!HI4>DE0+sm`J#?N?L2L>U9G;@.oBX9ZQRfb*>YBErHPQ!]Ca?3V@t:iNl0Fp;I6GfkE)ONc6t!.L<q;GPn@3XG
%4?Dt<ZDY\189>QLDGNH6@`>`ukb,T")/G+\>S9qBinf:eSG#&AGie4n2]UYb5f<KUnbQ$&dV.8Ro\fC*iXJX<Qep*Z*?<hn%1C4>
%&Db%oiSd_6dc_MY&7ZsJ;fXAXOQ\joKO;oTjK0u?[&66uhC^5!hJP+c)P.r:+/MJSWTqcGUc`mXh3=/%#<8'Jpe\]>.duMCh_9M;
%+f?_CR#D,c3#,26K5ZlF^ak-%k2rN$%Fn[&1hGQMYCE)2!-3N0\QJ%srlV!u4QS7@Hg0hlQN<qFpN`efD=+G@%8@BN1iK@NP[1?(
%TPl;cTs]/QA;J`)MR#CV;4b@u,9[u;o^Q_urMD%`GOkaDc\Gg?0dTRPjHSgo?m"o=C4[<AZPK#=$oKrQ\EmEcI8QU%T9g<iG@0Ap
%JY?J%$=GRGQc-cZ#&F@K]%1^f+3^GHGTTFk2tptI:sX?pp+h?B6NkC;h;J!2CrZTl@VtMpi?W:N20T!BPk0`1"&o8Q!O%g(;X8aV
%qofJK:k!np>!h&0@eV0!W%F]@;=4ID.D"W5CT2:'"C,GhWN"_=ALQ'7XY%H'b0!HN'153)fdpR1(^uth8*.:+K8JreT%_h<C`Ktq
%RmS2s%kXJ%:5&!l,!("b.b$E=,phE96Tlk%ep\6q@l('Y[:-dcJ4dURL<<,:n\H2[b^U_imTuNQ6<u0%ig*Dpo$KHsoie#X=G(Z7
%ZPHC+lU#l9F_)&jZG*qRCO]Z+:_=NSE903)@n#JDB%S&r;d4SE0'a;!WdhC`*uY10^_G:5]a'FFY1hs`Li2V<jI&?J&,QdF-KC60
%K/qH66XH_acBB/G^kMr=YW>A+mb^p>:f"^jW[6/iaNlPN!VJ/Q%"2:UR@'ar,eqjOjfI&JlIA2`^_5qoET67`K*n-G"'cOXKU9&+
%e67+aW`9RGRmOf6fc=3^7::"\mJ>0:h.,D%SBY8'/Hp(e;bFk?l9je#7=tqgUBg_)H<&-m5^c61c]-PL3Rj8Yc?Em\,\.)ok2tde
%Y&9*aTUkb(=@#(c?;%]#3RmW-\9^(t5JU*pA]%.hjWqK.Tf-Js@IXKLJW`^"2HIj5^#mEb'=f4ce;s\\!]+"Ch=^`ZPj\5Wi*F=#
%Gqt$L&;BtO%N(jV]K`R5A#N<)?9HRBM@6,"nlPpk@E`FT\Tea!R\qht:2R!&'d6D[^/@K,2?(/:$<$C>Y@e24)H6hDjC13\RlYft
%^sQkpM2g'Aqe?j34nKYcHDUQ(-\\!LNu2j7)XNd(0iS9Fc<f+;H6OT\?_7G%muZXW<oBTBj.9>poU?Ul-_"GQeJfEuC2,?_7uM"5
%hDTjHk#W*a*-Ws*,*Se/F'9b`V_n(a/qBqgb7\\H/ajde6L>s9Z[/&RC9=7ae^K+hm(H-PV[/5QK9C3MG&Um_H<n$3I#fkN5)+a6
%Rl.D..7^bcLiBbOm'D"$/mNaQ,3D[F]Rhp/-L&unO];Q=2qQnld_NBP@ZQ;]bssa/os?($Y,?>A:JZYu7&cglD7[QOn?A4+[X.mF
%GeSM1=?M"($I<)J+i@6=BMW@$ja(.>H@9/!-gGE(VfbFe"HMIW:E(.?oW*(Md@e#sju6Yi<_kBfU\!#'Ml1Iqn`3p>=;.gu([o,!
%2U,Ti^\"_<GK(0U:SlI,GKYJl%4r[mFF7'jdA0Xb)l`8oOTn9@.#kjqS_2nfq9t`2.C^UNS6J.)#19ufh7MS`'Z,D/c'.!'qH?t:
%r*XV5,h_&BE.`5g8l+ieV=UQ4=`Iq93o7^Yg0S?SpXfKu5*U47k\Hksa@G(oKm`M@Lu,ca19Z,$$cA)55S!FT]S5&[p4tMH4mY@I
%68X"Yl>L+*mG:RA5D2Glqi9soY!kFa9g;g=X!Qg;A^5Cl>?R6"G0e%L)*0qC6oPW6rYaA@nIBZL!!Z,j`pW;sTrs\c;+miSq'pl3
%J4`LX$lBl,Vk)k&("?;(W0M=jKA,&7>go>qUJ,XFgB+[3aK`A'g,=Rel1.Yp<dd*[f]B[K<LLLW&Hbu8L*JJCS-;mQE?a#oaW,'^
%rm;?.U2WoVgB)\CZ"mbS'jQZ_("BYm.K[LDeB.NW2,peY/1Cus9&0j>3H:hd;nJ>%;8i!3Phe,JgMNFfURniqC$_h]Wlpe0N3jgM
%6`MI)_'En%@tlU3O@R(Y=J2^fEKS:r+d"R>^=q;u(IQe`8H&)"LBM9EBrDF8"oB"'$SL#?GIBM^!J7.t\^-0_J:AEnfYB^Z8oK"8
%RR/u6LJn?-ZHVYl?'l47@-.4nIGEVN58na90l@9^TuN-^Z1L/YE!UM0hCEI$+.-`8irL;7nH]P3:4r`/_h*o'4SA<ncZX:1INZ)C
%$3t0Q@W;E2/@Cb^YX5/tq*@S%RY;A/eL(R$CIHV`*rhlM@b9EM__\JPLA8fC)GIE+7V%+7'k]=XogsZCT/^RT$o&U;>3\dc:SYN^
%g^]cm.?:</d`\MscqHP4QAmcV=71j%n<_."JBb^9HG;0,1$L8m(!k-`e/)_`&PV(U$_k^M8daC0L,oSirf0lIn$"%*QN3-Tf7uD#
%SJ:X5@brphhgK0S(s_dE`1e=QT]@o`B*%RgSo22A6JQU,'$k6Kh9^B*;/JV[_Dn@V9Q$PP(>7I^qKI[k,MB,fp$D2M>6+WY`2HhC
%rC]^qO1oNK5m\26EKFL>aQC@:EjTO7jE4C$N*6huQD])`e?'IpclQOa.Jp%P9tVPUL9<@'F7qN*qEu=l\DVt#5bP"H1Znhh&%2o*
%WWT@*ZE^-rd/%8\)1fgO<C3,Am@hOZZLg9$+$!%E[0>d`8H=.,m1G)!Of7RtPkWQ[nH0/&gB*A?n6Uo5>4CqD\X@SP2_D9V9dgVj
%(P_UR;X>^5>:G6p\f2O:Pe'BCcC360\RH8X7Q%$3@GPhNoH^mq@Ujhe]!,%ckN4knFe[K*e*"esXbr?m80;#M:N]'CCq]<0RcTpD
%kqgO,p7tE\nU'*Cg/rDZLLB=#IH+cTmHGq()te!iY/n??/A6J>De:)YQBkqB9s7q?61]NjkAGQ5ZaKL=-JEgdpTQcS)5Q#'B[SRO
%MqO'`I]t$CH+-]Nm_pT;k-CLAWg`'OAX^$)@BQr;Ye*hVBmO,g/^O@NpZbYBB,*=4NpJcCb+861&kH?d5,qbC=Nr(p-.!'lTrE;@
%JZeoV4lY1^YenCd4Q(AB3#EKhH`tG",R=er%#BR*a9!TK/4ZG@3ZZ<$+97AGA*-9[=9`hc]Jm.GJEG-%hAXpRj-YVc)dtiU*!bX8
%W36:K%iQbg&1k[?ddsDU%"Ic4NL;&s=t!__::>sr9I.bh3NVc);FJ>%Sf8paQ6?UL%P1&"AR*"`_f9X2(A[@,ei/C&C^l27k-Zo7
%ZbGF$%-51GeEU;'[6C]o-=2gNH#fL=L$ObhU<:s2m.A/.l8DZK]k1O92Y>Eu\dRmc9eZHSO(aHB%B"EK?g4j^fZXnbP1MLjX3SPG
%9f8;I^']1A2QkshJ_[>O[-9?5iZ-$.aGF,eaO+CQF$ujK-tdJ$Noph(Y`PltT)K<;%2'[*0K0(iP^mEo;eClL;9QNZ''VD..iqIX
%!e-.P&J-;W(`bF?"eFh[-]iIea!_Y#9[cEVoTjYYF#GqDflHe4_aXKc1UF48c1#E*(`OBR\=mY5M\3L"NCQIOBYkOR3U!+SLIZ[@
%39Rlp?LRaH8gqlF(ptO%:#n@`MsPR>eqLH*Ugn)rT\-!5i+Pa]nbQiEg))Z=W@6,]\`Vu\KKsi>f7H8jbhOeeBkppXAd8+4JA1V8
%"NoQr\TaB"m\Y18kL]d5SFp-c5;ggL&Di#q>XiGPC_;:OJ9kF1'bZNpMaqk:Tl!pJB$Tk7M=Gl=C$6tLkR,2?ODRfHW]k>k+W&#s
%0TI0-BA5@!;2!F7^qE/PkY3-qp\PDc-kW"o=,%`Qq6q_J=!m3fF)bj`b[=g:]1/)JKbfsXcqq%)bVD+NVkk?I4L^Df'DEHA)u;0s
%C>mD_h<<X!04F;b)4[#@N=0j=%,O?i1J9YWI07/76+W&ij^gs`f[k<lPT6O8F@*r/_]alZgMXrdo5LeMM#1I_gelSLrJuC;K"Hu(
%VX+CPjuo9ETM87Bhgp`$[L:,H1lmSJ)=WF`dnt8_g<F.fDrhb]K*0*7<-Pe'mV^fP>au,b,]ms0f_kFUQ]oeCgVO73Q2@8Ca0"ag
%\m3lAF8CP=2r_Z,e"EHr%=_k@`f67o4*'S/dpS&U7nsqHG4rLR$K0d,(?F==MRX9U-qBF5?Sf8Vo3)+&QHF1_V\$MF3J1\mVO,$+
%"g!2@='.KROk[G!9jBQqBBE-.NRd(NW&<(e)nX[H36Oif_B$l?g#F)rglXRoIPdJ"Y^IL;G5[fuKr1)E`lH>W@=*,trJ3r63-LFN
%Ki@!=ljcZ$A:-kMeUj7Db-]j=6b^L%K&!jdFckE/!]TGXY.-0;%GBPq6q])jJEdsi:$@R`GLf)ShjMHrFfAEe)1-ZV]5bq.a5D3P
%cr<pBmQPI6<)^mU0&k6DRd/bTNH::%ViM4YZ$feFY]\H;Z,d7aH"j7kd$ktS_t8rep(-f(&2+uYG/(UKMqqgcFl[1V3n)\uLYZFm
%2b/%Z^-#V5A$XsK^r)TJ.*nJ#WsdYgd;n'-X6Da.UL[+a/)?[a]suX^Pfi7`rKm**hH:/Oo@_ad&Uh!=E^'A(52o-eTq'HCQB0WV
%$^L;eD/8r0C?a`0ja8OWdonqQLOHFJ55SMI%puoX83*:g<*[W0Yq01NZ(0.SQI!I8/hU&IB4"K5Z+ttQI.jsqe6u^sSBnp8cTIRM
%7ld2i/K]mkfHrl<']A68#8Wo954dXB)!T)h95ls>io6\@3TZ,?%p[X7l2sq!nr2^&]A<^9/F"6`CJq\K&>*gaPeV*!I5i?\T*+2@
%<!MGKS]=3qJEE*L'W&?4q;Y#bG@g8^:iB)kl5E%(Jr`M),Ecq!FN^?Brf,1,lLoq4DT:b2KpYVd/fR^!.Gf-iJTAf?0.$Mn&oIZg
%ToA<edP#g.?c!bkV1lh3)KH%kf.mf\!P,,9RIX!E'/$!Fc6C5<Q86RU[KPb(&4>-AlhD<?UTDZ,X??WO]+p,UOC)IfA7=o)f^rcW
%,mL6X6Z7]WMP`3a=;K0oB%I[,.8?=uZ(5O/o;'d<l7Psla_l:K/p"I;&;>G<2KK9,_Np@CLl*nf`[97B7W:m?;5jP48nL!$*1L9:
%MN+WW=,c;#C'r!V2MUOd_O$*Xk.UY<1b5%hV,tHoH#GjI[Ug&rCitaJRJ3Tq-8hRLF6Fh>hL/,W`p@d1Z)fB26p2@FLms4J(0ILo
%lhu#ZoA4n6%L#'Q'$YakA*/>69-p%>+OTiO@WGeP/u/HAC2_2"i4ZJi?$.bGB$5X,l-ib4A*KRj+1),3g#F60R!>0[NpHV<3kIUi
%\\1&L3jJpqX3Cge34nF"d#;HVHR$Ac*#Eb#<LOaT<h-2`>g8F?A&VF)W.p=DZ(9pdSL0-.<(@XB*JgrZ'!hW\6ggUBj]U:nJ5U3L
%W.?\'DC?[t'bt5TmdoXP4G,/!c-T"Lc4o2U;lF?;=`!*H>*ie\fcBMJ[',*Bf=m*4L.Gl\\oX$,T:@0p,q$5LQ")Ad^^$0npT.'7
%F\'A]9_UnsDf$9`1`_eIW]!^i2T(t4H=NKYYHQ<BR8j%Hc0e\lhIrE+*]gl\DPB)'6aQ"$XD)YEHH*EXHh><?oDW]Cd@9"O16Rh4
%E\X2E#_hHF%>T8>KqgR\lZf=H_)t#^LGNhI)q[YT:3*?L>V(1gK(i(l3,=),-%X:?K?P1d<Jk1+g5m?s)+nC5SO,8io[02.o*/We
%3Hknm](8;Mlud?l->#&4"R*pDQ7b)GD<g*Xb:$j^lP]?>S0`WEa.?^US4ibq/]mYCF4E3SA[4;C`hn:*_\FjeVk$)DT695EAf7XM
%V]d&l$-Y!]Sh0``JKl^'T@(EI`Hd@Fe>Fhgbk;<IVsV$ubi?PNQ>(\=W6E.>\'r<AZR<ZE=6@bh%(f&ASh>4`/'_@BA_sf3m]rV@
%.e>dfna5JP/ZCLdau!UJhQe['9HpreRsm8\Gol!##.u]q?=b1d"`0)-k,QW]DBN/\,uead$YpX,G>ZDl2:ngoW&Fr9U6>WgWL'PB
%lRef5;W7eh9@r?j=L$Vgqh.W*Nm*RAQu0/HGGIIbG[A%]Kl<Ob2+pHjhR,*0hD*"'rd\JpFUZuq[(7;O:O<-&H7V2oltP[Fd%NH@
%BJL?1O7-<8#J><V6abaJ6>uh4>![J&Asj">jlB@O.<L,?M8`23W*`fP;9-2A):tX_Mi0Z#Hp-=gHJDG6c+,&XQ0Uo?hd"gh9V%%#
%FAS9/^')="@rgr;qV'BhT#L)O,,gFI&nK_`;N#((QWbY]]8RreVk<&babm.XjV5h2Ng<Ke$b\*f8/=6i8s(Z(d^_I'g:WA>++]#t
%@WN6bF#K8&4k:@c@O,@Hb&Z(.APjM6BsZ@uc!$?%N*D4%ipqut(t"XMHu!&Q2aaZF:UJd^RI#=I,o5UqfE05Ib/:Z<UX?Sj;'%ST
%ggqfWNG;rXg7<\2Y,(NG3>_:Ppb=V?=.S\7[s;N2gQ2%,&Kc[J&U9&e`\%ZjGF$LenHe5:G:#j4?))jcSYbW:jC&Vd;&^OsfYX">
%C,[]]Oliu\cJjp8<>V)iT?#!6QiQ49>k_O*-fO(^9=Rg4"rFJp]n)qqd2OQAgqp2ZQZ29ePrEZI96fA9p3Q$5RMNQpUO$1$hL-cN
%IbGfio7LZF.=Km?cfPSJZ`%8&L=I$SNOICCr8"gXZ9)E7rSlS+m*>WA>O8h&IL5W;CFHg<-Vc7d-J!:H=iOpc(].[VMDoD^'eU_4
%Tc,Gubc9P_>c$&Y9e"flrWNPW:j*)QF'CnhIg5Ub"%/,LZ!ZkshQH556a24nPb5"b`I8c`d@7!Je:nF^MNG)rWf0+Of/tt1Ibq!1
%`3i$BUGl_=lbTH,?>6Qg(_6ZI`TdLP/ONJ.G,K+m([X?GC1ON+VTP_6]tl-r^j=-kALeV2)tI\MQC<F041EBn^XllKSo+00>>/RQ
%ArLG>1W=dlihE,XO@m:J_$)s'n+>>C5E"6;9P,`2B:Fo_e@7#3dgTaPN39^pf/'`M):@e\_p6m"\IRAbD65FG<+^o^gZK'lHF'2k
%fP^\Xp"X$?+U9jW?*)s*6gG[=[!ZPRKQk(=`H4f&i<L0clFA!8/bW`-.<LhY47B;!L&ga!$N&VtC_eYi;]BdXI4EX1=4h/?*-'Vt
%>1dIG'"YupbecP"PdKMIV%r^W,ks%!Yg87^,c\T._EJckR4P,;c`N@:Ycpn^-<es_'^hQfYg4jGj8!J:C^V$PR8ro_A.:+gfOneN
%)RG0a:tTD]e]2KW3@EL]Yg6"g;NG4RKmdQC@es\nKmdQ5I@L>GXMR.WZ]tZLQWi$SO_V;j_EP</k1VAp0C1L\b%"fI3DX(U%FLJE
%fXFhS=VpeB,ML"gI:g)Fk*brO(&"%qoo[1tV&&cm<V75ooJ-dNbc:NLKZdpAp6g'=2N'0`R&@17XK#&<LL*S]T:)B_\*l=i@@r)j
%GR%9AX$/U6>l'6to>;L>.*YfFB:UdZ_d[NCr'"S%AFpJ-3m!c=2h+Poc:9];]fr47])'Qd6*Nf=7l<;mGDi)Gag%pOr63)9#sqgW
%b2HAs7oD'&I7@k2C%fX$?eF]?CL`Z=3F(KT3@:N#%Ti)O?.V0]Qsq[AFdJnE]Va:/Ci"ikQpZ>fr?Wj<=\jN;oe+^ed:JclD/p<4
%dk:Z).+QK=jaS7;gYDff;q@_7Yd(tCcRj1'QiCbS)cnnFb;^^$qYn6t:boZ\cW#!IeN;'*q;69*dd6rtqs5(7QiB'#[&[G%kKElf
%VH%lD[\&YM=EDXt*pYVnNg<`+0ne;dQ^%K&OBY13d?1L-%LXmh[u$cTDtXT0,F>-]2pJ#Hq4@"hqW>mV2JQ#9kHiGBEIXUSMt/iO
%8SUM`Ut]J)r#=Df`dH8'1_^,=T_[sJef_!-Pkq]<cdG^nYXbq)<%E>Y_;^u>BYM83e;>7UgF,,_B#]iN$[oEh4I.9qW2'1V^n'`o
%X[<n]@kKf_/@/DPFf3/4k\[J;?WBZ:X*qb:^8Yl)YI;>dP^P+.UFX8N]t#n\gf0no[0'@\&'i>AP+%_c(Y&'on&;]Zg:j!3*JX$Q
%;mu?/]4D_20csuP_O0ZNQ&o<*olA+=R7\m/V81>`OitGg@`KSnZZ&De8gk[g^.Cgf36$Jj[-.tVjJG,AHc@`t1K755Ked]UL&GU<
%ZH8uq,Pl<?&dn6g4a6SV@eF;K0j5o,\6k;7merW<BpS()TmQgHN%U$hs(3n%1qiY0XSB[.U:lsfR\j@q_ps6pi&,XNgUnQ;^%]i-
%WkP!Ms*2T%o]j1OP;b$bYa-s\ii6k7b)Flbii9'U>eT[f0gA;GH<^/nGp%?YI6!"KNn(j]cKN+c/KF]",JN=RWdSgQPGi_Ec+,'#
%eb<Yf0KrQDS[W+p)#YG.<04CQ'?BlOWib)mH]@0nOK,J9f6c6%;OLU`3>PM<\5VCXC8nXbS!J8p3I(;IF+\f9FHMdNWfUt2pY4Np
%FE&V[SI67k[I77">\-T4'N1q#1q6`;74jcdM\1q?+"f@(+(h^gD,0KSipZLTUKK_(A_h5&Xu3In'k>Xn$RK)7baZafC8WpZ9=kTG
%Fet-[>6Z8,eD3#QY"mMfBA!tCY!\YD@Y>K95k]d+1S636lFj#(oU(kQ44i;_0tCg&5,;qf0!pnV(I.>W!i5Ea)_$Y$?Dl>*LZs/a
%1VA;]qqg78j:Fol+o;;,)FidkH<m)X9u?tq?b..9AL).Ar'Jq@9t)T`d^gi^rbB#=b<eU.nf"d9#7U#k+4f'5+YYg`%`[oYCp)_I
%Iu0IfL%>,_V4Q-E=4<"]of"D"/\A(Jns:=qI>o3J1KsZl)iO;E,4GK3pJbB,Q$IiEH9amW>tM4*N$X$h_5\&$Z*o,/P?t?U!Ng,Z
%!LqX1-t\==:^Ohl=@1hYqi[RPomdXl?$OAP^tP)#<+U0bkI$!.h1#oAl/oCEAoRkFJPLs7nBgHg2)VghRIp?9m1O2!0;Z9Zh&_,9
%e+b<P5,pT97-?"30Lo:<`n-\XVWEYD9RtLs-WTtFqH%u1empl,Z&$r<bPX1YF^5-"XDAK1Z3mJ]>ScOn\7IZI5$ssBA)`esbu`SC
%J<4F/U&^Ol>Xc7D@&AOkFDe2>:63A^'"9Ei&"=Op-#VD#`s"$-0.eg7[P#u,MMJ0UH%:*$VL,XB".KJ3n;JfRG/\Wb3FEp,c/gk$
%Em0*D)\][q!Q/rE#3J#p@h,VYdu06"qLT0ikV>0Ro;,t>Rq>'0k5E^PkNlq)_0p!5Dqqq,LakRD(d7:9@H5p5/hL_*kW\>o=3'_a
%4W4N/.%UVZ%D(<op=PqlNCsm#%>$o0i`)6/S@!9C\)uc%Pbua<S)Ia!ao_E='QJG?W%%[)Z+EY;djQlmPA\ODL,!s)N]M>\V;GB<
%G(!1'`r]9R(dp$`ZiAk%plH5iO/MAnVhW3<Fc8&s\['DX-XEu5l"2J[1UH6Q]2A"^&fm!AR'"f;3Qk8.ejXb_G.Hlj9Qf0Y4tS8f
%pA)e3]=LDDpifkFC2-#A.V9LsbVt="<5-.W]t(X9c@'Vk(C?LRjY<`uL>JGJR2H4kU70/ODtZ8cZP(OQ8thZ/AlBR+<Q/cg2KJJH
%SA(Dh,gg.:RFWT$dWoFV8T\2$`g_U%PU'Fgl)B!I7H2ZM>Vp,.Fh0(pFBagiYri01<Crq>=Y`d'EF"ak[N:QNg?]NAl(UIB7Gtm*
%d;;%@HV`@1$dZO.nap"W4(qpjY`-a4XVcB+QPIdY[Th[q64Z)XdFl`Jm'8skYkb]M$Cs+$QZ?4P@;*92!LIh0Tij"g03hQAZ+)i2
%ad3a2fE)Fe<i@*=HY`sPkY,bI,,^<0rk_%)%W"_7>+&`B3.!sE>SeHM&FFG)VcqIU%i7q,FaN)@I0$!R)5gZs!l-+PC?=Hl6W^0h
%/Ul[;T'^BM,UImG(EV9X7d?05(:iq]hO:'/:7Cpo6QY4NgCC,+:i6@9L'nOZF/<";c,(8<g*5]e6EKcl8XH'Z]("&f-+`?Kpk=Ls
%[iMbKYD"Vl[*NFWQrHW%?NN)bs28e:e2-^u(EV;fG%f)qS,:&iq`ohTp@,.$/j-L"YD?@d_M*d=[iN'C1kuGLB=t-]h?ske]bmeI
%Xb-:'?[-8AMabV-lk^_shfe3YFLo!Od/LI@V?ds>Nk)I!NmVl-(;0.`H:JY<\!ieS00HU;nb1o4CmK&!TnO>W[iKc109:1iRO,k_
%.Cj+R??g.u=(Y83o3Za@,P]c*LZVguF'Ns'hhu3ACRtnE/UF*SqI69Hf5<0fVc"/Z(EU.\m9TM(6i5UJ<A9>;Gc2A1R@/Go3QgA%
%.^mT<I?.CUd]=6+g>@(`"B3"liWs6WVRif9%pbH107Mk'lc$O9aYWfWL%BQE7T8.(_S_eE.($MOcofZ4a+];tKc^//LE<K_bZQS]
%>YM$*^@9M+pn=4dpk=LY^eB,o_bT1g(EUk.M`]OELM"55_(SFsE7p@H#Me?]:Z:<0qTt.U]+NM&s*:KY/">9'4YBNeGJ*E!BRAL-
%<UbJ"$P1JhY:RP64@*VnnBen.D/*r(.(ljrm8,$rlbY1D$P-m+Fm=fAgP(FV[iNcRHWg][4'TrkCPnk(Kno@;,ElgL?[-7&0cG3B
%kJ-N5KUU\5LSc"@o3?NRO/?QijO\.qa5Om&qs<@BW;=.C*h!^9X\c7ZNLJhC6[K"*q9-?E=07R+F5`h+Y41plV2JT'33=^bgiatK
%VEMB@25+d%iFH!JrAkTLSqr*7'CCI46b^=/Lf1^K0f4Qr8-J4ZTEtU(Lb.3Al%&(5e2j\NC;3#*b'Khde_:6rft6J78&m]H3AGZ'
%M=o-MC([q,Wig++lE$\(2kGVjhCUQPn((/)di7!=ap#9KIaZ''m>Ll"<Te]OPY,:[U%B)F#j%iQS5:8KC-q#E*>WAp-Zu-6HiFXP
%]BrDQnlSWh2HL-S)rZ,8q(CG.j0!@mZ9&Y9_`'d<+a!)fSsudY_TU-Y]268(a24m)[jA[.qp#pF.7KNLdpQCJM#A9(;G[*X>KKSn
%&h_1#C:Y/J[&U%SPOpq=SN"k*+5Xfq`nf<oC:ftm34l73DLR%QXKJFq-bd"VgVuN1]m8?0\h!1O=C%YF&fSbb?LbCa!k_e6l=r[g
%Dn");B*3c;0rA.5P1S(eC0YQ2E;i&@?'%Wr=NohXk`puJE_Lq8f:<_mU7?mh)Qj@i'Y6%!?#W<jg)%p-UV'EPIle>oV^K1*g.S.H
%`O&qYE:9\=geF>%$INnM$Peif6Koh"a7gY_dF39[i2n0bd9BnfgC.G;4Y9:L+fB$!SeC'XYCG^\jpahiDP.EJkZoj=@!R&crr%9?
%qTp0D?Tis\i"L@$onIO.b8WLVX*Ok4CC&P3:PuG9^*7Mp$A&gp(BXh\]?k7[7DPt<^KpF\G_4'akr=Cr\f>0JnF<c=52?'DpKr`*
%Y=A$Inp7l+('ItiMEc]Go[1Ffg&^h8eP@eSIGal-_T*etR.5mhA!h_H`M1jd>6g9E0"l]5UkNL[5fiU&[8HAUp@]BGK5m=iFYE"2
%*q2/Um0:*+NV1.@HVb".#7(`e-KQ>PZg?@2<-nr)A03i*i)EYt]V%jNkR,_[DF")Z#@/d3Zj/iQ%XR4ZJnQ24+Pl`*6liE*V<?7X
%"?j7+nOGTdm6r,Cp9i33fQK[?Ps`nDJF)`J*_R4ZMCBfQCFK[(ob>[>fkD-EdNP]MdDp%XDh(MXo^#G8*aaB>kk-G_"`$28n2,qD
%7!_2l^(sbC^+qCGB_E)MiF91!")_*#UVCqWhC6FX</,#XTp<62hRbZ:9Vkp]#uSED6`3o@bgnE\[^]]E@HotGWg*7eg/l7G(;7U!
%@<a.TL;(MZRpp&@;YF*$%O?P5^.-fC^(F<.d,<TZGo?m5Kb/s%IJ!%j9%QB#:(Wo&"$cYJ;'^m9[.tp5V%9@&`hqFNnH\\f.u*qo
%1];`Q]*r3BN]u;gl0I5f!rM:Pj1ZkgXgL;QSF;cF4TKp%ig&ik])V:kH9M8\T\+Yd&m3f-q37E'DSPu($_N:HBtg'?95t!(^%.tW
%[5($>qa&)R/C90W);dk^^i,H_`\2pG&bg_;YD1-tC.VSjUqJDmL?#Jie8XF-RrZ<Z\"1/<Y9'$;O#PLA9Lu8K_%P8Yinj*"];.G?
%jmRgJ)qCHQDIk^2;QOu0s1(Ef3`$6^j"\&;(i/L:k\->Pc]/NoPK)9)HFB:pVq3S*L$-?2>aAaGPW?t>(3RdZLHR[kM!dZo2HC@e
%GZD!q2a:iZ3#$oT!c[h]#T?*`V45(Hd,kX_9VTKF(O^Ni$2rKsU6!CrL5!4ON)?:9nbk/8\0&^JnK9\2OR[Igi8c.=Doj#/8g,AS
%B^1Ym^[+1ILkbU**f-Ml:WSh^nnW#.%&Lue[?#oa`(Y9I@3#c]7"nM7O<eUjkI[enZ5@mZ[[@I_&qYJPRqgpT44fY%2o@`kKc**K
%cnR*.,be%+,il"2q`mMsS<?.h8I2@$Z18Kb^rH`V=C'gF((YTn!p\uK+JP&5fTg6/g3=B&+F+<+,71@#FuVj43qR\G*8[#<?p5rk
%,@>4.c,3V>)Uc7l0k_B@:5duN_;X-&9F!8Y<,Vpc0t]]mM/O?iWk!&`V:"uXKVLl/-uZg`Dp+X,5VCdD]?#hog?Ms?]jM]Q&?V\8
%:t:PQpdX*KXQP6]nHI&)1IXP=6E?&4%486;%bF<i:FaJqkc'&Y:F_)@F3ONV;";8t%e-2hZO"Hf2;2bn*D-6cM[ULl1'q?g&Kq0j
%s-g[/H[eV4R:n6M"@OR&$.2L=g]a:9jBQ*++BEsBA#=SeSC=ceN_d'_I(X!dJ@Bh?bY"@%1&/GS1RVV:G-2a:,=2*DHr71>R&W#,
%c@Nmsk?u%1ZRTIT(Im%eETXqUB>hV&=fJnQ5+E9pb\8'Bo\*ir8R=oN]G=)\\bap<$\XAG[brDU%-*/')nUpMNtF4)F:E6D7nn;p
%?=#?fZabMf=3lcn+d*VSK"NO6&!9"t%jm)(\s#<%Wsd*THFCk&Dq`RS=O2URN^-1*$)E:t&!>W(P0IrP(h*#Q,(t%"$VAFn7htG(
%8M5rU?Cn;H3JlIFMfMSWAnOUNJXLkJ1W-jB.PqK_E(9E-_Ki-5$<54\2C-*-3+p&jntD?EZ7Bjb>b/A)N@+C;=3brk%Y2=RinJch
%+0TDp9Q<Yl3C'@Z%8[1`gukTV(2,$OkVLP,fH0[LkX76\N:KjqO?LT?T+A:@CQJ-7FZTKR4NJYl\!P0jcYUo;)MbrfTfM+I3I?Vt
%7WKRWQArDfr58fhPg0gtR\N<^K=(#pTPPNGgPa\(=p3,YTAYN++Wh:]VBO.YrZi9u$N%BCo942L)iPm$6A']9q'qlHcW(X^-i)BS
%gHrK9H4-"&Qd!YH6`n+)l/(2Yjf7i@!UT8N*+dKbBOGFRNe0qkdkd`@ocS.P\Ij\+@A/e_hWd<?,K[(8FuugRk:S.=cf@mpU/l"c
%[N_Q'f'4UmiC)a1C4cKVD@E*Ee%<*o^c#"F[>XuWWSP[Gqg@S'l<-X4s2d]N`IhK0<%`@54:U)aMB*I3)kB5J$!2QD9fBZhk\`\)
%+0??OMNu?PGODIZs&^HR?qbNo/u.-t!1R-tCW%iRm%gcI3h32b_3#q4GJ,ma"Zm6e\Z;3("bR#?^a6Ml["Q(LnR-OeQtV=\W>LKY
%gm79dB5rFunG?ZA_?[F%H^j_.rs_^2I#O!jM&71fHF5Z-/TQ:X4f\u]YiB/tS-Aq=8e=J2IfAtUs1)Bna'WmhgL%\S_.2I9JbH56
%mpsTRF]&-G:BrQ!^$BupSC+akFLr_VOjF<$O1-=<C9E=kdq-b%\E?4"3,KGtk@?O2Hb.8S%eZa,c3q>]&bpEb/]F`D9YD4!PK)c;
%QDscM=2XEgo%Z?eGFL8O3-;DI<Q=A#f+[DSS6h-Bi?/=+KB!g'PE3CR4q^e3OK&Ud(1-\=`Wnq?\*Oo=_=_prB7HL.EhQUU/5US:
%RUOme;1eBG)^h-lQ?1^>E5^E9@G%XFLJqKP[F$WW8iCa.^m_40A^.T:2%j`CF`#BSn%$6>F1^QGR"_BL$al#1bc]W3=6iNe/DHDW
%8Zg6Uar"g:o$cBXHNo-\G!fXo.DP@G>@O_62:Ek[(oM(K*0t;^L7AV`""qAPTA$>i+6Wa4E&b')4,#'=i.Gt*)skSehGCn.#TpN`
%U\1&A*X9ql\%Ua"psco5]O(>eIYOc)jbWo!b*T?7\B!tgq@t=;%=)<i?jlR\Nsh&5LQR5&)[+JtK<5%";u&r>mG+#6=6'6GVnB"q
%he_-Iljp,=ICUE!Y2rDCG%ugeZ1[,Rq<.n#njhR"XWj>>fYpj6+4d[LJ@n]s;3/5&d&"`tl$L2F'7E==0CB8R#4)q(fbi,_NBq5A
%W9;.oc/BR3pEkLl<hI465u@H9hQh*;;uo?>C/VX)m\DPVPs1g+R:E!A^GQ`BR$ZrQZ!NSsS&p19B\$b1Vc8FWgnbi&p7Sr!R$eEJ
%)2.C\3:,(<PBYl4eeIC=/P^_@de!=T3.rTt$LAaUDr@HR<*,T.MXWU!V=>5,Lr>I]-bTGB#MAYMAV,u@c\(4:+WgejCHJ1dC7pAt
%TN7*25m5]`-%%72SkI'B\p4m:8`.`8$CJrO`:(!Zg=c,C_Oti$q_q$W;"'7,ig%"FRQ17fTl#XdrU8;rDH35t42KeYB,:i+YW9#u
%go1$_^C[n@,5u2fL_h,@Cs56P1JYFO<Y+P85CM+@Oc*;;n@mXqC8_fHdr)`5[&h=mU\\R\Prh(*'9co4@5E8W,aZFI3h(2Ql1:Tu
%/P]uDC%HD7/],u,B"uXR`#?Z"Alr\e/i")8ZX%4M/MbsHP4Egh?I)S^YqDg9,FNg@4&4t=M8VUSZ'3MKSueL@O6KPW,$!V9nZm8+
%^T?fma4[4m21?Pp5*Tt<d79n#fc1\^`O/_JG,#K9_IWiXVlW$8DO2?A2`#_e6ZU9\NELl_DDu3%pB^E8nDEJ%0/oV6L,uPhD>8'1
%:)8AJ075bnI-\l@]NYTh[e<trZoJtQliT]G]<cG<inA_t^DaYRp92^#C#A0j]^`?\"g7+$,;'@E?BQpg)7/FbSO/e\T.AO.]7G"*
%g\>fof^W=IQXEsa][i6&1V3*$Gk<;sY#jDEYL)f'qVB:SQ.+YYfWPuE1kQUD]K)4k\CDW:5*O<0pMSJVOHuZ[HXEOo.0KC<)-S@H
%/'f@mM<m[h.<fq5p#9_kiP.qN8>]').^1Eo2odJ&^#uTVSpfXRj=eclRf2`fZ]D#UM9b"JI6@2T\Gat2=$s"&48X*c'[AN39FC^g
%m'Gp60@)hRHFLnrmHdch^V@bng2rTi7L;eH`u*4nc4@gD<pA'l"1m)n5?c;LVSD*Z*Pqk7,Je>p%T/SYV3e],1paD??a:L1FR/'n
%lA-B,rm!V!NNcT]I@O%)&IVRBB>tpfJIVqO!ptZ%2;:jrV=.t)Io:*mO^H.Q7F46T2Q-Dm8%Ch%nm+]6MFqPnbO3%S1JP6_G7?DV
%B7jkFPhEsu^qR]D*pi3>-/(BH#NbWLSQB'V,A1piNc]l<<#e)AKnVVC]aMh!r]>A/`_%5S[C[ALedsIa!L3)mO6X-(Jc4=gK<9#G
%Jqo4*pjLi90#nq+a>,jgEq8jlhRY+07,@DBDSM_`6Ug&#eErId@P(9\47=:q,5%O"rr,c#?_>'pqSa+Wm9#&NLM&nmW!0bArYM.9
%d`8mjLBjC\BK/,dj'-=*&b]dr#TGk^=%7jF'GH$i!Bd)pN=McRhj+bgD!&@UL_/4c'-XFiJNtN$!HoQ_.luTeU%&b_GVp[iA#%(=
%94lP+L9d5R1$.l:s%&tRof9>SFj9+]$!T.e4eRuM1*^Oe6st*FA_Y7,gLo)mM[i_dVEOeLce/Qfi-jo=@(@hEp2jIU:dZ=0A.Tl"
%hD;mm@Yb^B@Jf^,lc&sf=tHu3+KdLt9m"\$>44-AJr:*E$WtKMd+5,@m5d11jC1[Dqpd+8]R?TrJH^ae(b0>):&Ali,@[Se$u$^n
%U7(\j,;Rfi[2=(UOiG\'ecE_<*kPm=n)G_)&8R,rO56b."%G-AI1-L8,;lA7Lke2Z9an3ILr:iNX]4nnO2P5[;3?@<G*VudT=0AF
%V:B`.Z'4/thlaC+E5QC5GZCnpXp#@]g/K.IOjHEfVXb>Z\:j$%f5"`p$o>50#m+W'"0+I"6DPMP)[-f-nSjIY2,P$"+,$67Wn@d%
%@G*)V;,Q_U)B22LGIS-O0,pbi#aD]#@Pg<$_)Vb:PdK'_MMnajgNkVkaVLD0[[WDgn8;b`+_HgD!9Pk10ZkM>!XLl!ER@;9K_hEP
%hQPS66gu-B`48o/51Plnqu-o%hBd2)U78ZkRamKApM$&kBfgk2Ulf;;M6"PmWjbHfq9!RT$%TYT+K_1UDGV,cs$_sh@0\I5K6bgB
%bMm0b,9s'Hpoeo!i!A6<BO3*I(!r]e)F%YN,Y7WT21du*G.PV+KQE]fG;Fs.p#^FIIp9Eca/H=DX*D,,g+5FPn#q?-=C`]GTDO#+
%5K_8U2Uko7S@Zg7R^@\_e[)m^imfX+6O";KLI7I(`?pl1"^FWtTp07SAFJb+#E>?[IJ/;<YdKHd7H%l$/caPr#)`3B1\=`MC4Tm%
%es[Tb'?7Ckn8Zh:-Da#Dh#eMYF\kBNmm`%EJeU2eJR.T.F+LHAWW!`p+V*?<M8AXaJT<G)k#)M\OTbEOZjb:><jZpk-^$GK"9<-/
%"-,IZq-DO4mL52p*]`qESJuN<=GqkCn7uScJ5WaQ3R,[8`C:hodM20k3=:`$V"JCP`]kHXAEDV4lR?;$1D*an]o&>lboW%2htfX3
%,S_uL0mNH7n?*!40^E%8lXg[-qt<]i^Cj_aMgOg9K<);SULl9sW!VWKn0_/5Vo803<O$37Blqfo!9!MmP]g@7ioWdnm:D,,B![:Q
%Z'Qb)X\FWc1b<!V-?3KJ90DPdMabUA]e&\ma1'AI:-uNq8K1f!*HlLDJr>1bMA*ZSnJc!FR-LK]^@HN)hY`Cj+lD\timIG33]Cac
%_p(Ee<GphLIrTP(?`<.TL-V;crW+k]i<6'dX!!"5[u]Pt#iL+:C98e&M@;Zcnt]1?'op5Q,%\Eno*@Ki^`]C5'7;ZF>)Vd0\Ue76
%m_0Y$0G,)&ee-pd]OMGUdZ(!K?0'Ld]`q&ZC$"c6*.3Y!;ji.ZVtE8L*If5L$?1;](7F:%(s(upB]oB\!'pl;La8s)hdsolG_.U>
%JBq+YP!R)fkM*l4=XGRu2qFZ0%i<.L71>]MF0LQd,-eY.Ls`92q*^1K2V8VtRO_WBIJG'VP:rNBISn$so#3sl*;^H_UWF;Zk''4P
%-=<.>Y"bL&lch%k!n69=PqOE[iH#6!GK<]/8OdDD29sIK(fU%'-m<c["S#Y"76m.p=;sYWm%/p<UIhsQ!piD-#h_esMn%qVrD7!@
%]!8V(pr3PR+Y`]P+M&MgHSbK*<S]G7q#9gfVa]AUH,0]3q"U@Q,gP<r[VZTdmtX&X-a99RkP@`Q[r7U(VS#mH\*@Z3acu+m]W&Oa
%8^HFV4mDX8<5U*EncfMP3mXs.%$.EOrudGW"*@.3gqO:R/X.;LEdi(K/8k^qZF9s6g)`=<.d#o*A\8pXM&XH]'Lq%i,#pblTGd1e
%JE\$[D^<oHL'[ML/5%lm%Mr-+0lV3ZeqkJm7#pQ6e5dgd'XC=S7#Z:oI&e:rAa0l+@Uf2P"3nHq];Y#+@HT*!9pn_4$G64A4[]eU
%U8+dc=SeuWcgG_P.jH,XT<5RQcO\8RH6h8$pDRk)2'@n>ar>*6,Q'95pt/&Z9H2X+3J_YNaE\Kckt`2eVDjR@#sC\0pVN8m5<.c[
%apX/L;QI'+$.7eTmY!H_?J5Fmg'&G\)6)]X#u7IlXkmjQ=1?,E&7WH]^95@l31*6)bpl8aS=F=!'7%*/3V)<-%X:4e7a83+[?IcM
%:Z1eoS>^`U+hV!Hj$@iokn-=PNIt#C$uI^t_LU'_)LGK<0sYWUn8_(G^]QpOSO2/%nZW24Af(j*`#5#oEE$Sd$stiZJj.b'OU6#e
%OPB,,^q#N<a9>0<$NO+1&ZW_D<oVlMc3^AJjSQID,m"ID/OmVS\+e;0.:eQcHJaXPm$7=,f\8ENl49X<k^Xj;BU`:\[Ud3`-<31>
%'4A%P#o1dEM[1(SWT(`!BeEDiQq8$`\)nr<BJP6n?nmip#gBRXMj[Q7kRMB5MI<+q)*4ak##eb4('Gsl'J*9T]G[N&RWH*&@&Z7(
%a?eE#=JD@2AfitZ>SRf.BVFMVE`1_gT^Z8m5BC8KJ;k;j$lDY'"bE("@,r63,5+BCZJV6QDljD'(kj!0[.BS`K.[DM?WgZ7h'.51
%?Q#7JqdkS>VbuWJ"8'U`"f)AlE%hIK0$#,\fgiK/&%P3fKmbs_3k<2]i"QHY,[%BT]>u-%FUQ2bpB$KBV(-CUf+Ao/CEhG54>.u-
%&9lU%ajiDb]d,3s>_&C&$7?0*=c"]'HjSP\8=<EY@e6@=":IJ"ZEQVq$tK_VcG[u"ArLeYgfOnodOJNPClht"Kh^e\#N!=$J1]s-
%+`0)Z5\>ZjOSKLqX0-D4BDq9Kr*e#IJp>Am7/HMNH/sbm`OqufUC-1L,/I0fg4I_+kUE4qqO!9Q9a6oGg+gFr(/Rf`c(,XlMan$/
%9/JT><CPTqD&0IobH#*GqXeS=c!?N>j`Cf[p4pF;^.-!%>XEg<#U6^ec:Z'bdh`cq>E61'E0XBM'-B7oX1&d$GY:_MXs4$33tbqt
%kKjPc(U[ob-JF%P)&L[;%m:\MOarCKBFKEr$-57(V0[(CfZKfU6HmGBmhZi<mYTGJo2>)ZGFDM5Q45WDG*+6F;NtK\%m(!57$Tae
%'S+-4K_*Y"aB7/JLsB$RqY;2SiLA.Y-tZG&lO%8h//XIg&WN39gfB>sQX+/_,"@bL*qa!2KgZ?[`Ps<8oH&Qf&OY"uh2<+E^47F&
%2%a=X_;A]0BjMC(2\,N.(_83%EY^AA'+mTt!$$e31D;L3I.?\2c-.VG5i7mT$N?&p&YnVq5r11p)qDr9;&RZl\CYpgmnT%$?<GBh
%-@s]i3#YG':&D6SQ3:4:l^\?OhD;bu>'6F^b1kq1rq[eDh<Na8mR/\N\_$!XFuV1/CZ'Td?A2LAc.^?ln6Sn$e>NdX7p@8BlQ?Q?
%gMRt3,9g5"ch;R%&D1A/@J:'`LijaQ1CU5f71I/r$QC7n<d`W5I_L/3U+aJPW_;lYJsO-8BBoE%jTK9+^(g?$^Cd7rpeiH)NHTTr
%,/.%-<siZUPek+SoVLJNpTX2[BXAuWKm*(!AEc`q)u:A&1kl8FQ3-X^Bcmf:,"Q4"d#_LTZQMtJJ-3G7dd)',@GJ<:ht>In##g.O
%K?5Kq`5el$e:O7.puAVYYI8Vn;!&s4A^p's/WrUj_4*+q29`*f&sjZ8c5SXnU&jZW]1*7l;SN.mGDmFm5l@*@NJ1<@Cnh2=1^K&>
%;3U[\*lNFeI';:dK.nN^9+4:>c\'>fQ0NK@ET24.`J@^bJBWog$bf.60i3+B!%rQD7+(YNq3aMO`t.M.o4d3s]tW['LR]:W<)+@b
%?%Lj&DqJIOJLm24T"N`ZcQ^]/Q^;bckLr-!X!YX[7\iN&`gRA8$]u>Z9LH4cgIMbn/UsF4)q]o:f1UZ_&Q//eOr]\![4cGJb!*o`
%8=q)QnXq/@qX<^:;=P-]]X]9J&A[oe9nfQqQ0$8S>I]J5H\@30/D]='5tX,"]HshO9UsHK<"XU!+uD7hr<kn0P?Qbde_MVAC*C'$
%GE^VM$769mQWs)3XBZ)c?9bb'c3AC\+uQ?'2O429!oHoX7LbgDqfd(S'>e^<^oH*0'lCo-/sEWPZ,RnIaYl3m-eb,6UdFQ4P724#
%EH)e6IC3Kt>t&u[,.]\d$!qO#l?,a]5to.">Joc$3.:#uEHuTkh2DleQM-9r8o^&a^j55LlHloFKK4\$Q(%e958VUFk>_'+]ga#+
%d"Q%-M>1cRqUG'*gKS6oq6O(R1Ybq*3slr?AZ!6o'Ul:cbBVMEC[FJFpS%R1M)*^'gtmu\YCWGW[s\aAIR#2O9YCf+Of.!TkSU37
%JTNo6M?dSV)l;VTelH+)gB]1+BK<,YYUr<]>*U__eY2J],Fku+]6312e\4Fs1D%Vp#e29&Ie@8'>sJaf:eFDS(QGS"[,B:B+t]%=
%pta+-qS;*hQ+bST3,)?,qsW-<-hruUa;9*(>hnG@M5s!a^:h9/h$2?ui>MWtUceB)nR3o*U];'HD5fNQgr^&UK%h,bQChbBOqs?R
%KE[l6P.<[^F\6QM/"C?c[p<R0:b!Jt15#)On<T/DD[G*c6,I_GVcJ>P,p\M-c'Jsg5-hM6=9ka_r(8Hr=]<_</-NuLca%Ss,00g'
%PpCk-.iDl^jA0;!BXJP:'0hV@7<AC36T.st'?IeCDieVQce=QI&,Q\*i'p0K0/u6.E_5=3O%79&nn''?KAM^LlZ-n?K%r(4YA]a;
%[E63?Tt+AeCkopLJTMcGU7tWR?5l!Z(*DNhmYIR9l6672(nDf<qFMIZ`=Ko'^;mO!GM[_rb96GC,Or-K$7T@r?3mCp1[/6bLF*gT
%0..5mo2_4$3:ucH2O\f+Zm"URfts&,$A!2_<Q8;si-r2GmA#L+oF`Yr]e#/?,*0O`A^`R.Ij#r1/J,,iAder6#&XN0ee+iA)UV`^
%.$^ThU`gk6o[6N5Qb(XmPl04<1:r>OnQN8B\h@+Y"ct2qaO=<cjs5HN"j=9qV`-8``.J,2[V3[c57[F8<TjY&:A+\Q8[<B>GaAUV
%'fg$BdLj/6.Qbe8Yanc\+J3V`UspFF<r-Fp!1)e$4)4$jqsQR\9Q^9>USbW4^[%ig2e((qW'1*hE7CbbM,["4l,W/pB5Ys:*mF(4
%C04E(KtE];W*p-hmBiL)D0c`kmL]ojBui`3ZVj=\VF7U[D`uTA"u2?Vm>I[T&..:,EQTCA^p8M^1GW1q$BjeY1>X-D$Mc2&L9A9$
%Oj:%!W8AL+ooJnN&7#UP@;ufN+h,E!`$8ANUfe']-]du%;<3<l+.'2)`ofl)7q(;]d_/W6He2>c4ZHbo#9lUoE4\Cr,&Fr6kPG+W
%dWm+[D!0"*Gl6"8(M3[al,iV-#Oc:#3XQ,kN-2bBlJ::h8P&EU\$C7^*MU)kaB61"6]S`"D\hdI("HDGf:+rNFI6^m*JfG03'CoK
%1-&Q,IlX^FH*U?OCBnp1&ih?^"m2rc8hG]s#XO(:bGp93a)m\?-52eZ.@d\A8s]D6?3PJYkLW;&QPUdk.e14S\MMLng6L8G0p4L#
%ks)[XEUoK_Ze$.pQ/nE"6"gZCmHEQar,nLggVN`;jDW/u4Sb13b7u.'07tiU3eLg<!K=u&6Ni:=]EFIF*^ZP?7%gj+:ki299&%$B
%Z19-(j]j6=68V@Xr_GtUG3e=G3"hQG^=6n<6Q?CO:qoh$DQ(h>2Y*2<9s1PA'#ut5I5NocFu?fr.'\XE2q@!X[Fjo;64(gl39E^a
%Qc.&>`BN?@h-ef'^-O>H[IRQhM&"%?O@tK;,m7i=NACZ%AGiflaBT(j25he#%\`8n9[I62OPO.EX`Qst4`BNi@Q!C%JAkJB0m$N#
%QL7XQ&%PSc:\*s%5f@K]0SGr5hUn!R>ft[J9<]@'q%D`ap@\e*L8)>=]7lONEH1_^55"Q!$U/Us?nkehdP8=Vl[lBYU,fn@[k=%K
%7tA9,h<snJA()K">X"brk10]7_9Ctoc!36e@96@r?<D:0edIsj_3uUTX-W9.Y5)qXb7$iZK.4tR7W8")Tn=qd3PDZc2aM9ZX<1+N
%I2]f&bnN&@CQHP^\d>9nTp^'[K7n=5V+U4%ei@-fqsn?7+I!3m)+$!@7%?]%5.721,CaD_`DWAmKT1[Z)-7R`lep"aV9'EEJV'YL
%^Ui<V"c>LuDGcg2.8W..(ABbf4G-f,.*Pe$Fuol5Kd46)#[>#6L$mC!KK!1hn8XFI%BAIImc^-/cFq%P[(E)O(<KUST![V,2eZc'
%%SCb*)U@R,`=TC.%!fn6LUW+T]+>@6oNUdGd3W_<KISea)0Xmpa%%V)K`[c(YrB)`mS/=Y9(#%,HIm3'SX>&E\IkZ,3S6bJ^NYVP
%2?t&N6[.eiE4\u5k>KYO[hj%3==0i3n$>F&LF"E'&s,D(eS=f5;OE.[BGlKEcTXo>9H6PapX^-XaQ#$m&.9#M#_"XJ:tm>ne[30W
%iepqH4@-RNOJ*h!%oqkgV%"c5*RfPPp(8&SYZ#5$2COjOSKm38GtZV#K-66+p'W^\dkP\Nk7!O8q3u)NhFR!-q#@s's%@R2c?]lc
%7\04L>TpA;L#S[adK]`<m7(Zr2i6Ql\ihs_6J:c$)K:"!(LR:8U,b>dE,up(S$+pu?bV7jhBV:)YGJ!4(,e^8--H"1*#r@[$("T?
%f@`A"J0,e^4Nbm>2MgUTpX\K6?"a3k`\[Uk6sUP'j0l5jL>"&cka@MO,Qo&%ie,Uu`u_]<UYi+_LBs<o]eR8k)g.da=p#Hb3$SK=
%^*)MWH;>]QDQoh8@G7@iUO=9(2.dg-#6N.l\@m;[b&j/N6etE3[0Jf(Hb2T2!>)B<?J&i8$=W<>=p<M\p>@'n4[:"WO^ens7J4J)
%21q"\V1"+bHftK)\58-2`dt946m.[@^iDWir6k3#CP!U4M"i3()DCr3[]ag[a2K.a]5i]R-a>4pi\t+k!iO&h;Fof;.]ClH*9\(I
%_&4chki4Pg2aA_Rs0d-[h-(L_^OP]Uq`AVX(e%ggrS1nILa#I0k9hO4Je1:;9Ft!_2s7N>l'_NPrG-!f!Jr2u3S1jong:cV\uY.s
%l0A7B:\VEorts%po?hdL:u%,d_u'#.k@F[kD-,4A?W/cPBQWY.`H*tEriHU5Ip(S1e)-pKI;54qhRIl/P/B6sG45*Zf"ud,r^B9<
%;AX_@o'5hU5JDC<ego)?Ol>o4%e9D#QfUs]D#C9E?i@P@eE8cbo^i=meBRa5cJra`G&DbLY"/?5X2?d-\9r&ff,n;ER5_>HoAaCH
%rAHTQK_]!HR!/(%SEoCRj`_fl<M#bOr6jK"s*=9B=9%]L"9*FKj6NR;V5?K4$M9,>c\AXcQdt^)Rs4jdY;*fh51;K?qtd9V^&I2B
%l+R'K<)_WNH<!k6rhgX-=`-4ni9JG>C>0%T2>g/ZNsF9lrZU?T)\2nZji,#RqYT%QIu,+cdXt=K]m/i?n&hP@J+_*`YMXVCPi&lb
%6f?AL;Os[Df$b8mFM#b-l:>aR]PoW%oOK5<1?=)ZJ"+3YeO<mcq.LoIr.ekRih(_nfe8]:!.T=njNK`co3_Lhnrsci4uc]r*-]]@
%ZlF]X-]HSt!FOp6?u4rcGq7Y!9Y%nU[H:#L"tUVip6g1SC^7bahRn:)o_J(B>H`PTh1]&o>0W1QrlQpjRr>bba4j@AI63!aHJ!+,
%qVhPlO7UDnPO-;m0)p&3RHF$Qau=fqmI%1G?"sV.]>\LQEoh6<rkm*\6PoarZj&.jk2VnF4[/W!:Npa7J+*B-DsuIC5'-A?1a8O'
%E7qctmbR`udf%q05JI)W#8_mbk,7Zdhg9>?ddajU+2*.!E_R?gJ+LR[gW.JVj7IJV?oZV0m1C<Z[WGfhJA(`Un]gOZqXoWIgpm-W
%iUc[,3V9<?egp+t]J`nsp/eWU^ScqIS`t'"s68Utdm(P<;7l5`ij39QGPnbeNk\*EQ2e.o]p?FJp@?n?0E"^2$cB*qp4_^-4,`t5
%.lT,Oq<PYBGkLIoa7Ju+QTmRBoY\*3ko9B3\2MRShFk%WGibDT"DDhTo<a:eUg,MTr:893XZ+_ip1h3pr/Jhrc`TJ/_V#mCC-DJ^
%qp4`b/Um.a*WPO"B2@?oHiD^)pHJAH?"?.-"iBuqc3LQ(Gp]QeC]<SQ*n'l9^[[f^^R1XU2V1TFUW-GQ9E!j?]5Q_ThSIT/U"_e\
%2pVh;lq-+5lHEtq1b_R/5A@D&eqn(3;cGkB?[mJ5WB%[X;hJ:-]^QR5nC!6eOM,Z4V3g_-=3p(Gmkt9@nb2mW'DfV55@&aRJ%.g$
%&8qNmQVK,;L73S_e^HX0?K]ns]VIR]qW,OiVX`Th.nBtb^=P8'UshJ4^\N_YLHWpZn%X<t:@N\eGlR>;g(aM7MuAc`s2rG=%9SG'
%q]?=8'59E(k>qJP=-n62kN:VVJb,dgF)n:Y]$E%%=nWKWI-U=t:6*Q?%0(42=c\Z5ANp.`gg5D-1J_?=-c6F<qYKkLQad!@iSt=?
%5$R.]YPn"1G!sXh`i$P]H3\NIO+RSgfDHlN]Q/b($VNCjq;KFN;g@>\Ml2kjh>#NubNqN6h&1a4RF9C&AH#[1I;aS(QDq\UV>TbF
%PI>@NZ:mJ5RI;]Q,/:bKBi`SYJkeJDq_fXZ>YEM7S'tX'dTc`t.eijQ#.FHm\'N<?0n/ro1'con5FuXk[[=\rips93^A,V1j^2Qo
%K5\XY"!M&no!RrD\pNsCci)Kokc6B:rbBrZ1Tt31D0(b%_JZdMmX0KOoq/*ip\*-q^V9A>"#ofV;D3Ioh@D9`T1lqAlL+WF?Tn-+
%^\-;"_o]s6]6<;mq)@bkHM*1(DrkVM'!qfKI@RJqkASk9-.ADl^&M;>1B!"tcH5\L@]rT%;`lr/cPa=<)]@AgLZ]J\014]on`__<
%P^NT/C>6LO1B26/gYT>LkQH31Hof"e(^.#@QB:C;gMrZ?[I9Bp`j>4/Mcd9m>Cuk.NLg@').*':hm@uu$-<Lu);7eE(]X!q&&WQB
%AS?8UiOc!B-gYJb>b>rFG^!:8[VK+$m2bZ\`9;@dfVW5E<^+jED-D@9*_,c\gq57E?SeVm[![GpA9SGkDo+lF)14Jh%!JTCn7r6#
%c5hNn=+/RUK2:Zj_5$,K]n]rNpiPp@Pi(VsfBYSb3sK=%nYg4-T?\I0f[f^t(Z%:R*J6l.r/5=pT?\I0D0#NpCBjSDs-)=pGU1o<
%4li'JVfTo:dD'gFd*KF9Y\tb8pbd\"kDmBRq>RTghQ6H.mMJ('omT]jOalh[_4sM*n$fqrHRa4Jc=>QAeaZac$m%RuH9YXjpiPp@
%I%nI>na@;Wg0V@&Y8M^Y*KPKdi6fiHCQH'#lO!"s4>N8+m9DIBFRBu.>2>/6W&49*mMK3!p5!JgT?\I02U_S1h`UTQK2XRe^1Qj@
%T%fet#*0i",0;4EA'd^!c8C5MkDmBRa11!pBA>4t,lQ)*#+s0]K9E&1`Ee6`o8^Z<bTj;/HocH[c:RkpK@j,5@h=^aC7C;HrEX]_
%XW+EQ&c'^8IBB?Ejn/BCn",p8g1R)9=;69LN[%oFFOG*agS1d5YZ,6*n9bJpl'4%4eSeY,VZ6Jg$.LSuPLfm=Y>Lqlo2i8h95iZN
%`IAgKglR6ZC&Z#8e)/4gcLN'[QeV(dF*9#1/N:#qp'lqoq]a3IH/U)"HM7jJiS/TMrbsVGL>"mI/4a5rgfmmpl[VqNDLXiu^m.]V
%6M'XNrJe]/OY?B-`L1q9SK9B(>$-/kDV:HUc0m;Ec[F`_`Wr-[PqI+YH(Xl_=8+fK3-@-fi;&af@o'9*n?okUhnF?orGV[WANlbp
%B>mU"^Q+moKH[C>J*O./00`m1HhGXe$U;/lb3H-]2o!"+^V0-a:VXI3`jK%>2t$7AdkGB?r;$".Y9>-5rSm:(`62e+n_:FWjP*f,
%ff;.pT1tU.r3EFW5BD?IT?[6pIVA`gnuoQ&nAaq2cdVp,f'a"ClC7V$^NPVI+1sM)U2(HaD-);XcYJ+3E:LQti!&.JP!I"1q_dej
%o\:Bu``(K'B:jd>jXVc",,,$N7d,<!oBAml7H(_RhJ7T=Er+,FT/GKpV3?CSo.$K*U='O^s"a"EoYIB-5Q1NQMl5m?9:+L[k>U*u
%VshodjVYqV\RjgM^U4>.BcUn'iB;tS\Gh(u)OV@apYpm.rb=p"O(.#%nBq\oS"70MBs4+F0ChoHe]P;ag&(D*?6#8t(Mkr\62nAX
%Lh$7uoiJn1H[+DP3"9N`F;U592q(<@H5XY/oTt!A4TG92"m(1.j3@%Y2h5KO)tZ#Kl32um1H_klITp+8rr1"I<F/&d+_DY#:ATJu
%%nb<pVLu]Dh]%k5&@Ct:Gl][mZhn6Zf@]e!Zo<kL]lEKV^J16:cV:-pDEmo15/69$qWbKChqknfji0N':BR^\?N+l1ric:0N5s5q
%A"V3A5>m\O\U!hk$ZkQBGO"rq@pEB3]5[ed`B2s>\F[VO)u'AXr6d..qTb@%/mg_il$+ZUePuBha"L+E%:;iKVa$`@?Y"W9/H+kt
%RGmp-qp3g-+$K5T:[ML2[f="nrj.tJrU$6EJ,NgPf3]lXhiHT4r6FgS^Dr8P*DM$Rb53l_e04_L30obi-DS=o_K_5u*)no"/3Z+@
%-G"R[)Ys,%(f(!*en)OUP;kX&G*9W88Uka7>ho0=*1q$8DqfWof":a-hY@*Dja4ISs.]rcHLSiNIu;#`T52"SmQJ($j6iHW5MisF
%D1<_a$;]KhFnA?kIc8fHe^)g,+eunGY%!W?+[pT1VNd&V7(Dm5*FC'nYQe@;;AbjS1sHA'iXbdUn4*iY`)e[.m\2b=k**;p$A>J,
%i54Ia>B]*=;Krh(q#?.7W]qrtO,#hDnB^#fL6N%ca$Z@E_Q!BrU2e9<GM7Rd[gi-X\"Q.;7S%Orm##a^rG7SpOfBe&WSTfQG'q@A
%DrW!LP98Z$UE.O1d+4YtHO\ifX7Kc:+-utuD'(+Z#!\*S-b52HLA;pDpO;tZ34Krhhk"X*j2lgkU?XH-=<S`7<ert@;t62i.fFB^
%j^50io!=cgL8(:R=D^<E96fSReu"X`X6oq4QeXDH3Cu)=k?B77V;o<4Kb@1uOL#rH=GWl:KN0(*,K,dTKKJJZM+]:6KKJJZd_.8<
%L?Du)nPlCl':C,_Om;:"\#8Xh179E)*Ha$qM%T0S#NI*B`bh9_Gf`ZpP;!n.M3-7VaBn/K[&9LSQUJpN*/6:F_JHk16LL]VGLVQ@
%OpG&N+>IgdO\jS"W*U)[`tA^/9;.@+GnsG\EtQ""W/E?l8S.m\-6]F6+ib3%Vf((FE$UY<m!7bg2atgQ>o8Nedd5:OaQas[06Q4n
%92]Dm^#YpXOpJUf?'pRs=M0lWQUJp[>r]mQ#iQEfPE=<`aBi'0dhU>+&[Ib7d)OKHFjA!i#`G)2He>ije4HTFnq[j;,maH7?6WgP
%3gX7DK2M)(7pbcbGFsPi0#E`E>(0rLNOfBORC)m\5+$5F0T\lL&*JT8;AVft^AMq6)D<[,a!>3g/kj8XbKo.2l)"a:9<S:7Sn!V1
%Wp\ejN[4oX(S`TLooark3L32QaJA67N[4p[N^d<-O\G'>*0'e=$lhnMla4L,0E)B4nPU/ae'5k(JR`EXXpZ4B,32iE\j$;;da28Y
%$!D]H;W(Y$@A,^uf*.22TmJ5-/<Nba[/jUn*&kZ+af'E=E%Hi")tiVFMPWGP+V[S5YWJZEi6Oa3EKdVRW>P<r&;m;UfH!kLHLEr7
%&dor7fc;iJQR6-R%[?!#iR7H[)"j`oO^]b@AK7^F6M47DI4+U5KM13t-SO$,pIOnP8\"CUHDA2r1K#bu_PN`cOO\\:.@+)WlFlX#
%99ZUSSRO#aFH^0J')$3@/5="<c"tmV2`[02\s\P(mj?(Q5rWL_RY8@E*(pGui`I\o;'g?.<ZFaM4W6mTUIQ:s\b@K]7U:]4V;-E^
%30ltrFBG#c990_+;XQ\?cDWBZ8i/0^e9a"Y<B^!r-'"hOH^$LU&r[@^V::!i`3GP7Ho1-3Dj2Zj9u>b^ACPse30k2'PXlg:-"ZXF
%7#s<n,'q24'[\/JEB0a``Me"@3L6ld8_'b`j#NDZT2-G"R!U3@--W;$jg^6uE?:)8@XR<?_Yc2#7X[!TF"C`$R5pQe/^,2-QiUfZ
%,u""fa&8DD:&f)tob-CpX[Q,pS=DU*0XGMc+n`(hag$Lj<9@<"/1>Qj@D\3gQ5o8P=Mii?F"C`<PI"-TG&f,ofZCCOGt@("_NZ9d
%/7H\`3L0m%ag'>B'$8Bb<QCUQF"CbFck7b+06S+kV)B!#FV]u`,lPTbKVVs'QI=FQCst;@[fBb"Uf^5[j_]$r_*9)/(Q,&B"C3FA
%&e]9m3qt'JkX%9^+mg&&V1c3[.$bLomNc?9`H?lD.3ZSEMPYt7>ETKq$-BPNN_@H_KjlJSD\e5,KY1FpW?XhIMPYt?3=/j%gKDWk
%aG,E29*s:U:b3o'_a:VmOSHshl:?;f@OWJ@9gVlf9WA2?.<jBDRP,uJ\B;(0FB1DfP%&?08*6fk9?:A%OOY0!<K8@NWCb1rh'A",
%,cSqk,d]f$':4fA.`W1md3N8qDA'ufK^5p@[r6oe/oN<OAF_u4%qK],4HN,Z4HN,?%qP5r-4aYX5UI"Pnj"O_%V5,q-4aX-&K]$S
%JP7-+jFKuGaQ.nG6MU/njK_5NQc,*d_ZbrG7C_<"s4?aNkB7V:G+lm=,2?&)Gd8PTM^Lqq[Oa-#JN&LO7*&'#$e#T1)_=l"+Z#fE
%bWFb-i(4Q!_:qe0^tT2l0#>0:P9OQ1\;)Hl*hEc_OmFA+ZBm\H,HH`a^!tGr`KQj5=Ze-"AjW&/=esQ$hCtX`^+<1IFOME[@@!uI
%6M6N!_ioN[:BE]t4R!SAZ?l8.77uB/af'E=lld[aLQn;t8mPO-'C$(\6V>WJV6n4*R#AMd_h=OK9"g_S%MLUB&p#d[-UE%eSfEtt
%1+_+pPJ\H5`!"=hUspi[77s*h>,9XK@5(BR)]oJ>)8RkH.L,skGZ"MMj%3Z2N$ee00V/u[_K\t_$KF]$.#]MWQ8"mE=Mf;\\-V+d
%i?F4.Ko7XV'\^BJ;J6<q8YI/`-O"<?SeSEFGZ#@_j%3YrN$ed10V/t`_0Al!7'IN$j"s4tR#<\jS:o]DDeMW@ZXi`H;D>JQA%uF&
%n\'('!BSG_AfWNI;dfu_!TQa["(;]B0V4LD5N>=<nHXsQ&ssuKj22X.b"%8H-]uO\Sj\;jGVU\R<;!JN-\IRQ?H;ftSWOPjN5:]K
%-jEHk9c-!L_;F1m2U:Kq_NR`_-*L-hn73K:B6D4X(m>E#`:.R3,Xtsi-S_P<4?9(.BGS+k+c`B"4\B=C\]'a=@iaUO1b*TXp$TD-
%<iE\T?FgI2V-'1QR)RKF=^a(VSC`b>_F[lg17XRD,/_NJKfC$i$TI%@'M7o-YE_e)iAQ9To#b`+S_7Pj!5`Pm?FLZ--=tkrm'9?9
%UPqdM(e]&*(,fiH??aYk#IAC7FU#2?>26r-1.A%$XR8n_L9r4NNgFS`F`JJ\Z">h\!pV&$Pe?QZmA<CE*(QCF0q(d\=;ag[4KOJg
%':qidP6oP]UWN3K/gWN@L)i+=n-Ce<9UMq9RS7r/),3Ro2],9/Z.I*2160L-V4/(g"\+[f;ZfLQ&Pj1;ak34:-Bf$;(6cjBQ@NU%
%)9WMWN-L'o9L_-3$moIR-Rk3&&h\gY2WgYXX"U>K+N:DfP-oYW.?J"gJ/M!LbS:sfWp+)uPL[0V0rXNNW#BLROQn$K;G8C3&2+Bc
%-u=j[W-4)d9&eH6-lE343MW-q00+ou:f9W\fI.Y(.Rsj4cH?J=73\"[fd*d>8k('GL6>CnBf,)iW,\Kn@ba:ATsP5kL-6rAkLVsj
%X@itd*0`[nHAAC\,%:*t:_Kba5Y8Ei-*_bP:_I9)JWa+^)CXkDTHj_5"!t4B2,Fnn?NVUfP"PB[L1gZ8]qRtshgps+!sV@!3>a0$
%ae43J5tU1Ja[?>*K#&9P)3d@+Fq[cqa`5scP22p`A%SQ*&T2h=$`.#AdTVWaid;O0W"VO-iJot$q]RdYP(dUeP2VNQF@JCq4_?H@
%KWLb(4HbC[lG7^:K\XhXfe08@BY5V-*VF*Ye:l#CDg<T9\XQeEkqRuKO(9E7G@<44&tu6/N.K1t=X`Pd'JBX*($:W0'JBWKX3;eW
%a?5W>M+e9/6cnV!8?il5ggM8G_N@NL)]fkNW\]]8@5)"k;Ddu9(:'8f]d"T?6M==5n449@UHW,tV0WI4K6a7"M'3$rBUMAr:q\,B
%OCF'#l6QIg*(tr+=aeI<K94:(W-<`3/<Q%+.@VG#RC(d&a[0%s:lQ;iO=c)Aa(D#k$&];UOc:`r#oDXC5^OUYW`"N8,hbRfW(MW"
%XM4I^EFeR^Pa6$Za>f8l7qj`,*.]]l7:?Ej#-?`"7YZA:'XL>m'r0R]c!_<0:h2h;AeZ,ec=@XBJD8l)BXG5o119@h,Z9:h,(fkI
%RUQLQLRCPb\9*m"A.W_"6%nut$mJ&<k/cg\-Q,<1/3(-!NHQ[c*(5&'arE/B*onFF111S0KJ!m!$6Ti&+ToPP<_jYE)=X5c3FkZB
%*&8ccQ6Xr5HUR3K@!`]2aH.-3Wk'<X%O<S>R6q0%^`5pJV)!f7Gf.iI1<:e%c>?_CUoMVX3fYK=QU`ju:_Z[)Q\8Xa.*8VWifKl#
%E6(k?=L.e5fd7U%%YkHpBekGP+EZ"E#67D>P&/2":oZ456O@jr,=seLAu"0Vk=F=%OC@KVEZb\+j:M\OEL9&s5T.S'/H@i#AF1t&
%%"_Z.d4\=^i[>9W)=j4<'-Dsj&^qVpOATs20D^Ha/"%AcP/.hf@d:`C1("EL28AHXnrb*d!JZ[J=e6dIF?:$h\o)(9g*?;b.b?pP
%Ad0-,!\uc&Sn/*D"X5]_6Cq`m)123j"<!=c)*p`qZr+5`E_5q$c\bC=,I/L,aG9u?">U18NU!:1!#\$kUbr@<&S]JiaI^3VIuK7'
%eO.DcL-J-RQ0P*8X:0Q:as9t+H-,PGj<_\cOb+!l9R?aP.EDM1e1KZ.6F'ba8(fJ>i/\-BGi4VfrqQL?J".%@4@$siKKMN@[I=/>
%NUQok2o5ZM4@$siK^>uHKKMN@",&d%a9.)X5fa%\K^_2++[ro9c;Bf?3(C1Z\<:,CCls.qSQUo,"46+"5M?U$`2"dLKos354U;LN
%Pjde'6=Q['-mTi`6Qttn)@G/iBL<qs>;:iM&7[-LTYODRUl[QS`j/@a]G[p7K52Or4!<RJ[RVKn5YRZr[\%.:q?i]J@fMNMRD^bk
%Z;?]"[`F;4cm2CK[\%/e]L*iR-H$Tr-;mM\ATGd);C6cb+_;;.'JeU9(8d0K!G2ZfF)%S6+Xif?=oS-Dlk"=gA.X^`bW9E1+bN$R
%MBuCA151sh.T=FH'K@jmVuVk%/\66^i*lLs[NHZhO@%-X6@,.L^_G3u7?\(`5kCC1qRT<CLBE5U@:#G1VN>(s.AR5neAKj1CC2N-
%NL/31;M7-sER.9l:YepircPQDO:c;k]d,r4V?hCq/VOntNk12r&alUP=PA4mc,-tJai75V;8\F*)g8m4'N0X&a%K)L=h+-fo/kc=
%$E:nHj!CRa/DPQ..3o;1??1%hRqY[S`mXSA8/2b"@c<?YNMS87Yp;[0d[!5*E(?JgOUB,lFW3stgiel1,R_*;oY[93g[PnT8/ALt
%j=>%IhgV#r65rQAA1reDD!R%,l8Fqr\>*qO8VCe^Vi@N*b^80iHg5n&9?!hkI':e$Oq4_)l.=Zlg4#Km_JrB-`f^V:lG:K'#e0*8
%`mXS0C_in-8\rDE(YVt05Ub;Y,%Pil$Ce`9rA7`42O6`J[rk.rXN:_!4F2p)8);1J*"ofWDIZ7kg<I2r,?^s*NeBLZeP,'m\>)6V
%WLO7S[a*:E"Lk"8ZZ)tj1t(i`*9l^La@%@l:QADJ2dR,*hU^rceAKRbQYE6&U[aKQGLWDXP+2cfe'2F9ZopFtb5n$aW/HbN,f1RE
%)bVC)-]WlHV(T-[,f1RE)bVC1;7Eg[O")-.qY&u@(32@GO>$YBe$`#\Vp=<8$$Xm9/BK&t@9[@u?L#D;f?Lh'c8eXQaf$S[9(nDR
%=^;"QHYH,!=iaq7_IC/'_B!b<93kZoe86aR\KhR#etd;`S(YfE*"pA"g7B:`65rR%1<DlV;A\%h'&ek^N?nUc46e_i[V/Qm2O6b@
%e'58_V6oE^[&7eO.0*JU\d6t^JfM=j,%N?DiM6hHT"9n-&alUP=;'Rn^"?H@dRb4?NCh+VG_tr9$b'GO4NYIBQ\s\b-K@Z5k&$Yt
%:He,jM=ID"T9=Ab:pI8N66?'6Rj;.HUMaR58E>fBN?o2)W)r#Um3YC?Na%]`/;\>H?AC[a2XI@uSlDE<l"5'"?E.n@S(6u,q].=E
%SlB.NnIjkR(2gfbj'F[>H/ea6P9^N[eG!G:hnYG29p,`DH,,UK4Ll(GnDm2d^lq64^lo_r!DaWm!DdTd#<]O0*q5s;*q85[GefLn
%i;l^mi;l_lKEjWM&g$Q',!=f*".oF/`fot%p]'=1PFXK=HfSuR.BW)M([`HC'qQ,uNqsep>2dRU$p1h+KdT=1?Ksk8-UkP?*d?3*
%.m,8tm5f]M-bIab8J,u%qZkSqB7[\3P9S5?jkpJADSP.BiHBoin0D%6_qrhdi(441Yd5`4G`ma7<JA8Q,ht![SD0Gb)a$^/m7bmb
%8J5oRJd,$%4ZlmAn0HGN_36':7_O:?ST`"8B:!N7)OP=f.3`;Fq:_=Oe:el8pr:Y<8J,toiB%3q-h6#c_36&_NI(Ub30m*;WQtL.
%0-_cjhe;L)$!DZ]:Qggi4(I;Q_HeJm:QggQ,^7mS2t8n__36-D0B(AVK.$1$WPOenR`"&T&TTG]CK6!7nQi33PP>41i(4Qeq@9+@
%8g7EO4+q)M+..;5,nd5EnF;b+=McH%##F7U'S@e'R?bUPnj,%OP'ji'(j-Ek19#acbd!E+n>(G+c*8PO?#qR=(YTj%EXdsdlJ$Zp
%]mLmHYp:ESF"GE\k8[-8@14A,S5WqeADG(dnmsr(P$BTVdqsKOA+6;L2oDnRYL*cMPY5[La2oVa`MiMPE@f5V1tAQ!*cWaidnPHB
%nI:VsP;oqji(:MtL=P<":[VM)j)M,f_3=Y1cJV:)m=t/,gV]4s"V.SWj#NFd$CkMRjV)M(P2(s/NV`A*D(h7;E%DHFGS4Y](d*ZH
%ZOEFi)g"'*nG0E,PPF@fi(8<1`H]hQ\(;<e:;5/R=E<F3SoeuR&&j]q:W,bumPfC=@1(&"dU<X*Gg^$7`-B]:h'<Eep@+lqjFm'!
%_`WVBUr,TPnYF'mJaoPR9RuZ/6dfU0l&a%*:HE$'`fgnCR.6t>g1<D2OEML;3[@YDP>:O#-`#ho%\@c5I#KGDgga)>cH0W`KE7TJ
%=jF8t\!%J'EcO6%a-'[qcESX=NcQbnS`>spS:!6=Yp>rBF"AK.0V3CY$+G5;55%`NkP!bL-QeUp/BLu6*(t;e36+onkfE&D&%eCf
%qFqgBaTos.9,Q(p:HH&ERq'S/i(5<JFsj'A>N]+OCV'm%3P(ng]n?Iu(f*3'TpoPK0&n"PcL&="%YH7k8J\UX2kFMN9HlSJ4^pN&
%%UhIKra\.UOC9#&b-/p3dU@I;GZ"U%nYF)Nj%0Pq`fou70V3BR(,DJG#F=nU$j)A8AIN!0.76q:j&/tA=Mh#XGga^mS<W&ETOp;8
%K0SBfLLX!p:J*f[4=TO=i(<_s^7#bheTnkS-WF,&Ok@L634d#c8NKS/Vd#(G%%bCo!X;HC+cjpm._E8JP>_59>Iu>VQ?tEcQ1)3r
%c'.8E8Y5`2:,[>0"1>t/EgLuPXcI)eBU43TSads\QbekF:tFPrj@t7SOc)/CE`W44]mK=#-P(ImJ0tkPnpi(uG]G)mi5nE4^lo!c
%H,,UK4F+`+#<[9R^lo!cq-T11HT)g<%S@qq96+V@B[e&qUNgJiQ!$^<#E4P!-O535'MH?RK-po7R"f'aOOG9X.1LV_i!a^/Nc]=R
%_FI.2W6-YIeL>_(W4JK48[1,10PACh"%FuaPCjhr8[1+&1GPI@kX8#0->*79-O1&\N$ekHW5Y\CZW&UFSNSu@>[fhK3!MpLG&s5f
%H]'6VE')('_`ZXtM^O:Ycr%J%J8d4-gYJ&\Rt&^0BtcEWh@S_h!U'&0SfHfR95i=XL6BN>%4e-JWd?S@Yp:0OnDrN>QP`L.IKrXY
%_J9HR%eFY%/=mhds#Col%Lrqf/3,#=W]n4CK-u*2E[HtkQV9*$oZQ&$##+mh7Y]#5#*U+kIPR;__4r$)8Nm9a1Qm&k,qt_YbF/Bb
%9D\J2rY:dlEpPu08KSMO`$N):Hr""qcc=^OK-e2N7o*78b7Ut3-2hjV]Jis@b;&I=-2hk/]:kB^[eZfTbNZK(-2i3Bq@kJS-2hl<
%\MmL9bCR;o-2hj@\UfoM%NHiEl/s:CkB7P32IUMOP<'=%5tSg2>&9S%O($3WS$9A#8K5u50hK,"_X%_qoFWTb@Zl1#^"OT#0;h,M
%P&/!TDOcfaO)7.Qrln!^a1Oj(I^t6Z&4nOab7Tm/o:9lB3tt0U<H*"@T%)Lo5%R),I2mSqJ[EHLOS!S2)?Ir,>Wb\FZ3fjF3/,b-
%nQE._d\l3[B--=!N\]UVI_L)DDFYS-TC3G_gW?64cjkb,$G@I;,.ZfnE+BXUFsr;I6ou)P.A7bN851Lo;:RC^-QLfm#t"#jmQW#V
%8=rNS.1&L&iUTn[Nq<Y$.`.<B3&MBZNblSh&-Yt$r@\V*;BO9t"]E@iNGrDAp4auYnplH/+o1KO:aC1=L+&3?VS\!2S$4h>Ojk`S
%6OF#fqAdinKi/EZf-D@#F6pXgiQ*A4m#OI^ch&e-*8-!bBq8]^-T"5rPVX5P=NU\I.@,!?6PN2(THT2hgh)bl)]\+soR1V5E+BW*
%-oR1`fGc"Sfn<!cKHlt*Bo$`(0*<,e==RDl&<?D%Tco;iim<c7Fbb]"Q:f=(aVc)OKY8OdV%V,d`DR!L/nIj08-X_lI1^Fd83JRm
%#gl3#k2]1#RC%YM;^doaFsrR^?"YDBI`]8D8o=ePJm`+&p3%jI8jPP(e?LVL(tjR83tt4s<,/Bb)O3!k-S[%m(?qk20aa`1-O#/I
%I<A.&`C1N*!^`#Df\97;l)Tn>RNp?H.3K8f.jbEf,+GgG'1a'^5U=e0\0[83\?nV#<7;UN2IUNZU8VNp+;!cfida:)'/&ZK'NM\F
%.$Jg?3tt,kTH+r4.Y\)cOA36l6W$ep#D=7iE#D=U6T3mYC(l?oj023+LdF"&!cSk@&_V^`U`Y^>LdF#YL-kaa0C9=(CpMoX,AiKb
%BJ^Wi*!ekh@;gq<BZ*Sq+Cl-<DC5_CKT"Rk6M`DcDcHD:\=FJ4+1'rre]qi`_J%/,-]r_I0bT(SZ42D%_X7m@UCf:O6BFoD^a3!o
%cPVL(2VI6im3Z'Z.OL7pTWjP[Oc).fZN_F.T5P5W,T&cV(aKq`%Que=57Rr/k)TUrKDFO=qKa:=FahAJ`#f5pF,/BC#S-!X68"Wi
%%L<R,O+Z4C'+>?7G4I[9J;3lpn==B`OTUhYB!hM_>Mp4e7q#WG*s_V/Ss^2aB/"fL0ZX)g\=VZ?_`iS:FrpE'KEqL$i/\-Bppg7L
%c)B%L8"kg_ef7ecjc?Qs9#cotS+37Td`D3'5Y5O&82GubG$&2BA(\\[La@Zqqu"sj7tI#P^rrn*p^n$l_2h^2)#TbT1hn,;rQ!hd
%4RE>;p:6'SNu2U?I2'gq;sX89b./cLp6Y(n]u?&+cYf.7b'fFH*s:no<:*OJUO$V:dVZjp9HON7P3M#27j"9U77T=ZF.B%e:5Pe+
%_[ajAIDkG@6Q`Sb`6_#5$&1Vf0F`I67:Z1M^bkZqJSF<mYe$Nh(ekHg9S+P?70lSaNtHrboJ-'TAG?uRQjb&O]/%8Vn-1Jk,5=7K
%a&oo3ZI/*s@"p6P/;jP9BtYCi$%%0%!ONpF*\F)QgEpJ4&2E'#oW^'h%"+:ddMY5XO,SXNY.MTe7uY^t5'E0+fHX\<c$X`A's\.4
%rYY?b`5M!sKr%"m*g9h_9i7-/>A*SqOD,Rq-GY+#O/\289HFjl&!P%eW<8@)e<b@f*g>qYA;3f_*`Y;>)pGNB]Klq4eAkGKN_-[Z
%1;h*kb1n^[*+eQ*0TIo49RRmlm$KJe13Q?I<lU.+dE:)r+^,=um*TRH,GLI&@n*g\Fj,YBVN)PAb1&.Uf"oij@i`\@1&#f96c\O.
%,q>@KNI2/=0t8u\bSXS&3p%Q4OgR,P+;\#5G<;f_#1m8YobKUN5.E@hb^qApVe*ESS(@BqUH]N$LCJ@LLgc$u))3*^^36&8Wf,"0
%FNed12:H?Z0LNm>(hW'#X,okp&Y1_WSa:lZR:@!>8e[sNg\&3FhZJ$_.[M/`&4+>l#YJ&IMsn$?3>Thd)*/Pd;9A$*2InSS`WUjd
%A&2EATjtp?T;c>:0[/%Oi9k*PNe5oO3Ym[l9H=M\@E+>Eh&/9i6oJPqK#hQj=Kl%?mO0o`\RS4@AXNV!aNcgR,XM(H*=G3'_.1SZ
%-rh:o#mQFoZO$hs"cI:'O$`FU4;N;U`o+,ChTKRDJ(]@mJr"(1=>4JGGq9f?R627<4HmgCOD"2f&b:l%/*=d/*\6BkN#o$)8m]_'
%Jq0$^NhF"e)YMr]7bDa83$W7M/Y$:LqS#oTpt17hh2gsJ_6VA3r$E]]DA%A6_PL#%O6q),J1Zo;c+'U29pjMD+.KJj7>dq!BhIN3
%+df,<I;HcZX16\Q8NEWI"1i#l(P741k[T*^&Ij/)_HnV)$ir***(tN;1<1$!%\f"Y-sInG96`KQa-)r_ag"h<12_O[1'0;43^2!:
%p2u068Q?j0k@i_LCbFT4mmufagJ&O:oW\_aMJd#(Ecj:T&"uY)mH^")=#ok5A^3C@+.K?a/T4sn\A<W_h.42gj[DnRe4BCP7,f?]
%f\Wh`_--PM#\HJX*h+jcd:3j`3r*n(*[3q39t32CZ3_1h,c_<6<#7t,MQ/:9V=XQqU_lFZnpZA8A!>"nf\4N_>UAmlA-%WdIFMU0
%&pIU;"3pIrUBjGH\760VPZ/G6YW&!tNL49WNZpT$eX9K.Ro:Q$E:[4U'@+$"G&4GnG*I2D6lhb56QPiR;ro]"E\c,V0,+h;"L'W1
%;6KV)lI[Iu#O$D_NX+cmJ;sluG^tg9*MDEn3ZasS!BM9pirM1^T]6&6*h_No3ZasSd/c9LTHf*pkkH6SN\>k0n#@7cVchdl``eGZ
%nSnF"Use8)%)j7uWPWs:4_"(D[&C,NcBN9?*bgd2@@U7saYuq6HALQ[3u+7IGjQSPPt64ZZ_@`'YRAu';cRZQ3CIbi94gUI9T"\s
%;Ur@>ht6Lps)?I;S[T-ari_$"qgC\'iS^qm_u?D@CQRE_WtS];LgGgM_">@&-hpqHEEG<7Z&Xj&[39am<0^(s@4FYu[46Df>9o!'
%@48"mUT.$1a^P5?`7fj]%LtQ[m,5+#_uB[Yf_jU;\6p"AfR#V#'3%=s:X!b8F8!U^IVL=P8m_/W^uju'<M^<cT7jnE<)rYq[AXQ[
%_k`Y:O/b*d</3VI,JdQ.E7i!8^PKd&C(32$Bn9FXk]0m6c3qj-$/h+Mk-l5g1r5c]^`o<"g!5Z-/:(J3fB$k$+,4LFaE?a58D6Uu
%9C'8?Q5:'G9e,B:cAEg9N%?h+CK9a:ce*tDBb?MR"jlY";JJ7-g@UJ][Z""*nLga4IO!nge%o=Nj/s@tS6NTuL!n(^id>,u3.7X"
%mM\i@*>90WO#M*NC/PAK982@X<2K"LMsN(KV5;+PWG10UG*cFH.@bb"(@k./)Ekqk>'HqWSS[agUX/"W[L^O,VhgGL6@0;%EiF0?
%rD:!NOc[1SLeaZknUn3hh@d0%R$]K`Xa<V,P0I7uY)Vr/Xs\Bo,E2P:I(r>b]21QAi+HFf[&kCWT;3_"C6pSa1O-=p.+J`4.Ns;@
%&A==.`"URnE>T*_LPbQ\Y]V%5*kO@WD1i.L4h8JaSH6\UlS'&G0;j<Li7Sd'!9Ue3fJIZ;VF+=am6/W>F/Xa3VF#8>W`"VG7<Y%8
%VT$JuWG:6ZG1cXRrji%jL\)Z.p1+Z&hia&$#mCW^0:1_;!_jElD#e]9!Gf:Qgb]P7@V%ZAQ(MrWW;._*^!s(?$#PeEVM8e>0j^k`
%pQ6g%eSPQiXcOOR?M:O7?mLtC%W/)\%b#8ijKLPe2#bXC2$5'0q+HG*,\drV8:0\U0h[D'l)8=F6ZUdjY?'ufh?L-8],o^4-aglp
%`bAQn@SJJapQge8:%9g9bEPe3E6G</0QqQ6_PpJ:nZK<).#)n'9RH"cj@M+Pbg2X?Ficb,Du0OSb/L6O_RHd=WtJ!BEE3e4[+m9n
%GA1(+r-`BT9O$kH=]#Tk@UcuL[I,9!Db84^l>M+6ri_$?&.T133:,S-s!idu1ZU5".u1)8]ppaJ%"UOg0&3KV=bjEPq73fKg(e7C
%@#(_7*2Z'p;QGBsZpf#&)MV^94K@--dB3PZ%bh7"%f9B=>@tr,LNOb#Cmf+G_j3=Yb$iKCSK5.4n(D,T@NF$RjKMr*3NT]'*S(ZE
%LNVY!@CD6J@EVf6.u.9d_-p.-YkAfD@.Tk>$IR%*)O+a)#B8P.k-HuVCO>47ct9$acC=KS6PQJV,\fLLHS;?JGX>U[LT+][9T4bE
%2LQj+D0Fg]rSQLqGAu3N@0_Sd=#oWdTDFi;_ss5&qkgd`ht8QL=0_W<1qJ-tmB2NigXc0SiK&EIXu893IG;(CIFG\3n*7UTC(4lF
%f00NjCPASkgr7DCIIhE!%K/G[9P\YG>tk_*;d<g9d-l$?@]QH3=CoZjK2d$GTQVi(?%*Z$;!P[(NBp.FH5hL8YS^ooC4fK/f:Y+b
%j#mq3K)oHnI77NPU;CB$/ZT=Yfj06a"WVk112lkpOF=IM%;RlCQ@2;k6Kej4EAk&q2]:g\)\T(DHGd*5_S%kgO5,Hs9cIr7[Wuai
%kZ0P/,6*e7/ud2ss/9Qd5J2u2r!<,WD>Xd^dK$MZk$`nqm]a/Nr/j0(E$qWEU\M-?)ERY-5'PtkF!'<=a+NE=>5<6+mbbbWah:nC
%*1uKqo>^O60AjBaq]ANdXgZQ(o\bN%rtL;S51c#Pgj=#'`n`^8I_9ajgEupUd50#XIm7\[:p/Y9H6s`KE9d5`B91eRH(=SWAm=qp
%C[2dQCA_4/%EBRaI,(KqI:hTpNkkA%:RsiOHcb+DOqjUR\Vf$(b2P\Yo!m7]E_u%.OIF"_+'m9)nhErZ1jeeABE=0`SsRg=k%R.G
%j?cbTHpraQ0@iI8KXmfU#h)?s3$Y1)ok9&.e53cH@!uo^'5EdlJ&i'gHeFM&#IX1;2O[<$M1^]>%1HdoLar)-L&N:AQL%*[[@:d[
%kArIg,%89sDf:6n,:O"AYEGA(W0.UQ<8sk;I'\R8.&cCao:T^<k@5s>R4O;q1Qm(Y0_[>YmG(GqP<O"[!G6Y!N6$N!<BZ4peO<>0
%f/SS$AYLZn8o6\JQ/&gd!OpNP\&*%Z@#caW4g`^+$!,IjKC`M!PEIdOWTb><8PSrT/qLea/*^[(\Gag\H<BLWiaJ.0R4R.`E)nb&
%Q!?Gq^M[A\=0ch-@6,DDOUA2^k55t'WNn(A5hWT(Ra+5S?(\.&'<O^*jEAI68(nTm.]dAGT+^0]B;UgmF_^4WAd5$e4\R5Wp%)^_
%9Rhp,1Msr?<N:gER)t*`N=.MJ(6,QSQ4.G_Kk[a9][UYL"a.+B@XOo5@_=k`B!*r<nKJ)%N96(gDJ(fkh8ao;9Y^(:?*^+u4kjLt
%S]S7qmGo3*q\=[E:Vpj:(G*STJSM\_1@e:EftgEeHd@o)\P>?#`kfd*Tl.LXMXfCF%m.<F%m,\0Tr3rb1p,&dfrVDj2QOR1XHaN"
%WW&"'`lI=g,\7bN:dE'6lptaK1Nk%Md;1-7Qs#FF1<"5i8'/hgHl*B3@9sZg\([4lnKD?ZR>m9p&QD$Y)<QC:72*!#o!kfTZ^!%X
%Z#ZXlh8<:'Qu8qjRE\YSaN/2SRH'==Q$a2U1>>FR9rC8iV^42D2nk[D]kM/*fK=QjT97ehN@DDN2G`@AcEQ+3]:!bM?:JPuFREW+
%REaORRUJ7LAsHdc%p_W+<-RuYk'?#;YVMZ!h8<:G9t0Dl1/Q_7V0])U9(!3FS#I$gc.#n8F?WK8)9c.8@c^-,]7Z<HE\X+[U<"(H
%-_oM"A0DST\N4s$<mi]>)0sIsEu^I4c<&.\(iW&+R'2o`7U2REp+kW&6Ilq$oq8-IXQ0Jd4K;q#fMl"8eQ,\-KDBaD3*;5E)UqC1
%(+[@j`U,Xp3&-tbg_/*/Hn2*qnr[/9@("F>K39N2*iNp1h&b5!X]-)[V3t*T4V)o40VA*iD-rq02:lQgqs&@-%fr0cbf7p?F`)*p
%[3c&7SrX8CGZ?C#oeG'd:oF:\!QNlK`5u8^fZC%NFZVDT1VuoTH\@U9F]"^Rl3VTZ&p??p&b[rQ)"g(_d7H)^dMf1\,G(?cO#?6u
%/feb4,d6`\a8O)J[<gPBBF/4<*L3F4E][_W+.jllC?%j#Q+SP[NR*7#Y`_ai`o1]-aR(NZnelG1ej`SL2k@HPOgN+5a!%S4%&6?s
%ZNUH2jD1L%kuN3M.JOb(K"Mj';l@:oiKE60cDn<gLT9"00'YqNg+&6:k`nsXMO>@f<BSJ/`PX5H;'k*s4ePE]c$HfRd'=_udB/,Y
%FCG:B?.a3[HjF**CVcEN$E>(;]:qn5G11.s>R-Wk'0BI&h1U07>rU4>,O/fJ6Cf@O\_,1DA0\>_^*"AO/^VuUpNYGU4g>/oP?%q;
%D8E_`AO;Z__tI]1hRO($\Z0\jF9g:jDXS&Y"3japnsX7tGqIAg\b\Goq`P0/Y8Ijt23ZS09Pk%L1@PTp6#9U5,HV-<ET*qha9TO^
%5fc4^YhGFYJWJ,E<X[$Vh6#b=c2f*a*80&4C4R"/78aMX].9%JT_qeU-MbI1MPR[1=\pJ)?;Y@/P21:B>n)"e2kfq#_+mT\'c8^q
%JUU_&Xb7"'WgsI9gX[n?jH<uM[\!B?+],2.%nN5VU_DYJlf;^=knQYkS.)dCY.;ju!hUI"@HV<-mnTb!GQioadroM]nWYM=;*3;R
%,W9-F&fVq:>ERS5\D>lbOc,?&fbK>qdOMjQZ)r[(eCC@DY&=tg2g]"<aTAJQm0IRr:kb>0*hi;G(+D&iWi!,2R*K>+/g7h>_Fj2?
%&mOEA4d"A@kEZ^W>N'$;+7k?-[LuV?amG%c;GYY,@Ts/NR05WB,druBRq[T"e$]lA[aVHBig!a/KDt@`/^g:V,-aQTTZ<YVplOPK
%M(R.XN70GLcr63=V&lJs`5CjLVcIh"(#Il3h/mPimo\iKXRp8(FrUoGdZS>:#[nYC7mP/:#A!s'7Qs`!X-n:B,9UO(-Z[(I2%sBG
%1`k.?/h(E'ae+KHq2impVH7NES'K_qOF/nXfFqJr#Bt>AZdJ1^VSR\>0V&FBYqsI'9u2Dj7so&b\$?q>mU-f>YnlS(16*!,I'3-u
%`EK&d50at(Hnb5L`>Y@7h%(NC12_KEI3fl,c%h,cHc#SPfd9\QZ!(?<"1Ei-&oP.1ooi'RS\YTDSHK%6^1g9_R+.,YQmo8'VDBIF
%>,$.(:-sqs6NLmQ'iSa(Sq"rcj!dug88F'32l*iTDqmjY[7mQ?m"Z?8TuL16aIijiGiZ8tH@h4t>3sJie@@P!o*C8mQ>%*qNj(;W
%@CMI!M9Nu[0]UC.R#<EHNMi'A35WsUe@V9!fI^!*Ag\h2'j[mn8%s-i+5/c:'e<Eh="22*[ZZ"rCu7^\;hBHVlstJ5VW;35;*s/n
%h98ElA)g+:<3dV*gk9tZ/TP&e7Qk.k@j5?j1Qt$Clmu[0OrGEGgk:(`AYgFk\^@t,o9NejeP9X63mG/@]:C1SNpK5**&h;XOR)8Q
%O(9WD>NK3*fr]9G+M60TSD8$9Lm<I!Uc24b:cf'8.<[$f.<]atAa>G^k@EY_;Q++o0GH9+/gnrRT9r8p-YH@j`#_u;Si4N-ag0D6
%kpJrT1I6p-<s#?G__o^il3YIWC)n1PNZN,ULkeVB6A@9lG/@oIRar;8o4ZWD$oV9%YLt].1[D!:-KSh!D<;'UpVUP+%/_GW-BgGd
%/0Mjl5dn-1=69OoP'1-2o]13A\Eq:VJ<ZIM<4\@]U=-/;4Jk]!j+ml"9^GHpDq-\YR$e;LM>WYp3>4N</raP]St$I>\G"2)lsZ^!
%`.K.VA7E#LSO6qfEqXGZVO;<_]=mKIFKKT5WD4bu@\k:[O7;X(*ZfHiV?Z#@>8g0sZ^#Mebq)o8d:i9r,lKo%Q>I?&Y2:SQAseiU
%/nWO:ZjGc=K%bm+5u^QGMhbdsFY:*=e+gGER0P+_[RAijD7!>W_V)i6b\=A#H6Ol1Xu*Z2N%.t4G,jmMVI]"_XuPO0FC&%=C8KO9
%EMScR9R=pRf7bpe2[eXm>k$$2=A^FR2[fE=JhH!38U/WPS0>D8nA.uDDZ!m7-L_ErfmW384G#=$m:Ln=<[`2_Kue'uD44;fA77`o
%g3VO`W$^lN;lY&IG-f&C^)&Orm*rb%8J3go_JVK:-hXCkRFFu--$S]DArAKp\>7,clf)H_1Fn:0L9`jC)p7GV(5e;Y-kK+"PkTd'
%Vm_l!R$l&inZdDCW9r<^T%]p:a.TAr>YoY_QV;W^e43&H7+Rg2S*>o$43q-]k=oFrWQipqGAOHt]=(Z2ET8Of9MZs-YEH<ZG5/$t
%V!7?#e@#uB<`6AJUQ0$ASP_m6D&fN,7\d\"Bk9'hW]*BN;'PXqg1Z<9P1jS]g,=c[FqSLZ<65:WdL`mobo%Rj/Xq@JFIF(na_Y#1
%Xe]Np7qUd2-*pbAL^_G[)-&"]LR%-JVcIPVS0hg(?n[qM:clBq8L`JB[?@r:b!Oeg<GI#r:*$hb9H>A]^#V%g4K+MrFJr)a*lN1!
%`?hWhTie:RLHR/?=NRk+.TotL=+d5NWP;TkYqi>E>YoYj$cR5dFn,0b-tO&mbkG4Fk)elPUiT)74^mJ<o28AKEhnjReI>JUVRhU&
%>3nr.Zn=b0eb_1o7RE03`m]#_7$>PA01:tX.$(0iU+%Na$l8Qe"HOQi,\\1]Ok!>f_@cE:]8<VTWY)helH7S59tNtI2AXGm9n*YK
%[60g;4$fVEk_2Q*_XL*3]W1Wk,U<7-66ljbGiZ9&NNb'nBpIY>f?-?*JOgQFo&3]n"prr-/U6c[dP?gC;82$iMicQu&!BJ"bZs3_
%Hq$"8P`j^]7qSO^Z^S*c."*VT*8W]*:.O7\OP))e?0I]Y7T47\PO?"s_LsCA]:0[3aa$FXoXk<;[S$.JJBV&.H52sE1);KCdOuK"
%fbfSMA2^<<!UnnQNJO9@2Wg;+RB7a`NhB?'M9K#Q_&gFdmhqRuRqYO8%DN6@D2"j,6"m&MXY7*nVB#]dqGSNE0lIOmD4*lRcr1m)
%Y(5$A:K7\sW2Z%QD7Q$s$\+m=&s1gJ_ELXi&e*Dp_U!MkW@cR5,t&abZq@,P]"g$'Uc*P>d"E8]&!uWp#1HC-PD6T/'U,N`=Ka%E
%E9^thQq'^D)MkH\K<>r$]Pe^fb(W&ko"$*TAD/)eK[`UdCtd"V+]C&uHbQ`$#c,Gnh/n+?qdM-S\d4JM##hAB*OKA)\V%>C9dS#U
%6I@e'$Y9sm_LsAGqP[e^6SmgHRnAhuBjAD%D^TQ9S!ec)Y`f;+UpZK!&1CT:/hu)-hb0Nfe1!Ha[%"F/92qgjf<k3jB;lbZ$OQjM
%Z=)]YC>;r)LN-ru*(F4LElm^k4cHsmQffY)\oO,Z/e1Jo6p2#P*E[`r9;`)MNlY!9LE/Dg#GiYMVk>%gB`s1<P"mG9$^\srA[[E=
%(2.;"OkFEc<YP2_B%<-9T/X>%]u_$?<s;)n.A7<8fk;1&'8l&FZUM%tMM5N:2C.$%ko#N&Coc-r[X5Df$d.m.)GVM4>G.rp`$mO<
%.4?6t<)?7i.t_$I_U>Jqm><C(ST.kFh",J!/(JKV0+R!5Pu/RgWQMmH7bfdUWgW/GUh4B-aD@o?Y[.-ie95]!5\-N;oCfHQRE[in
%C%"VdqP:*U=i45Ycgmm:Cs/V!@7ZCDXQ5=o^l[i(_N9>Kh!@!/OYEU-XXN)U!C>CL-CI+SD5SfUkB8Ug*4Jj-N+89;1[Rt<8>]D<
%*CpsH5VdI9V):aHji'icG.*J`eh&/*<Ug`,\U>h>7jVe_d3s*)h)=]F*24]9*d1#$F/9nt=5/Zm,.<^]*Z^Bmpe>'];G38('#*'p
%PUPWI&tX0@6"ah8Z;8DP51&.#/p5UG-AR^/H9Il)SO@KiH2jlRi</I8N_e:kP/t`O=cKjP"Z_Qq[QF^RNJ(X[bK1uNmsPlCH+Gdu
%RAXid88C>_:L:#Q"JVDVP*7=Dl\S5V-G8/IU$NVXLmJ38Gfc54f6G7]B9*a>KX.qXP0d^rNuF(t`qq6Klm\VS6'CU[1u1m3I>"2o
%KZpkS3F^m,"p6VbiF%a1-+&b,;=Oo",O/7gOkNh^AV1T(NYT5g.B8eN4#1$6$$_Wh,;]Es4gPkAdSee?0es\8JqV@fqcQhCCo`.&
%<N><)C^_Od<\*j@beg!^?i\?rG-V;RQV?n'rb):r/"tl5NQnPL6u>G/1HdCK8(=?+g'YOg8k<fQLUj.$KXHMoE66):cEt:VX<Fu+
%+A>f"LrNX63hfVTV'E&^JMOa+"I)bT=?=T4m67$de+STgOkN=$[`i_6gEek5Ok\(s-T`QT0EKD';"09aW5!N!_%[U7.ilc'D4.V8
%`d05cc^R"Obk145A@>/l0I*pOk0s,u2Jd'gP,3(tie$"(K5"OJcDm.[P:IgM5KOG(Ok2AMoSgGkdS?_r;G!SHSk=m./DTU\%G@eM
%g,_FRcEtl^dn!LcGO4s:V^GoF4H)bC:ECpfA`P]n6s`OY=Cl:ian,SUE?pqneK!)\>Z-O4?TmW6Tp!">afUJlM:>&.#18T2NRtm7
%KmYG9="C@)Y?'.tjL%BocSG&p.]1LCfbE$eYCKT.`0TV@?5=AL=]LJ-iON2_Att@R+Ub$?NLlPO,RY"FeDEFV]YDT\B9MNkH20q_
%,m-ZciZf+se?01>UuW^iOsFs<G2']E7s=:):j25?LZC=^'fsjDFr!)T<rH?hR]8eFc.'akRd!AVo\G(`$Hei3Y#7Hn:kN:_,aYTA
%jZitO]]#i_R*Hu]pi;Y(;E\"08i<0J7;<o7Fg-1Ep.FV&+o<I/e>I_WX=c/a[6mK%]Rqu#>?IFdL"0)*aJt6R.=ra6;ptF=Q]>U^
%=0e!4"TK5fMi^JuHPC9;WM\Ts>=KJE<ND5T9$.ZDFBbOD9VH<c/DPV#(?A:)"p.5:PXNu\5R'_)AUBHg8c'\>$"[`]QNSDXT>L&I
%lJe)g8/N)p4^s+14-cf[ZkKFsG.1ldMPRY"llMjr>\I'3[On,]EP)HDHs@:,;EIVrP1pScV^2X;C-,9!T=,DWBO2hpWP8t+88^u4
%.sBE=_)K0$eAZZTnK*N<Z@-7;,s;MsQeXpA65q4.['>%t3.>dAAD,]N=boL]8_GN6%:ur295\t?adFEur^taC.pR,,NDC$1=k+rE
%X*#2+"lr3&1f@V7YM=BK?BLRmr3-fo*3#`m$D'j*I&>&/b##pVDdU3niK66!d<db\708W'g_nONY9Y^>$@lZ]%da;=69nG&"=/+l
%(tEg.2+AICeK(DgaT^d+VB_dNjl=@s;RPP[RP"fd#pe<r3iJ<Q;'!SIBtHuL,A'hfY9[0uJ\]..L<*@MRr)Bh5_YHUUuTuSXHkQ?
%:<d>.NgZ-c\>7b0!EYiEcAg$5<]/@lZc5>R);;TeSA>B<H`&B*2Dp:G)[he],S$j+="BPhgR"9bkc5Hsc%EZ4d3t_jCtbGn=)9b\
%Ul7q7h)qZ0G2S+$C87bm*_Si#X"(*NR$,Y9/)"$,-*u!RPU`)\p:+(Ia%"7Vg-OdlekN'=)';,<N@2,STTY4uoHp?U.lJTH'mXXB
%lrMQ@?TX(>"'%ZV=prHZdiD,'aGR?:8qKg,3jY9s-,mb?7ThkoW$/FZ:n=grSLIX%E9##S/"sj`1?s$CP(`-PHS1Uo[:hj3Z$RbC
%m(4#fPI2p@jFUjQ$EHXO#"%,P=6-_b9u2Y+Jq^L;J;&#)9d6:LX*,+Ic'03u9^O,97p_JQS*+815g\^3pWOW-9NEecGDp:J#j([j
%Nid:t.jYPC@Jd!_88>2WgDH4i8bb4dL[Cip%N5T#7lc]bN]mej,0<I09rB7"b/P#cJ"pg"U&63,P,s>m_pQuEfM78u:*60n]##j7
%8*G[!#SOZ\/fpl9gk_c7.N$Qnq?S3!&83,iDo<FX*qmUrDE?%?8(gRFKo;3Qoc5?Xfn'f9Wf&.%d@,0q$'M?PFg')1>A$nk[8*57
%8a"'H0oG@%AQ1JYf8XMl\$KQkP+&LN9Wr!R\Gag<`dq<],S%3(UiE&--B/*b>u'+J2nEL^3!c<c;5L%2`(CKUX<FZGAi3lKa_I^,
%T(gIQC*o:kgW(LrmG,4=WU>kD7L3QhOJKg)53abZ76IYI5Z-"\b+bbGW\Q5-ZB[k[jL3%FSuNLR[6IYS4He(c+\&MsS4;t<j>7K*
%(f_U!19"o2K7t%_Z>eS/O/(!<e<qODbbH\/)D-N[;28QqVS+H87WJ)5EZ-P$`c3Y9N8&.\LI!:Hn50kqeO1YmPg]gd.+:]a5&m6c
%`^8`Cr'#*;[aW8F8!/Hm#!$gF(=O_1<N4I3'Pnob\F$h*%r:K+4fhq5iaK8dCtF8F;m/+Ie\`qkLKPsDTUh=;QH4&pRsCJ7R?t<-
%KG1a<+fm!Spdd&<"rRs$_-oDH6og!4-'Y*^Keem44%L.`92J70`[R`u8P3\JoU@>*VIQc,;OUc\.4p]DXOQ-$;OSg891j7>DN`EP
%C'Q2)TH@65RMBuN&*,W/l$oL(p68%%hDX%rV&uZuE[('FmDqTn,IN/g7ctRXS3TF(*&j:ULoc^b#Q7_=*#["&dn].-Z9d;g/gr(k
%=6_&sBh#dlQ24,rU\SB+jiD/D'!!iM?FgFZ.gu"^)3%CXNcG++SLtrE!#!b*cY.F+Fd%ZIC3il1=Zc"N.Ag`ULZsp0)Ri_,C8H(n
%$#N\jDnLXSjt"EoW+"V_jH=`3Y<,>nYdQMnI6"=ld\$?:O`%"_mKTpo/=5ru3*t\D&[.[sURXQc:We(aaP;fiUmQ)+_LoipH-fOS
%oKcE>*2X-:`Zbm8$2Tf.b#orT!Si'@e2!1i@7HM5>XgJ]RZW_+Kp'deEei8/9J,gEAYao5P-IhW:Xi-/Q"m/QZ-o\<&hnA(Laa4k
%FKI<sl%r#M#@&'g#$a0;A0hrEp#eb5ZSK)`<eXDq<84/X\<8@IcY+Y_U;jE\1?t(Cg+qT,8N^]l:^5]C#*!jYoTr64$EN(4G/0B<
%7ohs%dTF"",[AckXAV-&1Pe+RjBjL]4!UnlP\,Vu4n(F'BjBb[LFK'>Q12$SD(ha-aWoZtaZNq&3jg^;G)KoaA$08>a5FWqD?Gg?
%Z!D.uDE2i!KX>ShR\.eO\Qj9%$<MBL>8BF<CZ@'m2/E$lgN(&:>Q,H8`T<nQ)3hUckt-?on4Qp=[Vk1UFj;Y,W`XW0[A.B+]5TcY
%ou=[L=)Rs-pAM=1-c'lmhtZp=a7jN-\U45Qd50\ZGiO;05/)%*h@C-74Lk@Aktf@WhS9$LAG5EN+928Vhj^DjM8F>[^%'sUUM'Q:88P;Q~>
%AI9_PrivateDataEnd
